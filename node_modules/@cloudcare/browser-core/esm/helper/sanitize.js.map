{"version":3,"file":"sanitize.js","names":["display","ONE_KIBI_BYTE","detachToJsonMethod","SANITIZE_DEFAULT_MAX_CHARACTER_COUNT","JSON_PATH_ROOT_ELEMENT","KEY_DECORATION_LENGTH","sanitize","source","maxCharacterCount","undefined","restoreObjectPrototypeToJson","Object","prototype","restoreArrayPrototypeToJson","Array","containerQueue","visitedObjectsWithPath","WeakMap","sanitizedData","sanitizeProcessor","accumulatedCharacterCount","JSON","stringify","length","warnOverCharacterLimit","containerToProcess","shift","separatorLength","isArray","key","targetData","path","target","hasOwnProperty","call","parentPath","queue","sourceToSanitize","tryToApplyToJSON","_typeof","sanitizePrimitivesAndFunctions","sanitizedSource","sanitizeObjects","sourceAsObject","has","get","currentPath","set","push","value","toString","name","description","Event","isTrusted","result","match","_unused","object","toJSON","_unused2","changeType","warn"],"sources":["../../src/helper/sanitize.js"],"sourcesContent":["import { display } from './display'\nimport { ONE_KIBI_BYTE } from './byteUtils'\nimport { detachToJsonMethod } from './serialisation/jsonStringify'\n\n// The maximum size of a single event is 256KiB. By default, we ensure that user-provided data\n// going through sanitize fits inside our events, while leaving room for other contexts, metadata, ...\nvar SANITIZE_DEFAULT_MAX_CHARACTER_COUNT = 220 * ONE_KIBI_BYTE\n\n// Symbol for the root element of the JSONPath used for visited objects\nvar JSON_PATH_ROOT_ELEMENT = '$'\n\n// When serializing (using JSON.stringify) a key of an object, { key: 42 } gets wrapped in quotes as \"key\".\n// With the separator (:), we need to add 3 characters to the count.\nvar KEY_DECORATION_LENGTH = 3\n\n/**\n * Ensures user-provided data is 'safe' for the SDK\n * - Deep clones data\n * - Removes cyclic references\n * - Transforms unserializable types to a string representation\n *\n * LIMITATIONS:\n * - Size is in characters, not byte count (may differ according to character encoding)\n * - Size does not take into account indentation that can be applied to JSON.stringify\n * - Non-numerical properties of Arrays are ignored. Same behavior as JSON.stringify\n *\n * @param source              User-provided data meant to be serialized using JSON.stringify\n * @param maxCharacterCount   Maximum number of characters allowed in serialized form\n */\n\nexport function sanitize(source, maxCharacterCount) {\n  if (maxCharacterCount === undefined) {\n    maxCharacterCount = SANITIZE_DEFAULT_MAX_CHARACTER_COUNT\n  }\n  // Unbind any toJSON function we may have on [] or {} prototypes\n  var restoreObjectPrototypeToJson = detachToJsonMethod(Object.prototype)\n  var restoreArrayPrototypeToJson = detachToJsonMethod(Array.prototype)\n\n  // Initial call to sanitizeProcessor - will populate containerQueue if source is an Array or a plain Object\n  var containerQueue = []\n  var visitedObjectsWithPath = new WeakMap()\n  var sanitizedData = sanitizeProcessor(\n    source,\n    JSON_PATH_ROOT_ELEMENT,\n    undefined,\n    containerQueue,\n    visitedObjectsWithPath\n  )\n  var accumulatedCharacterCount =\n    (JSON.stringify(sanitizedData) && JSON.stringify(sanitizedData).length) || 0\n  if (accumulatedCharacterCount > maxCharacterCount) {\n    warnOverCharacterLimit(maxCharacterCount, 'discarded', source)\n    return undefined\n  }\n\n  while (\n    containerQueue.length > 0 &&\n    accumulatedCharacterCount < maxCharacterCount\n  ) {\n    var containerToProcess = containerQueue.shift()\n    var separatorLength = 0 // 0 for the first element, 1 for subsequent elements\n\n    // Arrays and Objects have to be handled distinctly to ensure\n    // we do not pick up non-numerical properties from Arrays\n    if (Array.isArray(containerToProcess.source)) {\n      for (var key = 0; key < containerToProcess.source.length; key++) {\n        var targetData = sanitizeProcessor(\n          containerToProcess.source[key],\n          containerToProcess.path,\n          key,\n          containerQueue,\n          visitedObjectsWithPath\n        )\n\n        if (targetData !== undefined) {\n          accumulatedCharacterCount += JSON.stringify(targetData).length\n        } else {\n          // When an element of an Array (targetData) is undefined, it is serialized as null:\n          // JSON.stringify([undefined]) => '[null]' - This accounts for 4 characters\n          accumulatedCharacterCount += 4\n        }\n        accumulatedCharacterCount += separatorLength\n        separatorLength = 1\n        if (accumulatedCharacterCount > maxCharacterCount) {\n          warnOverCharacterLimit(maxCharacterCount, 'truncated', source)\n          break\n        }\n        containerToProcess.target[key] = targetData\n      }\n    } else {\n      for (var key in containerToProcess.source) {\n        if (\n          Object.prototype.hasOwnProperty.call(containerToProcess.source, key)\n        ) {\n          var targetData = sanitizeProcessor(\n            containerToProcess.source[key],\n            containerToProcess.path,\n            key,\n            containerQueue,\n            visitedObjectsWithPath\n          )\n          // When a property of an object has an undefined value, it will be dropped during serialization:\n          // JSON.stringify({a:undefined}) => '{}'\n          if (targetData !== undefined) {\n            accumulatedCharacterCount +=\n              JSON.stringify(targetData).length +\n              separatorLength +\n              key.length +\n              KEY_DECORATION_LENGTH\n            separatorLength = 1\n          }\n          if (accumulatedCharacterCount > maxCharacterCount) {\n            warnOverCharacterLimit(maxCharacterCount, 'truncated', source)\n            break\n          }\n          containerToProcess.target[key] = targetData\n        }\n      }\n    }\n  }\n\n  // Rebind detached toJSON functions\n  restoreObjectPrototypeToJson()\n  restoreArrayPrototypeToJson()\n\n  return sanitizedData\n}\n\n/**\n * Internal function to factorize the process common to the\n * initial call to sanitize, and iterations for Arrays and Objects\n *\n */\nfunction sanitizeProcessor(\n  source,\n  parentPath,\n  key,\n  queue,\n  visitedObjectsWithPath\n) {\n  // Start by handling toJSON, as we want to sanitize its output\n  var sourceToSanitize = tryToApplyToJSON(source)\n\n  if (!sourceToSanitize || typeof sourceToSanitize !== 'object') {\n    return sanitizePrimitivesAndFunctions(sourceToSanitize)\n  }\n\n  var sanitizedSource = sanitizeObjects(sourceToSanitize)\n  if (\n    sanitizedSource !== '[Object]' &&\n    sanitizedSource !== '[Array]' &&\n    sanitizedSource !== '[Error]'\n  ) {\n    return sanitizedSource\n  }\n\n  // Handle potential cyclic references\n  // We need to use source as sourceToSanitize could be a reference to a new object\n  // At this stage, we know the source is an object type\n  var sourceAsObject = source\n  if (visitedObjectsWithPath.has(sourceAsObject)) {\n    return (\n      '[Reference seen at ' + visitedObjectsWithPath.get(sourceAsObject) + ']'\n    )\n  }\n\n  // Add processed source to queue\n  var currentPath = key !== undefined ? parentPath + '.' + key : parentPath\n  var target = Array.isArray(sourceToSanitize) ? [] : {}\n  visitedObjectsWithPath.set(sourceAsObject, currentPath)\n  queue.push({ source: sourceToSanitize, target, path: currentPath })\n\n  return target\n}\n\n/**\n * Handles sanitization of simple, non-object types\n *\n */\nfunction sanitizePrimitivesAndFunctions(value) {\n  // BigInt cannot be serialized by JSON.stringify(), convert it to a string representation\n  if (typeof value === 'bigint') {\n    return '[BigInt] ' + value.toString()\n  }\n  // Functions cannot be serialized by JSON.stringify(). Moreover, if a faulty toJSON is present, it needs to be converted\n  // so it won't prevent stringify from serializing later\n  if (typeof value === 'function') {\n    return '[Function] ' + value.name || 'unknown'\n  }\n  // JSON.stringify() does not serialize symbols.\n  if (typeof value === 'symbol') {\n    // symbol.description is part of ES2019+\n    return '[Symbol] ' + value.description || value.toString()\n  }\n\n  return value\n}\n\n/**\n * Handles sanitization of object types\n *\n * LIMITATIONS\n * - If a class defines a toStringTag Symbol, it will fall in the catch-all method and prevent enumeration of properties.\n * To avoid this, a toJSON method can be defined.\n * - IE11 does not return a distinct type for objects such as Map, WeakMap, ... These objects will pass through and their\n * properties enumerated if any.\n *\n */\nfunction sanitizeObjects(value) {\n  try {\n    // Handle events - Keep a simple implementation to avoid breaking changes\n    if (value instanceof Event) {\n      return {\n        isTrusted: value.isTrusted\n      }\n    }\n\n    // Handle all remaining object types in a generic way\n    var result = Object.prototype.toString.call(value)\n    var match = result.match(/\\[object (.*)\\]/)\n    if (match && match[1]) {\n      return '[' + match[1] + ']'\n    }\n  } catch {\n    // If the previous serialization attempts failed, and we cannot convert using\n    // Object.prototype.toString, declare the value unserializable\n  }\n  return '[Unserializable]'\n}\n\n/**\n * Checks if a toJSON function exists and tries to execute it\n *\n */\nfunction tryToApplyToJSON(value) {\n  var object = value\n  if (object && typeof object.toJSON === 'function') {\n    try {\n      return object.toJSON()\n    } catch {\n      // If toJSON fails, we continue by trying to serialize the value manually\n    }\n  }\n\n  return value\n}\n\n/**\n * Helper function to display the warning when the accumulated character count is over the limit\n */\nfunction warnOverCharacterLimit(maxCharacterCount, changeType, source) {\n  display.warn(\n    'The data provided has been ' +\n      changeType +\n      ' as it is over the limit of ' +\n      maxCharacterCount +\n      ' characters:',\n    source\n  )\n}\n"],"mappings":"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","ignoreList":[]}