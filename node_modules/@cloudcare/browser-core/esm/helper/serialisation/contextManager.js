import { computeBytesCount } from '../byteUtils';
import { deepClone, throttle, getType } from '../tools';
import { sanitize } from '../sanitize';
import { jsonStringify } from './jsonStringify';
import { Observable } from '../observable';
import { warnIfCustomerDataLimitReached } from './heavyCustomerDataWarning';
export var BYTES_COMPUTATION_THROTTLING_DELAY = 200;
export function createContextManager(customerDataType, computeBytesCountImpl) {
  if (typeof computeBytesCountImpl === 'undefined') {
    computeBytesCountImpl = computeBytesCount;
  }
  var context = {};
  var bytesCountCache;
  var alreadyWarned = false;
  var changeObservable = new Observable();
  // Throttle the bytes computation to minimize the impact on performance.
  // Especially useful if the user call context APIs synchronously multiple times in a row
  var computeBytesCountThrottled = throttle(function (context) {
    bytesCountCache = computeBytesCountImpl(jsonStringify(context));
    if (!alreadyWarned) {
      alreadyWarned = warnIfCustomerDataLimitReached(bytesCountCache, customerDataType);
    }
  }, BYTES_COMPUTATION_THROTTLING_DELAY).throttled;
  var contextManager = {
    getBytesCount: function getBytesCount() {
      return bytesCountCache;
    },
    /** @deprecated use getContext instead */
    get: function get() {
      return context;
    },
    /** @deprecated use setContextProperty instead */
    add: function add(key, value) {
      context[key] = value;
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    /** @deprecated renamed to removeContextProperty */
    remove: function remove(key) {
      delete context[key];
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    /** @deprecated use setContext instead */
    set: function set(newContext) {
      context = newContext;
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    getContext: function getContext() {
      return deepClone(context);
    },
    setContext: function setContext(newContext) {
      if (getType(newContext) === 'object') {
        context = sanitize(newContext);
        computeBytesCountThrottled(context);
      } else {
        contextManager.clearContext();
      }
      changeObservable.notify();
    },
    setContextProperty: function setContextProperty(key, property) {
      context[key] = deepClone(property);
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    removeContextProperty: function removeContextProperty(key) {
      delete context[key];
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    clearContext: function clearContext() {
      context = {};
      bytesCountCache = 0;
      changeObservable.notify();
    },
    changeObservable: changeObservable
  };
  return contextManager;
}
//# sourceMappingURL=contextManager.js.map