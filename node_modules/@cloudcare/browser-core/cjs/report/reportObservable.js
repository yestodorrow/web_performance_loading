"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RawReportType = void 0;
exports.initReportObservable = initReportObservable;
var _errorTools = require("../helper/errorTools");
var _observable = require("../helper/observable");
var _tools = require("../helper/tools");
var _addEventListener2 = require("../browser/addEventListener");
var _enums = require("../helper/enums");
var _monitor = require("../helper/monitor");
var RawReportType = {
  intervention: 'intervention',
  deprecation: 'deprecation',
  cspViolation: 'csp_violation'
};
exports.RawReportType = RawReportType;
function initReportObservable(configuration, apis) {
  var observables = [];
  if ((0, _tools.includes)(apis, RawReportType.cspViolation)) {
    observables.push(createCspViolationReportObservable(configuration));
  }
  var reportTypes = (0, _tools.filter)(apis, function (api) {
    return api !== RawReportType.cspViolation;
  });
  if (reportTypes.length) {
    observables.push(createReportObservable(reportTypes));
  }
  return _observable.mergeObservables.apply(this, observables);
}
function createReportObservable(reportTypes) {
  return new _observable.Observable(function (observable) {
    if (!window.ReportingObserver) {
      return;
    }
    var handleReports = (0, _monitor.monitor)(function (reports) {
      (0, _tools.each)(reports, function (report) {
        observable.notify(buildRawReportFromReport(report));
      });
    });
    var observer = new window.ReportingObserver(handleReports, {
      types: reportTypes,
      buffered: true
    });
    observer.observe();
    return function () {
      observer.disconnect();
    };
  });
  return observable;
}
function createCspViolationReportObservable(configuration) {
  return new _observable.Observable(function (observable) {
    var handleCspViolation = function handleCspViolation(event) {
      observable.notify(buildRawReportFromCspViolation(event));
    };
    var _addEventListener = (0, _addEventListener2.addEventListener)(document, _enums.DOM_EVENT.SECURITY_POLICY_VIOLATION, handleCspViolation);
    return _addEventListener.stop;
  });
  return observable;
}
function buildRawReportFromReport(report) {
  var body = report.body;
  var type = report.type;
  return {
    type: type,
    subtype: body.id,
    message: type + ': ' + body.message,
    stack: buildStack(body.id, body.message, body.sourceFile, body.lineNumber, body.columnNumber)
  };
}
function buildRawReportFromCspViolation(event) {
  var type = RawReportType.cspViolation;
  var message = "'" + event.blockedURI + "' blocked by '" + event.effectiveDirective + "' directive";
  return {
    type: RawReportType.cspViolation,
    subtype: event.effectiveDirective,
    message: type + ': ' + message,
    stack: buildStack(event.effectiveDirective, message + ' of the policy "' + (0, _tools.safeTruncate)(event.originalPolicy, 100, '...') + '"', event.sourceFile, event.lineNumber, event.columnNumber)
  };
}
function buildStack(name, message, sourceFile, lineNumber, columnNumber) {
  return sourceFile && (0, _errorTools.toStackTraceString)({
    name: name,
    message: message,
    stack: [{
      func: '?',
      url: sourceFile,
      line: lineNumber,
      column: columnNumber
    }]
  });
}
//# sourceMappingURL=reportObservable.js.map