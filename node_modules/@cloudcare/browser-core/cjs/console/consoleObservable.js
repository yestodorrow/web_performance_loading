"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initConsoleObservable = initConsoleObservable;
var _tracekit = require("../tracekit");
var _errorTools = require("../helper/errorTools");
var _observable = require("../helper/observable");
var _tools = require("../helper/tools");
var _jsonStringify = require("../helper/serialisation/jsonStringify");
var _display = require("../helper/display");
var _monitor = require("../helper/monitor");
var consoleObservablesByApi = {};
function initConsoleObservable(apis) {
  var consoleObservables = (0, _tools.map)(apis, function (api) {
    if (!consoleObservablesByApi[api]) {
      consoleObservablesByApi[api] = createConsoleObservable(api);
    }
    return consoleObservablesByApi[api];
  });
  return _observable.mergeObservables.apply(this, consoleObservables);
}

/* eslint-disable no-console */
function createConsoleObservable(api) {
  return new _observable.Observable(function (observable) {
    var originalConsoleApi = console[api];
    console[api] = function () {
      var params = [].slice.call(arguments);
      originalConsoleApi.apply(console, arguments);
      var handlingStack = (0, _errorTools.createHandlingStack)();
      (0, _monitor.callMonitored)(function () {
        observable.notify(buildConsoleLog(params, api, handlingStack));
      });
    };
    return function () {
      console[api] = originalConsoleApi;
    };
  });
}
function buildConsoleLog(params, api, handlingStack) {
  var message = (0, _tools.map)(params, function (param) {
    return formatConsoleParameters(param);
  }).join(' ');
  var stack;
  var causes;
  if (api === _display.ConsoleApiName.error) {
    var firstErrorParam = (0, _tools.find)(params, function (param) {
      return param instanceof Error;
    });
    stack = firstErrorParam ? (0, _errorTools.toStackTraceString)((0, _tracekit.computeStackTrace)(firstErrorParam)) : undefined;
    message = 'console error: ' + message;
    causes = firstErrorParam ? (0, _errorTools.flattenErrorCauses)(firstErrorParam, 'console') : undefined;
  }
  return {
    api: api,
    message: message,
    stack: stack,
    handlingStack: handlingStack,
    causes: causes
  };
}
function formatConsoleParameters(param) {
  if (typeof param === 'string') {
    return param;
  }
  if (param instanceof Error) {
    return (0, _errorTools.formatErrorMessage)((0, _tracekit.computeStackTrace)(param));
  }
  return (0, _jsonStringify.jsonStringify)(param, undefined, 2);
}
//# sourceMappingURL=consoleObservable.js.map