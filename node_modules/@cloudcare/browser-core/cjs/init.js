"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defineGlobal = defineGlobal;
exports.getGlobalObject = getGlobalObject;
exports.makePublicApi = makePublicApi;
var _tools = require("./helper/tools");
var _monitor = require("./helper/monitor");
var _catchUserErrors = require("./helper/catchUserErrors");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function makePublicApi(stub) {
  var publicApi = (0, _tools.assign)({
    onReady: function onReady(callback) {
      callback();
    }
  }, stub);

  // Add an "hidden" property to set debug mode. We define it that way to hide it
  // as much as possible but of course it's not a real protection.
  Object.defineProperty(publicApi, '_setDebug', {
    get: function get() {
      return _monitor.setDebugMode;
    },
    enumerable: false
  });
  return publicApi;
}
function defineGlobal(global, name, api) {
  var existingGlobalVariable = global[name];
  global[name] = api;
  if (existingGlobalVariable && existingGlobalVariable.q) {
    (0, _tools.each)(existingGlobalVariable.q, function (fn) {
      (0, _catchUserErrors.catchUserErrors)(fn, 'onReady callback threw an error:')();
    });
  }
}
function getGlobalObject() {
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object') {
    return globalThis;
  }
  Object.defineProperty(Object.prototype, '_gc_temp_', {
    get: function get() {
      return this;
    },
    configurable: true
  });
  // @ts-ignore
  var globalObject = _gc_temp_;
  // @ts-ignore
  delete Object.prototype._gc_temp_;
  if (_typeof(globalObject) !== 'object') {
    // on safari _gc_temp_ is available on window but not globally
    // fallback on other browser globals check
    if ((typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object') {
      globalObject = self;
    } else if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
      globalObject = window;
    } else {
      globalObject = {};
    }
  }
  return globalObject;
}
// export function checkCookiesAuthorized(options) {
//   if (!areCookiesAuthorized(options)) {
//     console.warn('Cookies are not authorized, we will not send any data.')
//     return false
//   }
//   return true
// }

// export function checkIsNotLocalFile() {
//   if (isLocalFile()) {
//     console.error('Execution is not allowed in the current context.')
//     return false
//   }
//   return true
// }

// function isLocalFile() {
//   return window.location.protocol === 'file:'
// }
//# sourceMappingURL=init.js.map