"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startSessionManager = exports.VISIBILITY_CHECK_DELAY = void 0;
exports.stopSessionManager = stopSessionManager;
var _tools = require("../helper/tools");
var _addEventListener2 = require("../browser/addEventListener");
var _contextHistory = require("../helper/contextHistory");
var _sessionStore = require("./sessionStore");
var _sessionConstants = require("./sessionConstants");
var _enums = require("../helper/enums");
var _timer = require("../helper/timer");
var _observable = require("../helper/observable");
var VISIBILITY_CHECK_DELAY = _tools.ONE_MINUTE;
exports.VISIBILITY_CHECK_DELAY = VISIBILITY_CHECK_DELAY;
var SESSION_CONTEXT_TIMEOUT_DELAY = _sessionConstants.SESSION_TIME_OUT_DELAY;
var stopCallbacks = [];
var startSessionManager = function startSessionManager(options, productKey, computeSessionState) {
  var renewObservable = new _observable.Observable();
  var expireObservable = new _observable.Observable();
  var sessionStore = (0, _sessionStore.startSessionStore)(options, productKey, computeSessionState);
  stopCallbacks.push(function () {
    return sessionStore.stop();
  });
  var sessionContextHistory = new _contextHistory.ContextHistory(SESSION_CONTEXT_TIMEOUT_DELAY);
  stopCallbacks.push(function () {
    return sessionContextHistory.stop();
  });
  sessionStore.renewObservable.subscribe(function () {
    sessionContextHistory.add(buildSessionContext(), (0, _tools.relativeNow)());
    renewObservable.notify();
  });
  sessionStore.expireObservable.subscribe(function () {
    expireObservable.notify();
    sessionContextHistory.closeActive((0, _tools.relativeNow)());
  });
  sessionStore.expandOrRenewSession();
  sessionContextHistory.add(buildSessionContext(), (0, _tools.clocksOrigin)().relative);
  trackActivity(function () {
    return sessionStore.expandOrRenewSession();
  });
  trackVisibility(function () {
    return sessionStore.expandSession();
  });
  function buildSessionContext() {
    return {
      id: sessionStore.getSession().id,
      trackingType: sessionStore.getSession()[productKey]
    };
  }
  return {
    findActiveSession: function findActiveSession(startTime) {
      return sessionContextHistory.find(startTime);
    },
    renewObservable: renewObservable,
    expireObservable: expireObservable,
    expire: sessionStore.expire
  };
};
exports.startSessionManager = startSessionManager;
function stopSessionManager() {
  (0, _tools.each)(stopCallbacks, function (e) {
    return e();
  });
  stopCallbacks = [];
}
function trackActivity(expandOrRenewSession) {
  var _addEventListeners = (0, _addEventListener2.addEventListeners)(window, [_enums.DOM_EVENT.CLICK, _enums.DOM_EVENT.TOUCH_START, _enums.DOM_EVENT.KEY_DOWN, _enums.DOM_EVENT.SCROLL], expandOrRenewSession, {
    capture: true,
    passive: true
  });
  stopCallbacks.push(_addEventListeners.stop);
}
function trackVisibility(expandSession) {
  var expandSessionWhenVisible = function expandSessionWhenVisible() {
    if (document.visibilityState === 'visible') {
      expandSession();
    }
  };
  var _addEventListener = (0, _addEventListener2.addEventListener)(document, _enums.DOM_EVENT.VISIBILITY_CHANGE, expandSessionWhenVisible);
  stopCallbacks.push(_addEventListener.stop);
  var visibilityCheckInterval = (0, _timer.setInterval)(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY);
  stopCallbacks.push(function () {
    (0, _timer.clearInterval)(visibilityCheckInterval);
  });
}
//# sourceMappingURL=sessionManagement.js.map