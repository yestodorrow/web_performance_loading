"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initXhrObservable = initXhrObservable;
var _instrumentMethod = require("../helper/instrumentMethod");
var _observable = require("../helper/observable");
var _urlPolyfill = require("../helper/urlPolyfill");
var _tools = require("../helper/tools");
var _addEventListener = require("../browser/addEventListener");
var xhrObservable;
var xhrContexts = {};
var DATA_FLUX_REQUEST_ID_KEY = '_DATAFLUX_REQUEST_UUID';
function initXhrObservable() {
  if (!xhrObservable) {
    xhrObservable = createXhrObservable();
  }
  return xhrObservable;
}
function createXhrObservable() {
  return new _observable.Observable(function (observable) {
    var openInstrumentMethod = (0, _instrumentMethod.instrumentMethodAndCallOriginal)(XMLHttpRequest.prototype, 'open', {
      before: openXhr
    });
    var sendInstrumentMethod = (0, _instrumentMethod.instrumentMethodAndCallOriginal)(XMLHttpRequest.prototype, 'send', {
      before: function before() {
        sendXhr.call(this, observable);
      }
    });
    var abortInstrumentMethod = (0, _instrumentMethod.instrumentMethodAndCallOriginal)(XMLHttpRequest.prototype, 'abort', {
      before: abortXhr
    });
    return function () {
      openInstrumentMethod.stop();
      sendInstrumentMethod.stop();
      abortInstrumentMethod.stop();
    };
  });
}
function openXhr(method, url) {
  var requestUUID = this[DATA_FLUX_REQUEST_ID_KEY] || (0, _tools.UUID)();
  this[DATA_FLUX_REQUEST_ID_KEY] = requestUUID;
  xhrContexts[requestUUID] = {
    state: 'open',
    method: String(method).toUpperCase(),
    url: (0, _urlPolyfill.normalizeUrl)(String(url))
  };
}
function sendXhr(observable) {
  var context = xhrContexts[this[DATA_FLUX_REQUEST_ID_KEY]];
  if (!context) {
    return;
  }
  var startContext = context;
  startContext.state = 'start';
  startContext.startTime = (0, _tools.relativeNow)();
  startContext.startClocks = (0, _tools.clocksNow)();
  startContext.isAborted = false;
  startContext.xhr = this;
  var hasBeenReported = false;
  var stopInstrumentingOnReadyStateChange = (0, _instrumentMethod.instrumentMethodAndCallOriginal)(this, 'onreadystatechange', {
    before: function before() {
      if (this.readyState === XMLHttpRequest.DONE) {
        // Try to report the XHR as soon as possible, because the XHR may be mutated by the
        // application during a future event. For example, Angular is calling .abort() on
        // completed requests during a onreadystatechange event, so the status becomes '0'
        // before the request is collected.
        onEnd.call(this);
      }
    }
  }).stop;
  var onEnd = function onEnd() {
    unsubscribeLoadEndListener();
    stopInstrumentingOnReadyStateChange();
    if (hasBeenReported) {
      return;
    }
    hasBeenReported = true;
    var completeContext = context;
    completeContext.state = 'complete';
    completeContext.duration = (0, _tools.elapsed)(startContext.startClocks.timeStamp, (0, _tools.timeStampNow)());
    completeContext.status = this.status;
    observable.notify((0, _tools.shallowClone)(completeContext));
    clearRequestId.call(this);
  };
  var unsubscribeLoadEndListener = (0, _addEventListener.addEventListener)(this, 'loadend', onEnd).stop;
  observable.notify(startContext);
}
function clearRequestId() {
  delete xhrContexts[this[DATA_FLUX_REQUEST_ID_KEY]];
  delete this[DATA_FLUX_REQUEST_ID_KEY];
}
function abortXhr() {
  var context = xhrContexts[this[DATA_FLUX_REQUEST_ID_KEY]];
  if (context) {
    context.isAborted = true;
  }
}
//# sourceMappingURL=xhrObservable.js.map