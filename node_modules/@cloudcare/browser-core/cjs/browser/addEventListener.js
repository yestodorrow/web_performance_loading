"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addEventListener = addEventListener;
exports.addEventListeners = addEventListeners;
var _tools = require("../helper/tools");
var _getZoneJsOriginalValue = require("../helper/getZoneJsOriginalValue");
var _monitor = require("../helper/monitor");
function addEventListener(eventTarget, event, listener, options) {
  return addEventListeners(eventTarget, [event], listener, options);
}

/**
 * Add event listeners to an event emitter object (Window, Element, mock object...).  This provides
 * a few conveniences compared to using `element.addEventListener` directly:
 *
 * * supports IE11 by:
 *   * using an option object only if needed
 *   * emulating the `once` option
 *
 * * wraps the listener with a `monitor` function
 *
 * * returns a `stop` function to remove the listener
 *
 * * with `once: true`, the listener will be called at most once, even if different events are
 *   listened
 */

function addEventListeners(eventTarget, eventNames, listener, options) {
  var wrappedListener = (0, _monitor.monitor)(options && options.once ? function (event) {
    stop();
    listener(event);
  } : listener);
  options = options && options.passive ? {
    capture: options.capture,
    passive: options.passive
  } : options && options.capture;
  var add = (0, _getZoneJsOriginalValue.getZoneJsOriginalValue)(eventTarget, 'addEventListener');
  (0, _tools.each)(eventNames, function (eventName) {
    add.call(eventTarget, eventName, wrappedListener, options);
  });
  var stop = function stop() {
    var remove = (0, _getZoneJsOriginalValue.getZoneJsOriginalValue)(eventTarget, 'removeEventListener');
    (0, _tools.each)(eventNames, function (eventName) {
      remove.call(eventTarget, eventName, wrappedListener, options);
    });
  };
  return {
    stop: stop
  };
}
//# sourceMappingURL=addEventListener.js.map