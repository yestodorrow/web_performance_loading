"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultPrivacyLevel = void 0;
exports.buildCookieOptions = buildCookieOptions;
exports.validateAndBuildConfiguration = validateAndBuildConfiguration;
exports.validatePostRequestRequireParamsConfiguration = validatePostRequestRequireParamsConfiguration;
var _cookie = require("../browser/cookie");
var _catchUserErrors = require("../helper/catchUserErrors");
var _display = require("../helper/display");
var _tools = require("../helper/tools");
var _byteUtils = require("../helper/byteUtils");
var _transportConfiguration = require("./transportConfiguration");
var DefaultPrivacyLevel = {
  ALLOW: 'allow',
  MASK: 'mask',
  MASK_USER_INPUT: 'mask-user-input'
};
exports.DefaultPrivacyLevel = DefaultPrivacyLevel;
function validateAndBuildConfiguration(initConfiguration) {
  if (initConfiguration.sampleRate !== undefined && !(0, _tools.isPercentage)(initConfiguration.sampleRate)) {
    _display.display.error('Sample Rate should be a number between 0 and 100');
    return;
  }
  if (initConfiguration.sessionSampleRate !== undefined && !(0, _tools.isPercentage)(initConfiguration.sessionSampleRate)) {
    _display.display.error('Sample Rate should be a number between 0 and 100');
    return;
  }
  if (initConfiguration.telemetrySampleRate !== undefined && !(0, _tools.isPercentage)(initConfiguration.telemetrySampleRate)) {
    _display.display.error('Telemetry Sample Rate should be a number between 0 and 100');
    return;
  }
  var sessionSampleRate = initConfiguration.sessionSampleRate || initConfiguration.sampleRate;
  return (0, _tools.assign)({
    beforeSend: initConfiguration.beforeSend && (0, _catchUserErrors.catchUserErrors)(initConfiguration.beforeSend, 'beforeSend threw an error:'),
    cookieOptions: buildCookieOptions(initConfiguration),
    sessionSampleRate: (0, _tools.isNullUndefinedDefaultValue)(sessionSampleRate, 100),
    service: initConfiguration.service,
    version: initConfiguration.version,
    env: initConfiguration.env,
    telemetrySampleRate: (0, _tools.isNullUndefinedDefaultValue)(initConfiguration.telemetrySampleRate, 100),
    telemetryEnabled: (0, _tools.isNullUndefinedDefaultValue)(initConfiguration.telemetryEnabled, false),
    silentMultipleInit: !!initConfiguration.silentMultipleInit,
    /**
     * beacon payload max queue size implementation is 64kb
     * ensure that we leave room for logs, rum and potential other users
     */
    batchBytesLimit: 16 * _byteUtils.ONE_KIBI_BYTE,
    eventRateLimiterThreshold: 3000,
    maxTelemetryEventsPerPage: 15,
    /**
     * flush automatically, aim to be lower than ALB connection timeout
     * to maximize connection reuse.
     */
    flushTimeout: 30 * _tools.ONE_SECOND,
    /**
     * Logs intake limit
     */
    batchMessagesLimit: 50,
    messageBytesLimit: 256 * _byteUtils.ONE_KIBI_BYTE,
    resourceUrlLimit: 5 * _byteUtils.ONE_KIBI_BYTE,
    storeContextsToLocal: !!initConfiguration.storeContextsToLocal,
    sendContentTypeByJson: !!initConfiguration.sendContentTypeByJson
  }, (0, _transportConfiguration.computeTransportConfiguration)(initConfiguration));
}
function validatePostRequestRequireParamsConfiguration(initConfiguration) {
  if (!initConfiguration.site && !initConfiguration.datakitOrigin && !initConfiguration.datakitUrl) {
    _display.display.error('datakitOrigin or site is not configured, no RUM data will be collected.');
    return false;
  }
  //   if (!initConfiguration.datakitUrl && !initConfiguration.datakitOrigin) {
  //     display.error(
  //       'datakitOrigin is not configured, no RUM data will be collected.'
  //     )
  //     return false
  //   }
  if (initConfiguration.site && !initConfiguration.clientToken) {
    _display.display.error('clientToken is not configured, no RUM data will be collected.');
    return false;
  }
  return true;
}
function buildCookieOptions(initConfiguration) {
  var cookieOptions = {};

  //   cookieOptions.secure = mustUseSecureCookie(initConfiguration)
  //   cookieOptions.crossSite = !!initConfiguration.useCrossSiteSessionCookie
  cookieOptions.secure = !!initConfiguration.useSecureSessionCookie || !!initConfiguration.usePartitionedCrossSiteSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;
  cookieOptions.crossSite = !!initConfiguration.usePartitionedCrossSiteSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;
  cookieOptions.partitioned = !!initConfiguration.usePartitionedCrossSiteSessionCookie;
  if (initConfiguration.trackSessionAcrossSubdomains) {
    cookieOptions.domain = (0, _cookie.getCurrentSite)();
  }
  return cookieOptions;
}

// function mustUseSecureCookie(initConfiguration) {
//   return (
//     !!initConfiguration.useSecureSessionCookie ||
//     !!initConfiguration.useCrossSiteSessionCookie
//   )
// }
//# sourceMappingURL=configuration.js.map