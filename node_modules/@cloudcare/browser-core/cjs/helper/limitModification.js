"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.limitModification = limitModification;
var _tools = require("./tools");
var _sanitize = require("./sanitize");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Current limitation:
 * - field path do not support array, 'a.b.c' only
 */
function limitModification(object, modifiableFieldPaths, modifier) {
  var clone = (0, _tools.deepClone)(object);
  var result = modifier(clone);
  (0, _tools.each)((0, _tools.objectEntries)(modifiableFieldPaths), function (filedPaths) {
    var fieldPath = filedPaths[0];
    var fieldType = filedPaths[1];
    var newValue = get(clone, fieldPath);
    var newType = (0, _tools.getType)(newValue);
    if (newType === fieldType) {
      set(object, fieldPath, (0, _sanitize.sanitize)(newValue));
    } else if (fieldType === 'object' && (newType === 'undefined' || newType === 'null')) {
      set(object, fieldPath, {});
    }
  });
  return result;
}
function get(object, path) {
  var current = object;
  var _iterator = _createForOfIteratorHelper(path.split('.')),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      if (!isValidObjectContaining(current, field)) {
        return;
      }
      current = current[field];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return current;
}
function set(object, path, value) {
  var current = object;
  var fields = path.split('.');
  for (var i = 0; i < fields.length; i += 1) {
    var field = fields[i];
    if (!isValidObject(current)) {
      return;
    }
    if (i !== fields.length - 1) {
      current = current[field];
    } else {
      current[field] = value;
    }
  }
}
function isValidObject(object) {
  return (0, _tools.getType)(object) === 'object';
}
function isValidObjectContaining(object, field) {
  return isValidObject(object) && Object.prototype.hasOwnProperty.call(object, field);
}
//# sourceMappingURL=limitModification.js.map