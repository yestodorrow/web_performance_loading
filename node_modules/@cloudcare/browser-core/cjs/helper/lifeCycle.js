"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LifeCycle = LifeCycle;
exports.LifeCycleEventType = void 0;
var _tools = require("./tools");
var LifeCycleEventType = {
  PERFORMANCE_ENTRIES_COLLECTED: 'PERFORMANCE_ENTRIES_COLLECTED',
  AUTO_ACTION_COMPLETED: 'AUTO_ACTION_COMPLETED',
  BEFORE_VIEW_CREATED: 'BEFORE_VIEW_CREATED',
  VIEW_CREATED: 'VIEW_CREATED',
  VIEW_UPDATED: 'VIEW_UPDATED',
  VIEW_ENDED: 'VIEW_ENDED',
  AFTER_VIEW_ENDED: 'AFTER_VIEW_ENDED',
  SESSION_RENEWED: 'SESSION_RENEWED',
  SESSION_EXPIRED: 'SESSION_EXPIRED',
  PAGE_EXITED: 'PAGE_EXITED',
  REQUEST_STARTED: 'REQUEST_STARTED',
  REQUEST_COMPLETED: 'REQUEST_COMPLETED',
  RAW_RUM_EVENT_COLLECTED: 'RAW_RUM_EVENT_COLLECTED',
  RUM_EVENT_COLLECTED: 'RUM_EVENT_COLLECTED',
  RAW_ERROR_COLLECTED: 'RAW_ERROR_COLLECTED',
  RAW_LOG_COLLECTED: 'RAW_LOG_COLLECTED',
  LOG_COLLECTED: 'LOG_COLLECTED'
};
exports.LifeCycleEventType = LifeCycleEventType;
function LifeCycle() {
  this.callbacks = {};
}
LifeCycle.prototype = {
  notify: function notify(eventType, data) {
    var eventCallbacks = this.callbacks[eventType];
    if (eventCallbacks) {
      (0, _tools.each)(eventCallbacks, function (callback) {
        callback(data);
      });
    }
  },
  subscribe: function subscribe(eventType, callback) {
    if (!this.callbacks[eventType]) {
      this.callbacks[eventType] = [];
    }
    this.callbacks[eventType].push(callback);
    var _this = this;
    return {
      unsubscribe: function unsubscribe() {
        _this.callbacks[eventType] = (0, _tools.filter)(_this.callbacks[eventType], function (other) {
          return other !== callback;
        });
      }
    };
  }
};
//# sourceMappingURL=lifeCycle.js.map