{"version":3,"file":"readBytesFromStream.js","names":["_tools","require","_monitor","readBytesFromStream","stream","callback","options","reader","getReader","chunks","readBytesCount","readMore","read","then","monitor","result","done","onDone","collectStreamBody","push","value","length","bytesLimit","error","cancel","noop","bytes","limitExceeded","completeBuffer","Uint8Array","offset","each","chunk","set","slice","undefined"],"sources":["../../src/helper/readBytesFromStream.js"],"sourcesContent":["import { noop, each } from './tools'\nimport { monitor } from './monitor'\n/**\n * Read bytes from a ReadableStream until at least `limit` bytes have been read (or until the end of\n * the stream). The callback is invoked with the at most `limit` bytes, and indicates that the limit\n * has been exceeded if more bytes were available.\n */\nexport function readBytesFromStream(stream, callback, options) {\n  var reader = stream.getReader()\n  var chunks = []\n  var readBytesCount = 0\n\n  readMore()\n\n  function readMore() {\n    reader.read().then(\n      monitor(function (result) {\n        if (result.done) {\n          onDone()\n          return\n        }\n\n        if (options.collectStreamBody) {\n          chunks.push(result.value)\n        }\n        readBytesCount += result.value.length\n\n        if (readBytesCount > options.bytesLimit) {\n          onDone()\n        } else {\n          readMore()\n        }\n      }),\n      monitor(function (error) {\n        callback(error)\n      })\n    )\n  }\n\n  function onDone() {\n    reader.cancel().catch(\n      // we don't care if cancel fails, but we still need to catch the error to avoid reporting it\n      // as an unhandled rejection\n      noop\n    )\n\n    var bytes\n    var limitExceeded\n    if (options.collectStreamBody) {\n      var completeBuffer\n      if (chunks.length === 1) {\n        // optimization: if the response is small enough to fit in a single buffer (provided by the browser), just\n        // use it directly.\n        completeBuffer = chunks[0]\n      } else {\n        // else, we need to copy buffers into a larger buffer to concatenate them.\n        completeBuffer = new Uint8Array(readBytesCount)\n        var offset = 0\n        each(chunks, function (chunk) {\n          completeBuffer.set(chunk, offset)\n          offset += chunk.length\n        })\n      }\n      bytes = completeBuffer.slice(0, options.bytesLimit)\n      limitExceeded = completeBuffer.length > options.bytesLimit\n    }\n    callback(undefined, bytes, limitExceeded)\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,mBAAmBA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAC7D,IAAIC,MAAM,GAAGH,MAAM,CAACI,SAAS,CAAC,CAAC;EAC/B,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,cAAc,GAAG,CAAC;EAEtBC,QAAQ,CAAC,CAAC;EAEV,SAASA,QAAQA,CAAA,EAAG;IAClBJ,MAAM,CAACK,IAAI,CAAC,CAAC,CAACC,IAAI,CAChB,IAAAC,gBAAO,EAAC,UAAUC,MAAM,EAAE;MACxB,IAAIA,MAAM,CAACC,IAAI,EAAE;QACfC,MAAM,CAAC,CAAC;QACR;MACF;MAEA,IAAIX,OAAO,CAACY,iBAAiB,EAAE;QAC7BT,MAAM,CAACU,IAAI,CAACJ,MAAM,CAACK,KAAK,CAAC;MAC3B;MACAV,cAAc,IAAIK,MAAM,CAACK,KAAK,CAACC,MAAM;MAErC,IAAIX,cAAc,GAAGJ,OAAO,CAACgB,UAAU,EAAE;QACvCL,MAAM,CAAC,CAAC;MACV,CAAC,MAAM;QACLN,QAAQ,CAAC,CAAC;MACZ;IACF,CAAC,CAAC,EACF,IAAAG,gBAAO,EAAC,UAAUS,KAAK,EAAE;MACvBlB,QAAQ,CAACkB,KAAK,CAAC;IACjB,CAAC,CACH,CAAC;EACH;EAEA,SAASN,MAAMA,CAAA,EAAG;IAChBV,MAAM,CAACiB,MAAM,CAAC,CAAC,SAAM;IACnB;IACA;IACAC,WACF,CAAC;IAED,IAAIC,KAAK;IACT,IAAIC,aAAa;IACjB,IAAIrB,OAAO,CAACY,iBAAiB,EAAE;MAC7B,IAAIU,cAAc;MAClB,IAAInB,MAAM,CAACY,MAAM,KAAK,CAAC,EAAE;QACvB;QACA;QACAO,cAAc,GAAGnB,MAAM,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACL;QACAmB,cAAc,GAAG,IAAIC,UAAU,CAACnB,cAAc,CAAC;QAC/C,IAAIoB,MAAM,GAAG,CAAC;QACd,IAAAC,WAAI,EAACtB,MAAM,EAAE,UAAUuB,KAAK,EAAE;UAC5BJ,cAAc,CAACK,GAAG,CAACD,KAAK,EAAEF,MAAM,CAAC;UACjCA,MAAM,IAAIE,KAAK,CAACX,MAAM;QACxB,CAAC,CAAC;MACJ;MACAK,KAAK,GAAGE,cAAc,CAACM,KAAK,CAAC,CAAC,EAAE5B,OAAO,CAACgB,UAAU,CAAC;MACnDK,aAAa,GAAGC,cAAc,CAACP,MAAM,GAAGf,OAAO,CAACgB,UAAU;IAC5D;IACAjB,QAAQ,CAAC8B,SAAS,EAAET,KAAK,EAAEC,aAAa,CAAC;EAC3C;AACF","ignoreList":[]}