"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.instrumentMethod = instrumentMethod;
exports.instrumentMethodAndCallOriginal = instrumentMethodAndCallOriginal;
exports.instrumentSetter = instrumentSetter;
var _tools = require("./tools");
var _timer = require("./timer");
var _monitor = require("./monitor");
function instrumentMethod(object, method, instrumentationFactory) {
  var original = object[method];
  var instrumentation = instrumentationFactory(original);
  var instrumentationWrapper = function instrumentationWrapper() {
    if (typeof instrumentation !== 'function') {
      return undefined;
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return instrumentation.apply(this, arguments);
  };
  object[method] = instrumentationWrapper;
  return {
    stop: function stop() {
      if (object[method] === instrumentationWrapper) {
        object[method] = original;
      } else {
        instrumentation = original;
      }
    }
  };
}
function instrumentMethodAndCallOriginal(object, method, aliasOption) {
  return instrumentMethod(object, method, function (original) {
    return function () {
      var result;
      if (aliasOption && aliasOption.before) {
        (0, _monitor.callMonitored)(aliasOption.before, this, arguments);
        // aliasOption.before.apply(this, arguments)
      }

      if (typeof original === 'function') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        result = original.apply(this, arguments);
      }
      if (aliasOption && aliasOption.after) {
        (0, _monitor.callMonitored)(aliasOption.after, this, arguments);
        // aliasOption.after.apply(this, arguments)
      }

      return result;
    };
  });
}
function instrumentSetter(object, property, after) {
  var originalDescriptor = Object.getOwnPropertyDescriptor(object, property);
  if (!originalDescriptor || !originalDescriptor.set || !originalDescriptor.configurable) {
    return {
      stop: _tools.noop
    };
  }
  var stoppedInstrumentation = _tools.noop;
  var _instrumentation = function instrumentation(thisObject, value) {
    // put hooked setter into event loop to avoid of set latency
    (0, _timer.setTimeout)(function () {
      if (_instrumentation !== stoppedInstrumentation) {
        after(thisObject, value);
      }
    }, 0);
  };
  var instrumentationWrapper = function instrumentationWrapper(value) {
    originalDescriptor.set.call(this, value);
    _instrumentation(this, value);
  };
  Object.defineProperty(object, property, {
    set: instrumentationWrapper
  });
  return {
    stop: function stop() {
      if (Object.getOwnPropertyDescriptor(object, property) && Object.getOwnPropertyDescriptor(object, property).set === instrumentationWrapper) {
        Object.defineProperty(object, property, originalDescriptor);
      } else {
        _instrumentation = stoppedInstrumentation;
      }
    }
  };
}
//# sourceMappingURL=instrumentMethod.js.map