"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userAgent = exports.isIos = exports.isAndroid = exports.JsBirdge = void 0;
var userAgent = navigator.userAgent.toLowerCase();
exports.userAgent = userAgent;
var isAndroid = function isAndroid() {
  return /android/.test(userAgent);
};
exports.isAndroid = isAndroid;
var isIos = function isIos() {
  return /iphone os/.test(userAgent);
};
exports.isIos = isIos;
var JsBirdge = function JsBirdge() {
  this.bridge = window['FTWebViewJavascriptBridge'];
  this.tagMaps = {};
  window.mapWebViewCallBack = {};
  try {
    this.initBridge();
  } catch (err) {}
};
exports.JsBirdge = JsBirdge;
JsBirdge.prototype = {
  initBridge: function initBridge() {
    var _this = this;
    if (isIos()) {
      if (!_this.bridge) {
        if (window.WVJBCallbacks) {
          window.WVJBCallbacks.push(function (bridge) {
            _this.bridge = bridge;
          });
          return;
        } else {
          window.WVJBCallbacks = [function (bridge) {
            _this.bridge = bridge;
            return;
          }];
          var WVJBIframe = document.createElement('iframe');
          WVJBIframe.style.display = 'none';
          WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';
          document.documentElement.appendChild(WVJBIframe);
          setTimeout(function () {
            document.documentElement.removeChild(WVJBIframe);
          }, 0);
        }
      }
    }
  },
  sendEvent: function sendEvent(params, callback) {
    if (typeof params === 'undefined') {
      params = {};
    }
    var _this = this;
    var tag = 'Unique id:' + new Date().getTime();
    if (params.name) {
      _this.tagMaps[params.name] = tag;
      window.mapWebViewCallBack[tag] = function (ret, err) {
        return Promise.resolve(ret, err);
      };
      params['_tag'] = tag;
      try {
        if (isIos()) {
          _this.bridge.callHandler('sendEvent', JSON.stringify(params), 'mapWebViewCallBack');
        } else {
          _this.bridge.sendEvent(JSON.stringify(params), 'mapWebViewCallBack');
        }
      } catch (err) {}
    } else {
      callback({
        error: '请传入发送事件的名称！！'
      });
    }
  },
  addEventListener: function addEventListener(params, callback) {
    var tag = 'Unique id:' + new Date().getTime();
    var _this = this;
    if (params.name) {
      _this.tagMaps[params.name] = tag;
      window.mapWebViewCallBack[tag] = function (ret, err) {
        callback(ret, err);
        return;
      };
      params['_tag'] = tag;
      try {
        if (isIos()) {
          _this.bridge.callHandler('addEventListener', JSON.stringify(params), 'mapWebViewCallBack');
        } else {
          _this.bridge.addEventListener(JSON.stringify(params), 'mapWebViewCallBack');
        }
      } catch (err) {}
    } else {
      callback({
        error: '请传入监听事件的名称！！'
      });
    }
  }
};
var JsBirdge = JsBirdge;
exports.JsBirdge = JsBirdge;
//# sourceMappingURL=mobileUtil.js.map