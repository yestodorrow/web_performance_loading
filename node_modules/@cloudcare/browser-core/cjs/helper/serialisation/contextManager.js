"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BYTES_COMPUTATION_THROTTLING_DELAY = void 0;
exports.createContextManager = createContextManager;
var _byteUtils = require("../byteUtils");
var _tools = require("../tools");
var _sanitize = require("../sanitize");
var _jsonStringify = require("./jsonStringify");
var _observable = require("../observable");
var _heavyCustomerDataWarning = require("./heavyCustomerDataWarning");
var BYTES_COMPUTATION_THROTTLING_DELAY = 200;
exports.BYTES_COMPUTATION_THROTTLING_DELAY = BYTES_COMPUTATION_THROTTLING_DELAY;
function createContextManager(customerDataType, computeBytesCountImpl) {
  if (typeof computeBytesCountImpl === 'undefined') {
    computeBytesCountImpl = _byteUtils.computeBytesCount;
  }
  var context = {};
  var bytesCountCache;
  var alreadyWarned = false;
  var changeObservable = new _observable.Observable();
  // Throttle the bytes computation to minimize the impact on performance.
  // Especially useful if the user call context APIs synchronously multiple times in a row
  var computeBytesCountThrottled = (0, _tools.throttle)(function (context) {
    bytesCountCache = computeBytesCountImpl((0, _jsonStringify.jsonStringify)(context));
    if (!alreadyWarned) {
      alreadyWarned = (0, _heavyCustomerDataWarning.warnIfCustomerDataLimitReached)(bytesCountCache, customerDataType);
    }
  }, BYTES_COMPUTATION_THROTTLING_DELAY).throttled;
  var contextManager = {
    getBytesCount: function getBytesCount() {
      return bytesCountCache;
    },
    /** @deprecated use getContext instead */
    get: function get() {
      return context;
    },
    /** @deprecated use setContextProperty instead */
    add: function add(key, value) {
      context[key] = value;
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    /** @deprecated renamed to removeContextProperty */
    remove: function remove(key) {
      delete context[key];
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    /** @deprecated use setContext instead */
    set: function set(newContext) {
      context = newContext;
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    getContext: function getContext() {
      return (0, _tools.deepClone)(context);
    },
    setContext: function setContext(newContext) {
      if ((0, _tools.getType)(newContext) === 'object') {
        context = (0, _sanitize.sanitize)(newContext);
        computeBytesCountThrottled(context);
      } else {
        contextManager.clearContext();
      }
      changeObservable.notify();
    },
    setContextProperty: function setContextProperty(key, property) {
      context[key] = (0, _tools.deepClone)(property);
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    removeContextProperty: function removeContextProperty(key) {
      delete context[key];
      computeBytesCountThrottled(context);
      changeObservable.notify();
    },
    clearContext: function clearContext() {
      context = {};
      bytesCountCache = 0;
      changeObservable.notify();
    },
    changeObservable: changeObservable
  };
  return contextManager;
}
//# sourceMappingURL=contextManager.js.map