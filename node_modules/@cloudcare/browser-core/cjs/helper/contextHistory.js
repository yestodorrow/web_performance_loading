"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLEAR_OLD_CONTEXTS_INTERVAL = void 0;
exports.ContextHistory = ContextHistory;
var _tools = require("./tools");
var _timer = require("./timer");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var END_OF_TIMES = Infinity;
var CLEAR_OLD_CONTEXTS_INTERVAL = _tools.ONE_MINUTE;
exports.CLEAR_OLD_CONTEXTS_INTERVAL = CLEAR_OLD_CONTEXTS_INTERVAL;
function ContextHistory(expireDelay, maxEntries) {
  this.expireDelay = expireDelay;
  this.entries = [];
  this.maxEntries = maxEntries;
  var _this = this;
  this.clearOldContextsInterval = (0, _timer.setInterval)(function () {
    _this.clearOldContexts();
  }, CLEAR_OLD_CONTEXTS_INTERVAL);
}
ContextHistory.prototype.add = function (context, startTime) {
  var _this = this;
  var entry = {
    context: context,
    startTime: startTime,
    endTime: END_OF_TIMES,
    remove: function remove() {
      var index = _this.entries.indexOf(entry);
      if (index >= 0) {
        _this.entries.splice(index, 1);
      }
    },
    close: function close(endTime) {
      entry.endTime = endTime;
    }
  };
  if (this.maxEntries && this.entries.length >= this.maxEntries) {
    this.entries.pop();
  }
  this.entries.unshift(entry);
  return entry;
};
ContextHistory.prototype.find = function (startTime) {
  if (typeof startTime === 'undefined') {
    startTime = END_OF_TIMES;
  }
  var _iterator = _createForOfIteratorHelper(this.entries),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var entry = _step.value;
      if (entry.startTime <= startTime) {
        if (startTime <= entry.endTime) {
          return entry.context;
        }
        break;
      }
    }
    //
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
/**
 * Helper function to close the currently active context, if any. This method assumes that entries
 * are not overlapping.
 */
ContextHistory.prototype.closeActive = function (endTime) {
  var latestEntry = this.entries[0];
  if (latestEntry && latestEntry.endTime === END_OF_TIMES) {
    latestEntry.close(endTime);
  }
};
/**
 * Return all contexts that were active during `startTime`, or all currently active contexts if no
 * `startTime` is provided.
 */
ContextHistory.prototype.findAll = function (startTime, duration) {
  if (typeof duration === 'undefined') {
    duration = 0;
  }
  if (typeof startTime === 'undefined') {
    startTime = END_OF_TIMES;
  }
  var endTime = (0, _tools.addDuration)(startTime, duration);
  var result = (0, _tools.filter)(this.entries, function (entry) {
    return entry.startTime <= endTime && startTime <= entry.endTime;
  });
  return (0, _tools.map)(result, function (entry) {
    return entry.context;
  });
};
/**
 * Remove all entries from this collection.
 */
ContextHistory.prototype.reset = function () {
  this.entries = [];
};
/**
 * Stop internal garbage collection of past entries.
 */
ContextHistory.prototype.stop = function () {
  (0, _timer.clearInterval)(this.clearOldContextsInterval);
};
ContextHistory.prototype.clearOldContexts = function () {
  var oldTimeThreshold = (0, _tools.relativeNow)() - this.expireDelay;
  while (this.entries.length > 0 && this.entries[this.entries.length - 1].endTime < oldTimeThreshold) {
    this.entries.pop();
  }
};
//# sourceMappingURL=contextHistory.js.map