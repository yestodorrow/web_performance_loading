"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelemetryService = void 0;
exports.addTelemetryConfiguration = addTelemetryConfiguration;
exports.addTelemetryDebug = addTelemetryDebug;
exports.addTelemetryError = addTelemetryError;
exports.formatError = formatError;
exports.resetTelemetry = resetTelemetry;
exports.scrubCustomerFrames = scrubCustomerFrames;
exports.startTelemetry = startTelemetry;
var _display = require("../helper/display");
var _errorTools = require("../helper/errorTools");
var _tracekit = require("../tracekit");
var _observable = require("../helper/observable");
var _monitor = require("..//helper/monitor");
var _tools = require("../helper/tools");
var _jsonStringify = require("../helper/serialisation/jsonStringify");
var _enums = require("../helper/enums");
var _types = require("./types");
var ALLOWED_FRAME_URLS = ['https://static.guance.com', 'http://localhost', '<anonymous>'];
var TelemetryService = {
  LOGS: 'browser-logs-sdk',
  RUM: 'browser-rum-sdk'
};
exports.TelemetryService = TelemetryService;
var telemetryConfiguration = {
  maxEventsPerPage: 0,
  sentEventCount: 0,
  telemetryEnabled: false
};
var onRawTelemetryEventCollected;
function startTelemetry(telemetryService, configuration) {
  var contextProvider;
  var observable = new _observable.Observable();
  telemetryConfiguration.telemetryEnabled = configuration.telemetryEnabled && (0, _tools.performDraw)(configuration.telemetrySampleRate);
  onRawTelemetryEventCollected = function onRawTelemetryEventCollected(rawEvent) {
    if (telemetryConfiguration.telemetryEnabled) {
      var event = toTelemetryEvent(telemetryService, rawEvent);
      observable.notify(event);
    }
  };
  (0, _monitor.startMonitorErrorCollection)(addTelemetryError);
  (0, _tools.assign)(telemetryConfiguration, {
    maxEventsPerPage: configuration.maxTelemetryEventsPerPage,
    sentEventCount: 0
  });
  function toTelemetryEvent(telemetryService, event) {
    return (0, _tools.extend2Lev)({
      type: 'telemetry',
      date: (0, _tools.timeStampNow)(),
      service: telemetryService,
      version: __BUILD_ENV__SDK_VERSION__,
      source: 'browser',
      telemetry: event // https://github.com/microsoft/TypeScript/issues/48457
    }, contextProvider !== undefined ? contextProvider() : {});
  }
  return {
    setContextProvider: function setContextProvider(provider) {
      contextProvider = provider;
    },
    observable: observable,
    enabled: telemetryConfiguration.telemetryEnabled
  };
}
function resetTelemetry() {
  onRawTelemetryEventCollected = undefined;
}
function addTelemetryDebug(message, context) {
  (0, _monitor.displayIfDebugEnabled)(_display.ConsoleApiName.debug, message, context);
  addTelemetry((0, _tools.assign)({
    type: _types.TelemetryType.log,
    message: message,
    status: _types.TelemetryStatusType.debug
  }, context));
}
function addTelemetryError(e, context) {
  addTelemetry((0, _tools.assign)({
    type: _types.TelemetryType.log,
    status: _types.TelemetryStatusType.error
  }, formatError(e), context));
}
function addTelemetryConfiguration(configuration) {
  if (telemetryConfiguration.telemetryEnabled) {
    addTelemetry({
      type: _types.TelemetryType.configuration,
      configuration: configuration
    });
  }
}
function addTelemetry(event) {
  if (onRawTelemetryEventCollected && telemetryConfiguration.sentEventCount < telemetryConfiguration.maxEventsPerPage) {
    telemetryConfiguration.sentEventCount += 1;
    onRawTelemetryEventCollected(event);
  }
}
function formatError(e) {
  if (e instanceof Error) {
    var stackTrace = (0, _tracekit.computeStackTrace)(e);
    return {
      error: {
        kind: stackTrace.name,
        stack: (0, _errorTools.toStackTraceString)(scrubCustomerFrames(stackTrace))
      },
      message: stackTrace.message
    };
  }
  return {
    error: {
      stack: _errorTools.NO_ERROR_STACK_PRESENT_MESSAGE
    },
    message: _enums.NonErrorPrefix.UNCAUGHT + ' ' + (0, _jsonStringify.jsonStringify)(e)
  };
}
function scrubCustomerFrames(stackTrace) {
  stackTrace.stack = stackTrace.stack.filter(function (frame) {
    return !frame.url || ALLOWED_FRAME_URLS.some(function (allowedFrameUrl) {
      return (0, _tools.startsWith)(frame.url, allowedFrameUrl);
    });
  });
  return stackTrace;
}
//# sourceMappingURL=telemetry.js.map