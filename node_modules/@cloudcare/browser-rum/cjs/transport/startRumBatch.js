"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startRumBatch = startRumBatch;
var _browserCore = require("@cloudcare/browser-core");
function startRumBatch(configuration, lifeCycle, telemetryEventObservable, reportError, pageExitObservable, sessionExpireObservable) {
  var batch = makeRumBatch(configuration, reportError, pageExitObservable, sessionExpireObservable);
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.RUM_EVENT_COLLECTED, function (serverRumEvent) {
    if (serverRumEvent.type === _browserCore.RumEventType.VIEW) {
      batch.upsert(serverRumEvent, serverRumEvent.view.id);
    } else {
      batch.add(serverRumEvent);
    }
  });
  telemetryEventObservable.subscribe(function (event) {
    batch.add(event);
  });
}
function makeRumBatch(configuration, reportError, pageExitObservable, sessionExpireObservable) {
  var rumBatch = createRumBatch(configuration.rumEndpoint);
  var primaryBatch = rumBatch.batch;
  var primaryFlushController = rumBatch.flushController;
  function createRumBatch(endpointUrl) {
    var flushController = (0, _browserCore.createFlushController)({
      messagesLimit: configuration.batchMessagesLimit,
      bytesLimit: configuration.batchBytesLimit,
      durationLimit: configuration.flushTimeout,
      pageExitObservable: pageExitObservable,
      sessionExpireObservable: sessionExpireObservable
    });
    var batch = new _browserCore.Batch((0, _browserCore.createHttpRequest)(endpointUrl, configuration.batchBytesLimit, configuration.sendContentTypeByJson, reportError), flushController, configuration.messageBytesLimit, configuration.sendContentTypeByJson);
    return {
      batch: batch,
      flushController: flushController
    };
  }
  return {
    flushObservable: primaryFlushController.flushObservable,
    add: function add(message) {
      primaryBatch.add(message);
    },
    upsert: function upsert(message, key) {
      primaryBatch.upsert(message, key);
    }
  };
}
//# sourceMappingURL=startRumBatch.js.map