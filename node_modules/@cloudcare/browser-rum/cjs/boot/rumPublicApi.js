"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeRumPublicApi = makeRumPublicApi;
var _browserCore = require("@cloudcare/browser-core");
var _configuration = require("../domain/configuration");
var _commonContext = require("../domain/contexts/commonContext");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var RUM_STORAGE_KEY = 'rum';
function makeRumPublicApi(startRumImpl, recorderApi) {
  var isAlreadyInitialized = false;
  var globalContextManager = (0, _browserCore.createContextManager)(_browserCore.CustomerDataType.GlobalContext);
  var userContextManager = (0, _browserCore.createContextManager)(_browserCore.CustomerDataType.User);
  var getInternalContextStrategy = function getInternalContextStrategy() {
    return undefined;
  };
  var getInitConfigurationStrategy = function getInitConfigurationStrategy() {
    return undefined;
  };
  var stopSessionStrategy = function stopSessionStrategy() {
    return (0, _browserCore.noop)();
  };
  var bufferApiCalls = new _browserCore.BoundedBuffer();
  var _addTimingStrategy = function addTimingStrategy(name, time) {
    if (typeof time === 'undefined') {
      time = (0, _browserCore.timeStampNow)();
    }
    bufferApiCalls.add(function () {
      return _addTimingStrategy(name, time);
    });
  };
  var _startViewStrategy = function startViewStrategy(options, startClocks) {
    if (typeof startClocks === 'undefined') {
      startClocks = (0, _browserCore.clocksNow)();
    }
    bufferApiCalls.add(function () {
      return _startViewStrategy(options, startClocks);
    });
  };
  var _addActionStrategy = function addActionStrategy(action, commonContext) {
    if (typeof commonContext == 'undefined') {
      commonContext = (0, _commonContext.buildCommonContext)(globalContextManager, userContextManager, recorderApi);
    }
    bufferApiCalls.add(function () {
      return _addActionStrategy(action, commonContext);
    });
  };
  var _addErrorStrategy = function addErrorStrategy(providedError, commonContext) {
    if (typeof commonContext == 'undefined') {
      commonContext = (0, _commonContext.buildCommonContext)(globalContextManager, userContextManager, recorderApi);
    }
    bufferApiCalls.add(function () {
      return _addErrorStrategy(providedError, commonContext);
    });
  };
  function initRum(initConfiguration) {
    getInitConfigurationStrategy = function getInitConfigurationStrategy() {
      return (0, _browserCore.deepClone)(initConfiguration);
    };
    var eventBridgeAvailable = (0, _browserCore.canUseEventBridge)();
    if (eventBridgeAvailable) {
      initConfiguration = overrideInitConfigurationForBridge(initConfiguration);
    }
    if (!canHandleSession(initConfiguration)) {
      return;
    }
    if (!canInitRum(initConfiguration)) {
      return;
    }
    var configuration = (0, _configuration.validateAndBuildRumConfiguration)(initConfiguration);
    if (!configuration) {
      return;
    }
    if (!configuration.trackViewsManually) {
      doStartRum(configuration);
    } else {
      // drain beforeInitCalls by buffering them until we start RUM
      // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls
      // in order to ensure that calls are processed in order
      var beforeInitCalls = bufferApiCalls;
      bufferApiCalls = new _browserCore.BoundedBuffer();
      _startViewStrategy = function _startViewStrategy(options) {
        doStartRum(configuration, options);
      };
      beforeInitCalls.drain();
    }
    isAlreadyInitialized = true;
  }
  function doStartRum(configuration, initialViewOptions) {
    if (configuration.storeContextsToLocal) {
      // localstorage
      var beforeInitGlobalContext = globalContextManager.getContext();
      globalContextManager = (0, _browserCore.createStoredContextManager)(RUM_STORAGE_KEY, _browserCore.CustomerDataType.GlobalContext);
      globalContextManager.setContext((0, _browserCore.extend2Lev)(globalContextManager.getContext(), beforeInitGlobalContext));
      var beforeInitUserContext = userContextManager.getContext();
      userContextManager = (0, _browserCore.createStoredContextManager)(RUM_STORAGE_KEY, _browserCore.CustomerDataType.User);
      userContextManager.setContext((0, _browserCore.extend2Lev)(userContextManager.getContext(), beforeInitUserContext));
    }
    var startRumResults = startRumImpl(configuration, recorderApi, globalContextManager, userContextManager, initialViewOptions);
    _startViewStrategy = startRumResults.startView;
    _addActionStrategy = startRumResults.addAction;
    _addErrorStrategy = startRumResults.addError;
    _addTimingStrategy = startRumResults.addTiming;
    getInternalContextStrategy = startRumResults.getInternalContext;
    stopSessionStrategy = startRumResults.stopSession;
    bufferApiCalls.drain();
    recorderApi.onRumStart(startRumResults.lifeCycle, configuration, startRumResults.session, startRumResults.viewContexts);
  }
  var startView = (0, _browserCore.monitor)(function (options) {
    var sanitizedOptions = _typeof(options) === 'object' ? options : {
      name: options
    };
    _startViewStrategy(sanitizedOptions);
  });
  var rumPublicApi = (0, _browserCore.makePublicApi)({
    init: (0, _browserCore.monitor)(initRum),
    /** @deprecated: use setGlobalContextProperty instead */
    addRumGlobalContext: (0, _browserCore.monitor)(function (key, value) {
      return globalContextManager.add(key, value);
    }),
    setGlobalContextProperty: (0, _browserCore.monitor)(function (key, value) {
      return globalContextManager.setContextProperty(key, value);
    }),
    /** @deprecated: use removeGlobalContextProperty instead */
    removeRumGlobalContext: (0, _browserCore.monitor)(function (key) {
      return globalContextManager.remove(key);
    }),
    removeGlobalContextProperty: (0, _browserCore.monitor)(function (key) {
      return globalContextManager.removeContextProperty(key);
    }),
    /** @deprecated: use getGlobalContext instead */
    getRumGlobalContext: (0, _browserCore.monitor)(function () {
      return globalContextManager.get();
    }),
    getGlobalContext: (0, _browserCore.monitor)(function () {
      return globalContextManager.getContext();
    }),
    /** @deprecated: use setGlobalContext instead */
    setRumGlobalContext: (0, _browserCore.monitor)(function (context) {
      return globalContextManager.set(context);
    }),
    setGlobalContext: (0, _browserCore.monitor)(function (context) {
      return globalContextManager.setContext(context);
    }),
    clearGlobalContext: (0, _browserCore.monitor)(function () {
      return globalContextManager.clearContext();
    }),
    getInitConfiguration: (0, _browserCore.monitor)(function () {
      return getInitConfigurationStrategy();
    }),
    getInternalContext: (0, _browserCore.monitor)(function (startTime) {
      return getInternalContextStrategy(startTime);
    }),
    addDebugSession: (0, _browserCore.monitor)(function (id) {}),
    clearDebugSession: (0, _browserCore.monitor)(function () {}),
    getDebugSession: (0, _browserCore.monitor)(function () {}),
    addAction: (0, _browserCore.monitor)(function (name, context) {
      _addActionStrategy({
        name: name,
        context: (0, _browserCore.deepClone)(context),
        startClocks: (0, _browserCore.clocksNow)(),
        type: _browserCore.ActionType.CUSTOM
      });
    }),
    addError: (0, _browserCore.monitor)(function (error, context) {
      var handlingStack = (0, _browserCore.createHandlingStack)();
      _addErrorStrategy({
        error: error,
        handlingStack: handlingStack,
        context: (0, _browserCore.deepClone)(context),
        startClocks: (0, _browserCore.clocksNow)()
      });
    }),
    addTiming: (0, _browserCore.monitor)(function (name, time) {
      _addTimingStrategy(name, time);
    }),
    setUser: (0, _browserCore.monitor)(function (newUser) {
      if ((0, _browserCore.checkUser)(newUser)) {
        userContextManager.setContext((0, _browserCore.sanitizeUser)(newUser));
      }
    }),
    getUser: (0, _browserCore.monitor)(function () {
      return userContextManager.getContext();
    }),
    setUserProperty: (0, _browserCore.monitor)(function (key, property) {
      var newUser = {};
      newUser[key] = property;
      var sanitizedProperty = (0, _browserCore.sanitizeUser)(newUser)[key];
      userContextManager.setContextProperty(key, sanitizedProperty);
    }),
    removeUserProperty: (0, _browserCore.monitor)(function (key) {
      return userContextManager.removeContextProperty(key);
    }),
    /** @deprecated: renamed to clearUser */
    removeUser: (0, _browserCore.monitor)(function () {
      return userContextManager.clearContext();
    }),
    clearUser: (0, _browserCore.monitor)(function () {
      return userContextManager.clearContext();
    }),
    startView: startView,
    stopSession: (0, _browserCore.monitor)(function () {
      stopSessionStrategy();
    }),
    startSessionReplayRecording: (0, _browserCore.monitor)(recorderApi.start),
    stopSessionReplayRecording: (0, _browserCore.monitor)(recorderApi.stop)
  });
  return rumPublicApi;
  function canHandleSession(initConfiguration) {
    if (!(0, _browserCore.areCookiesAuthorized)((0, _browserCore.buildCookieOptions)(initConfiguration))) {
      _browserCore.display.warn('Cookies are not authorized, we will not send any data.');
      return false;
    }
    if (isLocalFile()) {
      _browserCore.display.error('Execution is not allowed in the current context.');
      return false;
    }
    return true;
  }
  function canInitRum(initConfiguration) {
    if (isAlreadyInitialized) {
      if (!initConfiguration.silentMultipleInit) {
        _browserCore.display.error('DATAFLUX_RUM is already initialized.');
      }
      return false;
    }
    return true;
  }
  function isLocalFile() {
    return window.location.protocol === 'file:';
  }
  function overrideInitConfigurationForBridge(initConfiguration) {
    return (0, _browserCore.assign)({}, initConfiguration, {
      applicationId: '00000000-aaaa-0000-aaaa-000000000000',
      sessionSampleRate: 100
    });
  }
}
//# sourceMappingURL=rumPublicApi.js.map