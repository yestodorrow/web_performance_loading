"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startRecording = startRecording;
var _browserCore = require("@cloudcare/browser-core");
var _record2 = require("../domain/replay/record");
var _segmentCollection = require("../domain/replay/segmentCollection");
var _types = require("../types");
function startRecording(lifeCycle, configuration, sessionManager, viewContexts, encoder, httpRequest) {
  var reportError = function reportError(error) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_ERROR_COLLECTED, {
      error: error
    });
    (0, _browserCore.addTelemetryDebug)('Error reported to customer', {
      'error.message': error.message
    });
  };
  var replayRequest = httpRequest || (0, _browserCore.createHttpRequest)(configuration.sessionReplayEndPoint, _segmentCollection.SEGMENT_BYTES_LIMIT, false, reportError);
  var segmentCollection = (0, _segmentCollection.startSegmentCollection)(lifeCycle, configuration, sessionManager, viewContexts, replayRequest, encoder);
  var addRecord = segmentCollection.addRecord;
  var stopSegmentCollection = segmentCollection.stop;
  var _record = (0, _record2.record)({
    emit: addRecord,
    configuration: configuration,
    lifeCycle: lifeCycle
  });
  var stopRecording = _record.stop;
  var takeSubsequentFullSnapshot = _record.takeSubsequentFullSnapshot;
  var flushMutations = _record.flushMutations;
  var subscribeViewEnded = lifeCycle.subscribe(_browserCore.LifeCycleEventType.VIEW_ENDED, function () {
    flushMutations();
    addRecord({
      timestamp: (0, _browserCore.timeStampNow)(),
      type: _types.RecordType.ViewEnd
    });
  });
  var scribeViewCreated = lifeCycle.subscribe(_browserCore.LifeCycleEventType.VIEW_CREATED, function (view) {
    takeSubsequentFullSnapshot(view.startClocks.timeStamp);
  });
  return {
    stop: function stop() {
      subscribeViewEnded.unsubscribe();
      scribeViewCreated.unsubscribe();
      stopRecording();
      stopSegmentCollection();
    }
  };
}
//# sourceMappingURL=startRecording.js.map