"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startRum = startRum;
exports.startRumEventCollection = startRumEventCollection;
var _rumSessionManager = require("../domain/rumSessionManager");
var _usr = require("../domain/usr");
var _browserCore = require("@cloudcare/browser-core");
var _performanceCollection = require("../domain/performanceCollection");
var _domMutationObservable = require("../domain/domMutationObservable.js");
var _locationChangeObservable = require("../domain/locationChangeObservable");
var _longTaskCollection = require("../domain/rumEventsCollection/longTask/longTaskCollection");
var _actionCollection = require("../domain/rumEventsCollection/actions/actionCollection");
var _startRumBatch = require("../transport/startRumBatch");
var _startRumEventBridge = require("../transport/startRumEventBridge");
var _assembly = require("../domain/assembly");
var _displayContext = require("../domain/contexts/displayContext.js");
var _internalContext = require("../domain/contexts/internalContext");
var _urlContexts = require("../domain/contexts/urlContexts");
var _viewContexts = require("../domain/contexts/viewContexts");
var _commonContext = require("../domain/contexts/commonContext");
var _pageStateHistory = require("../domain/contexts/pageStateHistory");
var _errorCollection = require("../domain/rumEventsCollection/error/errorCollection");
var _viewCollection = require("../domain/rumEventsCollection/view/viewCollection");
var _requestCollection = require("../domain/requestCollection");
var _resourceCollection = require("../domain/rumEventsCollection/resource/resourceCollection");
// import { startForegroundContexts } from '../domain/contexts/foregroundContexts'

function startRum(configuration, recorderApi, globalContextManager, userContextManager, initialViewOptions) {
  var cleanupTasks = [];
  var lifeCycle = new _browserCore.LifeCycle();
  var telemetry = startRumTelemetry(configuration);
  telemetry.setContextProvider(function () {
    return {
      application: {
        id: configuration.applicationId
      },
      session: {
        id: session.findTrackedSession() && session.findTrackedSession().id
      },
      view: {
        id: viewContexts.findView() && viewContexts.findView().id
      },
      action: {
        id: actionContexts.findActionId(),
        ids: actionContexts.findAllActionId()
      }
    };
  });
  var reportError = function reportError(error) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_ERROR_COLLECTED, {
      error: error
    });
  };
  var pageExitObservable = (0, _browserCore.createPageExitObservable)();
  pageExitObservable.subscribe(function (event) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.PAGE_EXITED, event);
  });
  cleanupTasks.push(function () {
    pageExitSubscription.unsubscribe();
  });
  var session = !(0, _browserCore.canUseEventBridge)() ? (0, _rumSessionManager.startRumSessionManager)(configuration, lifeCycle) : (0, _rumSessionManager.startRumSessionManagerStub)();
  if (!(0, _browserCore.canUseEventBridge)()) {
    var batch = (0, _startRumBatch.startRumBatch)(configuration, lifeCycle, telemetry.observable, reportError, pageExitObservable, session.expireObservable);
    cleanupTasks.push(function () {
      batch.stop();
    });
  } else {
    (0, _startRumEventBridge.startRumEventBridge)(lifeCycle);
  }
  var userSession = (0, _usr.startCacheUsrCache)(configuration);
  var domMutationObservable = (0, _domMutationObservable.createDOMMutationObservable)();
  var locationChangeObservable = (0, _locationChangeObservable.createLocationChangeObservable)(location);
  var _startRumEventCollection = startRumEventCollection(lifeCycle, configuration, location, session, userSession, locationChangeObservable, domMutationObservable, function () {
    return (0, _commonContext.buildCommonContext)(globalContextManager, userContextManager, recorderApi);
  }, reportError);
  var viewContexts = _startRumEventCollection.viewContexts;
  var urlContexts = _startRumEventCollection.urlContexts;
  var actionContexts = _startRumEventCollection.actionContexts;
  var pageStateHistory = _startRumEventCollection.pageStateHistory;
  var stopRumEventCollection = _startRumEventCollection.stop;
  var addAction = _startRumEventCollection.addAction;
  cleanupTasks.push(stopRumEventCollection);
  (0, _longTaskCollection.startLongTaskCollection)(lifeCycle, session);
  (0, _resourceCollection.startResourceCollection)(lifeCycle, configuration, session, pageStateHistory);
  var _startViewCollection = (0, _viewCollection.startViewCollection)(lifeCycle, configuration, location, domMutationObservable, locationChangeObservable, pageStateHistory, recorderApi, initialViewOptions);
  var addTiming = _startViewCollection.addTiming;
  var startView = _startViewCollection.startView;
  var stopViewCollection = _startViewCollection.stop;
  cleanupTasks.push(stopViewCollection);
  var _startErrorCollection = (0, _errorCollection.startErrorCollection)(lifeCycle, configuration, pageStateHistory);
  var addError = _startErrorCollection.addError;
  (0, _requestCollection.startRequestCollection)(lifeCycle, configuration, session);
  (0, _performanceCollection.startPerformanceCollection)(lifeCycle, configuration);
  var internalContext = (0, _internalContext.startInternalContext)(configuration.applicationId, session, viewContexts, actionContexts, urlContexts);
  return {
    addAction: addAction,
    addError: addError,
    addTiming: addTiming,
    configuration: configuration,
    lifeCycle: lifeCycle,
    viewContexts: viewContexts,
    session: session,
    startView: startView,
    stopSession: function stopSession() {
      session.expire();
    },
    getInternalContext: internalContext.get,
    stop: function stop() {
      cleanupTasks.forEach(function (task) {
        task();
      });
    }
  };
}
function startRumTelemetry(configuration) {
  var telemetry = (0, _browserCore.startTelemetry)(_browserCore.TelemetryService.RUM, configuration);
  //   if (canUseEventBridge()) {
  //     const bridge = getEventBridge()
  //     telemetry.observable.subscribe((event) =>
  //       bridge.send('internal_telemetry', event)
  //     )
  //   }
  return telemetry;
}
function startRumEventCollection(lifeCycle, configuration, location, sessionManager, userSessionManager, locationChangeObservable, domMutationObservable, buildCommonContext, reportError) {
  var viewContexts = (0, _viewContexts.startViewContexts)(lifeCycle);
  var urlContexts = (0, _urlContexts.startUrlContexts)(lifeCycle, locationChangeObservable, location);
  var pageStateHistory = (0, _pageStateHistory.startPageStateHistory)();
  var _startActionCollection = (0, _actionCollection.startActionCollection)(lifeCycle, domMutationObservable, configuration, pageStateHistory);
  var actionContexts = _startActionCollection.actionContexts;
  var addAction = _startActionCollection.addAction;
  var displayContext = (0, _displayContext.startDisplayContext)();
  (0, _assembly.startRumAssembly)(configuration, lifeCycle, sessionManager, userSessionManager, viewContexts, urlContexts, actionContexts, displayContext, buildCommonContext, reportError);
  return {
    viewContexts: viewContexts,
    urlContexts: urlContexts,
    pageStateHistory: pageStateHistory,
    addAction: addAction,
    actionContexts: actionContexts,
    stop: function stop() {
      viewContexts.stop();
      urlContexts.stop();
      pageStateHistory.stop();
      displayContext.stop();
    }
  };
}
//# sourceMappingURL=rum.js.map