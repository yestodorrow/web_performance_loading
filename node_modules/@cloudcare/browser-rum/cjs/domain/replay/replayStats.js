"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAX_STATS_HISTORY = void 0;
exports.addRecord = addRecord;
exports.addSegment = addSegment;
exports.addWroteData = addWroteData;
exports.getReplayStats = getReplayStats;
exports.getSegmentsCount = getSegmentsCount;
exports.resetReplayStats = resetReplayStats;
var MAX_STATS_HISTORY = 10;
exports.MAX_STATS_HISTORY = MAX_STATS_HISTORY;
var statsPerView;
function getSegmentsCount(viewId) {
  return getOrCreateReplayStats(viewId).segments_count;
}
function addSegment(viewId) {
  getOrCreateReplayStats(viewId).segments_count += 1;
}
function addRecord(viewId) {
  getOrCreateReplayStats(viewId).records_count += 1;
}
function addWroteData(viewId, additionalBytesCount) {
  getOrCreateReplayStats(viewId).segments_total_raw_size += additionalBytesCount;
}
function getReplayStats(viewId) {
  return statsPerView && statsPerView.get(viewId);
}
function resetReplayStats() {
  statsPerView = undefined;
}
function getOrCreateReplayStats(viewId) {
  if (!statsPerView) {
    statsPerView = new Map();
  }
  var replayStats;
  if (statsPerView.has(viewId)) {
    replayStats = statsPerView.get(viewId);
  } else {
    replayStats = {
      records_count: 0,
      segments_count: 0,
      segments_total_raw_size: 0
    };
    statsPerView.set(viewId, replayStats);
    if (statsPerView.size > MAX_STATS_HISTORY) {
      deleteOldestStats();
    }
  }
  return replayStats;
}
function deleteOldestStats() {
  if (!statsPerView) {
    return;
  }
  if (statsPerView.keys) {
    statsPerView["delete"](statsPerView.keys().next().value);
  } else {
    // IE11 doesn't support map.keys
    var isFirst = true;
    statsPerView.forEach(function (_value, key) {
      if (isFirst) {
        statsPerView["delete"](key);
        isFirst = false;
      }
    });
  }
}
//# sourceMappingURL=replayStats.js.map