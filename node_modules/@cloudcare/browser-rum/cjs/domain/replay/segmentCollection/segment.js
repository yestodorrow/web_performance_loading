"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Segment = Segment;
var _browserCore = require("@cloudcare/browser-core");
var _types = require("../../../types");
var replayStats = _interopRequireWildcard(require("../replayStats"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Segment(encoder, context, creationReason) {
  this.encoder = encoder;
  var viewId = context.view.id;
  this.metadata = (0, _browserCore.assign)({
    start: Infinity,
    end: -Infinity,
    creation_reason: creationReason,
    records_count: 0,
    has_full_snapshot: false,
    index_in_view: replayStats.getSegmentsCount(viewId),
    source: 'browser'
  }, context);
  replayStats.addSegment(viewId);
}
Segment.prototype.addRecord = function (record, callback) {
  this.metadata.start = Math.min(this.metadata.start, record.timestamp);
  this.metadata.end = Math.max(this.metadata.end, record.timestamp);
  this.metadata.records_count += 1;
  if (!this.metadata.has_full_snapshot) {
    this.metadata.has_full_snapshot = record.type === _types.RecordType.FullSnapshot;
  }
  replayStats.addRecord(this.metadata.view.id);
  var prefix = this.metadata.records_count === 1 ? '{"records":[' : ',';
  this.encoder.write(prefix + JSON.stringify(record), callback);
};
Segment.prototype.flush = function (callback) {
  if (this.metadata.records_count === 0) {
    throw new Error('Empty segment flushed');
  }
  var _this = this;
  this.encoder.write('],' + JSON.stringify(this.metadata).slice(1) + '\n', function () {
    replayStats.addWroteData(_this.metadata.view.id, _this.encoder.getRawBytesCount());
    callback(_this.metadata);
  });
  this.encoder.reset();
};
//# sourceMappingURL=segment.js.map