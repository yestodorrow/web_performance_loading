"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeflateEncoderStreamId = void 0;
exports.createDeflateEncoder = createDeflateEncoder;
var _browserCore = require("@cloudcare/browser-core");
var DeflateEncoderStreamId = {
  REPLAY: 1
};
exports.DeflateEncoderStreamId = DeflateEncoderStreamId;
function createDeflateEncoder(worker, streamId) {
  var rawBytesCount = 0;
  var compressedData = [];
  var compressedDataTrailer;
  var nextWriteActionId = 0;
  var pendingWriteActions = [];
  var wokerListener = (0, _browserCore.addEventListener)(worker, 'message', function (params) {
    var data = params.data;
    if (data.type !== 'wrote' || data.streamId !== streamId) {
      return;
    }
    var nextPendingAction = pendingWriteActions.shift();
    if (nextPendingAction && nextPendingAction.id === data.id) {
      if (data.id === 0) {
        // Initial state
        rawBytesCount = data.additionalBytesCount;
        compressedData = [data.result];
      } else {
        rawBytesCount += data.additionalBytesCount;
        compressedData.push(data.result);
      }
      compressedDataTrailer = data.trailer;
      nextPendingAction.callback();
    } else {
      removeMessageListener();
      (0, _browserCore.addTelemetryDebug)('Worker responses received out of order.');
    }
  });
  var removeMessageListener = wokerListener.stop;
  return {
    getEncodedBytes: function getEncodedBytes() {
      if (!compressedData.length) {
        return new Uint8Array(0);
      }
      return (0, _browserCore.concatBuffers)(compressedData.concat(compressedDataTrailer));
    },
    getEncodedBytesCount: function getEncodedBytesCount() {
      if (!compressedData.length) {
        return 0;
      }
      return compressedData.reduce(function (total, buffer) {
        return total + buffer.length;
      }, 0) + compressedDataTrailer.length;
    },
    getRawBytesCount: function getRawBytesCount() {
      return rawBytesCount;
    },
    write: function write(data, callback) {
      worker.postMessage({
        action: 'write',
        id: nextWriteActionId,
        data: data,
        streamId: streamId
      });
      pendingWriteActions.push({
        id: nextWriteActionId,
        callback: callback
      });
      nextWriteActionId += 1;
    },
    reset: function reset() {
      worker.postMessage({
        action: 'reset',
        streamId: streamId
      });
      nextWriteActionId = 0;
    }
  };
}
//# sourceMappingURL=deflateEncoder.js.map