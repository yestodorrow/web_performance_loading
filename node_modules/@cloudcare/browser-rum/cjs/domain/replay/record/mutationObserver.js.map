{"version":3,"file":"mutationObserver.js","names":["_browserCore","require","_domMutationObservable","_constants","_privacy","_serializationUtils","_serialize","_mutationBatch","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","startMutationObserver","mutationCallback","configuration","shadowRootsController","target","MutationObserver","getMutationObserverConstructor","stop","noop","flush","mutationBatch","createMutationBatch","mutations","processMutations","concat","observer","takeRecords","monitor","addMutations","observe","attributeOldValue","attributes","characterData","characterDataOldValue","childList","subtree","disconnect","nodePrivacyLevelCache","Map","filter","mutation","type","forEach","removedNodes","removedNode","traverseRemovedShadowDom","removeShadowRoot","filteredMutations","isConnected","nodeAndAncestorsHaveSerializedNode","getNodePrivacyLevel","defaultPrivacyLevel","NodePrivacyLevel","HIDDEN","_processChildListMutations","processChildListMutations","adds","removes","serializedNodeIds","hasBeenSerialized","node","hasSerializedNode","has","getSerializedNodeId","texts","processCharacterDataMutations","processAttributesMutations","addedAndMovedNodes","Set","_iterator","_step","addedNodes","add","set","sortedAddedAndMovedNodes","sortAddedAndMovedNodes","addedNodeMutations","_i","_sortedAddedAndMovedN","parentNodePrivacyLevel","parentNode","IGNORE","serializedNode","serializeNodeWithId","serializationContext","status","SerializationContextStatus","MUTATION","getParentNode","push","nextId","getNextSibling","parentId","removedNodeMutations","parent","id","nextSibling","textMutations","handledNodes","_iterator2","_step2","textContent","oldValue","isNullUndefinedDefaultValue","getTextContent","attributeMutations","handledElements","handledAttributes","get","attributeName","emittedMutations","_iterator3","_step3","uncensoredValue","getAttribute","privacyLevel","attributeValue","serializeAttribute","transformedValue","inputValue","getElementInputValue","undefined","emittedMutation","nodes","sort","a","b","position","compareDocumentPosition","Node","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","shadowDomRemovedCallback","isNodeShadowHost","shadowRoot","forEachChildNodes","childNode"],"sources":["../../../../src/domain/replay/record/mutationObserver.js"],"sourcesContent":["import {\n  noop,\n  forEachChildNodes,\n  isNodeShadowHost,\n  getParentNode,\n  isNullUndefinedDefaultValue,\n  monitor\n} from '@cloudcare/browser-core'\nimport { getMutationObserverConstructor } from '../../domMutationObservable'\nimport { NodePrivacyLevel } from '../../../constants'\nimport { getNodePrivacyLevel, getTextContent } from './privacy'\nimport {\n  getElementInputValue,\n  getSerializedNodeId,\n  hasSerializedNode,\n  nodeAndAncestorsHaveSerializedNode\n} from './serializationUtils'\nimport {\n  serializeNodeWithId,\n  serializeAttribute,\n  SerializationContextStatus\n} from './serialize'\nimport { createMutationBatch } from './mutationBatch'\n\n/**\n * Buffers and aggregate mutations generated by a MutationObserver into MutationPayload\n */\nexport function startMutationObserver(\n  mutationCallback,\n  configuration,\n  shadowRootsController,\n  target\n) {\n  var MutationObserver = getMutationObserverConstructor()\n  if (!MutationObserver) {\n    return { stop: noop, flush: noop }\n  }\n\n  var mutationBatch = createMutationBatch(function (mutations) {\n    processMutations(\n      mutations.concat(observer.takeRecords()),\n      mutationCallback,\n      configuration,\n      shadowRootsController\n    )\n  })\n\n  var observer = new MutationObserver(monitor(mutationBatch.addMutations))\n\n  observer.observe(target, {\n    attributeOldValue: true,\n    attributes: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  })\n\n  return {\n    stop: function () {\n      observer.disconnect()\n      mutationBatch.stop()\n    },\n    flush: function () {\n      mutationBatch.flush()\n    }\n  }\n}\n\nfunction processMutations(\n  mutations,\n  mutationCallback,\n  configuration,\n  shadowRootsController\n) {\n  var nodePrivacyLevelCache = new Map()\n  mutations\n    .filter(function (mutation) {\n      return mutation.type === 'childList'\n    })\n    .forEach(function (mutation) {\n      mutation.removedNodes.forEach(function (removedNode) {\n        traverseRemovedShadowDom(\n          removedNode,\n          shadowRootsController.removeShadowRoot\n        )\n      })\n    })\n\n  // Discard any mutation with a 'target' node that:\n  // * isn't injected in the current document or isn't known/serialized yet: those nodes are likely\n  // part of a mutation occurring in a parent Node\n  // * should be hidden or ignored\n  var filteredMutations = mutations.filter(function (mutation) {\n    return (\n      mutation.target.isConnected &&\n      nodeAndAncestorsHaveSerializedNode(mutation.target) &&\n      getNodePrivacyLevel(\n        mutation.target,\n        configuration.defaultPrivacyLevel,\n        nodePrivacyLevelCache\n      ) !== NodePrivacyLevel.HIDDEN\n    )\n  })\n  var _processChildListMutations = processChildListMutations(\n    filteredMutations.filter(function (mutation) {\n      return mutation.type === 'childList'\n    }),\n    configuration,\n    shadowRootsController,\n    nodePrivacyLevelCache\n  )\n  var adds = _processChildListMutations.adds\n  var removes = _processChildListMutations.removes\n  //   var hasBeenSerialized = _processChildListMutations.hasBeenSerialized\n  var serializedNodeIds = _processChildListMutations.serializedNodeIds\n  function hasBeenSerialized(node) {\n    return (\n      hasSerializedNode(node) &&\n      serializedNodeIds.has(getSerializedNodeId(node))\n    )\n  }\n  var texts = processCharacterDataMutations(\n    filteredMutations.filter(function (mutation) {\n      return (\n        mutation.type === 'characterData' && !hasBeenSerialized(mutation.target)\n      )\n    }),\n    configuration,\n    nodePrivacyLevelCache\n  )\n\n  var attributes = processAttributesMutations(\n    filteredMutations.filter(function (mutation) {\n      return (\n        mutation.type === 'attributes' && !hasBeenSerialized(mutation.target)\n      )\n    }),\n    configuration,\n    nodePrivacyLevelCache\n  )\n  if (!texts.length && !attributes.length && !removes.length && !adds.length) {\n    return\n  }\n  mutationCallback({\n    adds: adds,\n    removes: removes,\n    texts: texts,\n    attributes: attributes\n  })\n}\n\nfunction processChildListMutations(\n  mutations,\n  configuration,\n  shadowRootsController,\n  nodePrivacyLevelCache\n) {\n  // First, we iterate over mutations to collect:\n  //\n  // * nodes that have been added in the document and not removed by a subsequent mutation\n  // * nodes that have been removed from the document but were not added in a previous mutation\n  //\n  // For this second category, we also collect their previous parent (mutation.target) because we'll\n  // need it to emit a 'remove' mutation.\n  //\n  // Those two categories may overlap: if a node moved from a position to another, it is reported as\n  // two mutation records, one with a \"removedNodes\" and the other with \"addedNodes\". In this case,\n  // the node will be in both sets.\n  var addedAndMovedNodes = new Set()\n  var removedNodes = new Map()\n  for (var mutation of mutations) {\n    mutation.addedNodes.forEach(function (node) {\n      addedAndMovedNodes.add(node)\n    })\n    mutation.removedNodes.forEach(function (node) {\n      if (!addedAndMovedNodes.has(node)) {\n        removedNodes.set(node, mutation.target)\n      }\n      addedAndMovedNodes.delete(node)\n    })\n  }\n\n  // Then, we sort nodes that are still in the document by topological order, for two reasons:\n  //\n  // * We will serialize each added nodes with their descendants. We don't want to serialize a node\n  // twice, so we need to iterate over the parent nodes first and skip any node that is contained in\n  // a precedent node.\n  //\n  // * To emit \"add\" mutations, we need references to the parent and potential next sibling of each\n  // added node. So we need to iterate over the parent nodes first, and when multiple nodes are\n  // siblings, we want to iterate from last to first. This will ensure that any \"next\" node is\n  // already serialized and have an id.\n  var sortedAddedAndMovedNodes = Array.from(addedAndMovedNodes)\n  sortAddedAndMovedNodes(sortedAddedAndMovedNodes)\n\n  // Then, we iterate over our sorted node sets to emit mutations. We collect the newly serialized\n  // node ids in a set to be able to skip subsequent related mutations.\n  var serializedNodeIds = new Set()\n\n  var addedNodeMutations = []\n  for (var node of sortedAddedAndMovedNodes) {\n    if (hasBeenSerialized(node)) {\n      continue\n    }\n\n    var parentNodePrivacyLevel = getNodePrivacyLevel(\n      node.parentNode,\n      configuration.defaultPrivacyLevel,\n      nodePrivacyLevelCache\n    )\n    if (\n      parentNodePrivacyLevel === NodePrivacyLevel.HIDDEN ||\n      parentNodePrivacyLevel === NodePrivacyLevel.IGNORE\n    ) {\n      continue\n    }\n\n    var serializedNode = serializeNodeWithId(node, {\n      serializedNodeIds: serializedNodeIds,\n      parentNodePrivacyLevel: parentNodePrivacyLevel,\n      serializationContext: {\n        status: SerializationContextStatus.MUTATION,\n        shadowRootsController: shadowRootsController\n      },\n      configuration\n    })\n    if (!serializedNode) {\n      continue\n    }\n\n    var parentNode = getParentNode(node)\n    addedNodeMutations.push({\n      nextId: getNextSibling(node),\n      parentId: getSerializedNodeId(parentNode),\n      node: serializedNode\n    })\n  }\n  // Finally, we emit remove mutations.\n  var removedNodeMutations = []\n  removedNodes.forEach(function (parent, node) {\n    if (hasSerializedNode(node)) {\n      removedNodeMutations.push({\n        parentId: getSerializedNodeId(parent),\n        id: getSerializedNodeId(node)\n      })\n    }\n  })\n\n  return {\n    adds: addedNodeMutations,\n    removes: removedNodeMutations,\n    serializedNodeIds: serializedNodeIds,\n    hasBeenSerialized: hasBeenSerialized\n  }\n\n  function hasBeenSerialized(node) {\n    return (\n      hasSerializedNode(node) &&\n      serializedNodeIds.has(getSerializedNodeId(node))\n    )\n  }\n\n  function getNextSibling(node) {\n    var nextSibling = node.nextSibling\n    while (nextSibling) {\n      if (hasSerializedNode(nextSibling)) {\n        return getSerializedNodeId(nextSibling)\n      }\n      nextSibling = nextSibling.nextSibling\n    }\n\n    return null\n  }\n}\n\nfunction processCharacterDataMutations(\n  mutations,\n  configuration,\n  nodePrivacyLevelCache\n) {\n  var textMutations = []\n\n  // Deduplicate mutations based on their target node\n  var handledNodes = new Set()\n  var filteredMutations = mutations.filter(function (mutation) {\n    if (handledNodes.has(mutation.target)) {\n      return false\n    }\n    handledNodes.add(mutation.target)\n    return true\n  })\n\n  // Emit mutations\n  for (var mutation of filteredMutations) {\n    var value = mutation.target.textContent\n    if (value === mutation.oldValue) {\n      continue\n    }\n\n    var parentNodePrivacyLevel = getNodePrivacyLevel(\n      getParentNode(mutation.target),\n      configuration.defaultPrivacyLevel,\n      nodePrivacyLevelCache\n    )\n    if (\n      parentNodePrivacyLevel === NodePrivacyLevel.HIDDEN ||\n      parentNodePrivacyLevel === NodePrivacyLevel.IGNORE\n    ) {\n      continue\n    }\n\n    textMutations.push({\n      id: getSerializedNodeId(mutation.target),\n      value: isNullUndefinedDefaultValue(\n        getTextContent(mutation.target, false, parentNodePrivacyLevel, null)\n      )\n    })\n  }\n\n  return textMutations\n}\n\nfunction processAttributesMutations(\n  mutations,\n  configuration,\n  nodePrivacyLevelCache\n) {\n  var attributeMutations = []\n\n  // Deduplicate mutations based on their target node and changed attribute\n  var handledElements = new Map()\n  var filteredMutations = mutations.filter(function (mutation) {\n    var handledAttributes = handledElements.get(mutation.target)\n    if (handledAttributes && handledAttributes.has(mutation.attributeName)) {\n      return false\n    }\n    if (!handledAttributes) {\n      handledElements.set(mutation.target, new Set([mutation.attributeName]))\n    } else {\n      handledAttributes.add(mutation.attributeName)\n    }\n    return true\n  })\n\n  // Emit mutations\n  var emittedMutations = new Map()\n  for (var mutation of filteredMutations) {\n    var uncensoredValue = mutation.target.getAttribute(mutation.attributeName)\n    if (uncensoredValue === mutation.oldValue) {\n      continue\n    }\n    var privacyLevel = getNodePrivacyLevel(\n      mutation.target,\n      configuration.defaultPrivacyLevel,\n      nodePrivacyLevelCache\n    )\n    var attributeValue = serializeAttribute(\n      mutation.target,\n      privacyLevel,\n      mutation.attributeName,\n      configuration\n    )\n\n    var transformedValue\n    if (mutation.attributeName === 'value') {\n      var inputValue = getElementInputValue(mutation.target, privacyLevel)\n      if (inputValue === undefined) {\n        continue\n      }\n      transformedValue = inputValue\n    } else if (typeof attributeValue === 'string') {\n      transformedValue = attributeValue\n    } else {\n      transformedValue = null\n    }\n\n    var emittedMutation = emittedMutations.get(mutation.target)\n    if (!emittedMutation) {\n      emittedMutation = {\n        id: getSerializedNodeId(mutation.target),\n        attributes: {}\n      }\n      attributeMutations.push(emittedMutation)\n      emittedMutations.set(mutation.target, emittedMutation)\n    }\n\n    emittedMutation.attributes[mutation.attributeName] = transformedValue\n  }\n\n  return attributeMutations\n}\n\nexport function sortAddedAndMovedNodes(nodes) {\n  nodes.sort(function (a, b) {\n    var position = a.compareDocumentPosition(b)\n    /* eslint-disable no-bitwise */\n    if (position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      return -1\n    } else if (position & Node.DOCUMENT_POSITION_CONTAINS) {\n      return 1\n    } else if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\n      return 1\n    } else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      return -1\n    }\n    /* eslint-enable no-bitwise */\n    return 0\n  })\n}\nfunction traverseRemovedShadowDom(removedNode, shadowDomRemovedCallback) {\n  if (isNodeShadowHost(removedNode)) {\n    shadowDomRemovedCallback(removedNode.shadowRoot)\n  }\n  forEachChildNodes(removedNode, function (childNode) {\n    return traverseRemovedShadowDom(childNode, shadowDomRemovedCallback)\n  })\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAQA,IAAAC,sBAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AACA,IAAAI,mBAAA,GAAAJ,OAAA;AAMA,IAAAK,UAAA,GAAAL,OAAA;AAKA,IAAAM,cAAA,GAAAN,OAAA;AAAqD,SAAAO,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,EAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,EAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAQ,MAAA,qBAAAN,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAO,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAT,CAAA,CAAAQ,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAS,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAT,EAAA,GAAAA,EAAA,CAAAoB,IAAA,CAAAtB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAArB,EAAA,CAAAsB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAjB,EAAA,oBAAAA,EAAA,8BAAAkB,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAP,CAAA,EAAA0B,MAAA,SAAA1B,CAAA,qBAAAA,CAAA,sBAAA2B,iBAAA,CAAA3B,CAAA,EAAA0B,MAAA,OAAAd,CAAA,GAAAgB,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAR,IAAA,CAAAtB,CAAA,EAAA+B,KAAA,aAAAnB,CAAA,iBAAAZ,CAAA,CAAAgC,WAAA,EAAApB,CAAA,GAAAZ,CAAA,CAAAgC,WAAA,CAAAC,IAAA,MAAArB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA6B,IAAA,CAAAlC,CAAA,OAAAY,CAAA,+DAAAuB,IAAA,CAAAvB,CAAA,UAAAe,iBAAA,CAAA3B,CAAA,EAAA0B,MAAA;AAAA,SAAAC,kBAAAS,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA5B,MAAA,EAAA6B,GAAA,GAAAD,GAAA,CAAA5B,MAAA,WAAAC,CAAA,MAAA6B,IAAA,OAAAjC,KAAA,CAAAgC,GAAA,GAAA5B,CAAA,GAAA4B,GAAA,EAAA5B,CAAA,IAAA6B,IAAA,CAAA7B,CAAA,IAAA2B,GAAA,CAAA3B,CAAA,UAAA6B,IAAA;AAErD;AACA;AACA;AACO,SAASC,qBAAqBA,CACnCC,gBAAgB,EAChBC,aAAa,EACbC,qBAAqB,EACrBC,MAAM,EACN;EACA,IAAIC,gBAAgB,GAAG,IAAAC,qDAA8B,EAAC,CAAC;EACvD,IAAI,CAACD,gBAAgB,EAAE;IACrB,OAAO;MAAEE,IAAI,EAAEC,iBAAI;MAAEC,KAAK,EAAED;IAAK,CAAC;EACpC;EAEA,IAAIE,aAAa,GAAG,IAAAC,kCAAmB,EAAC,UAAUC,SAAS,EAAE;IAC3DC,gBAAgB,CACdD,SAAS,CAACE,MAAM,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,EACxCf,gBAAgB,EAChBC,aAAa,EACbC,qBACF,CAAC;EACH,CAAC,CAAC;EAEF,IAAIY,QAAQ,GAAG,IAAIV,gBAAgB,CAAC,IAAAY,oBAAO,EAACP,aAAa,CAACQ,YAAY,CAAC,CAAC;EAExEH,QAAQ,CAACI,OAAO,CAACf,MAAM,EAAE;IACvBgB,iBAAiB,EAAE,IAAI;IACvBC,UAAU,EAAE,IAAI;IAChBC,aAAa,EAAE,IAAI;IACnBC,qBAAqB,EAAE,IAAI;IAC3BC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,OAAO;IACLlB,IAAI,EAAE,SAAAA,KAAA,EAAY;MAChBQ,QAAQ,CAACW,UAAU,CAAC,CAAC;MACrBhB,aAAa,CAACH,IAAI,CAAC,CAAC;IACtB,CAAC;IACDE,KAAK,EAAE,SAAAA,MAAA,EAAY;MACjBC,aAAa,CAACD,KAAK,CAAC,CAAC;IACvB;EACF,CAAC;AACH;AAEA,SAASI,gBAAgBA,CACvBD,SAAS,EACTX,gBAAgB,EAChBC,aAAa,EACbC,qBAAqB,EACrB;EACA,IAAIwB,qBAAqB,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrChB,SAAS,CACNiB,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC1B,OAAOA,QAAQ,CAACC,IAAI,KAAK,WAAW;EACtC,CAAC,CAAC,CACDC,OAAO,CAAC,UAAUF,QAAQ,EAAE;IAC3BA,QAAQ,CAACG,YAAY,CAACD,OAAO,CAAC,UAAUE,WAAW,EAAE;MACnDC,wBAAwB,CACtBD,WAAW,EACX/B,qBAAqB,CAACiC,gBACxB,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEJ;EACA;EACA;EACA;EACA,IAAIC,iBAAiB,GAAGzB,SAAS,CAACiB,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC3D,OACEA,QAAQ,CAAC1B,MAAM,CAACkC,WAAW,IAC3B,IAAAC,sDAAkC,EAACT,QAAQ,CAAC1B,MAAM,CAAC,IACnD,IAAAoC,4BAAmB,EACjBV,QAAQ,CAAC1B,MAAM,EACfF,aAAa,CAACuC,mBAAmB,EACjCd,qBACF,CAAC,KAAKe,2BAAgB,CAACC,MAAM;EAEjC,CAAC,CAAC;EACF,IAAIC,0BAA0B,GAAGC,yBAAyB,CACxDR,iBAAiB,CAACR,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC3C,OAAOA,QAAQ,CAACC,IAAI,KAAK,WAAW;EACtC,CAAC,CAAC,EACF7B,aAAa,EACbC,qBAAqB,EACrBwB,qBACF,CAAC;EACD,IAAImB,IAAI,GAAGF,0BAA0B,CAACE,IAAI;EAC1C,IAAIC,OAAO,GAAGH,0BAA0B,CAACG,OAAO;EAChD;EACA,IAAIC,iBAAiB,GAAGJ,0BAA0B,CAACI,iBAAiB;EACpE,SAASC,iBAAiBA,CAACC,IAAI,EAAE;IAC/B,OACE,IAAAC,qCAAiB,EAACD,IAAI,CAAC,IACvBF,iBAAiB,CAACI,GAAG,CAAC,IAAAC,uCAAmB,EAACH,IAAI,CAAC,CAAC;EAEpD;EACA,IAAII,KAAK,GAAGC,6BAA6B,CACvClB,iBAAiB,CAACR,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC3C,OACEA,QAAQ,CAACC,IAAI,KAAK,eAAe,IAAI,CAACkB,iBAAiB,CAACnB,QAAQ,CAAC1B,MAAM,CAAC;EAE5E,CAAC,CAAC,EACFF,aAAa,EACbyB,qBACF,CAAC;EAED,IAAIN,UAAU,GAAGmC,0BAA0B,CACzCnB,iBAAiB,CAACR,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC3C,OACEA,QAAQ,CAACC,IAAI,KAAK,YAAY,IAAI,CAACkB,iBAAiB,CAACnB,QAAQ,CAAC1B,MAAM,CAAC;EAEzE,CAAC,CAAC,EACFF,aAAa,EACbyB,qBACF,CAAC;EACD,IAAI,CAAC2B,KAAK,CAACrF,MAAM,IAAI,CAACoD,UAAU,CAACpD,MAAM,IAAI,CAAC8E,OAAO,CAAC9E,MAAM,IAAI,CAAC6E,IAAI,CAAC7E,MAAM,EAAE;IAC1E;EACF;EACAgC,gBAAgB,CAAC;IACf6C,IAAI,EAAEA,IAAI;IACVC,OAAO,EAAEA,OAAO;IAChBO,KAAK,EAAEA,KAAK;IACZjC,UAAU,EAAEA;EACd,CAAC,CAAC;AACJ;AAEA,SAASwB,yBAAyBA,CAChCjC,SAAS,EACTV,aAAa,EACbC,qBAAqB,EACrBwB,qBAAqB,EACrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI8B,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC;EAClC,IAAIzB,YAAY,GAAG,IAAIL,GAAG,CAAC,CAAC;EAAA,IAAA+B,SAAA,GAAAnG,0BAAA,CACPoD,SAAS;IAAAgD,KAAA;EAAA;IAA9B,KAAAD,SAAA,CAAAvF,CAAA,MAAAwF,KAAA,GAAAD,SAAA,CAAAtF,CAAA,IAAAC,IAAA,GAAgC;MAAA,IAAvBwD,QAAQ,GAAA8B,KAAA,CAAArF,KAAA;MACfuD,QAAQ,CAAC+B,UAAU,CAAC7B,OAAO,CAAC,UAAUkB,IAAI,EAAE;QAC1CO,kBAAkB,CAACK,GAAG,CAACZ,IAAI,CAAC;MAC9B,CAAC,CAAC;MACFpB,QAAQ,CAACG,YAAY,CAACD,OAAO,CAAC,UAAUkB,IAAI,EAAE;QAC5C,IAAI,CAACO,kBAAkB,CAACL,GAAG,CAACF,IAAI,CAAC,EAAE;UACjCjB,YAAY,CAAC8B,GAAG,CAACb,IAAI,EAAEpB,QAAQ,CAAC1B,MAAM,CAAC;QACzC;QACAqD,kBAAkB,UAAO,CAACP,IAAI,CAAC;MACjC,CAAC,CAAC;IACJ;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,SAAApE,GAAA;IAAA6E,SAAA,CAAAnF,CAAA,CAAAM,GAAA;EAAA;IAAA6E,SAAA,CAAAjF,CAAA;EAAA;EACA,IAAIsF,wBAAwB,GAAGlG,KAAK,CAAC6B,IAAI,CAAC8D,kBAAkB,CAAC;EAC7DQ,sBAAsB,CAACD,wBAAwB,CAAC;;EAEhD;EACA;EACA,IAAIhB,iBAAiB,GAAG,IAAIU,GAAG,CAAC,CAAC;EAEjC,IAAIQ,kBAAkB,GAAG,EAAE;EAC3B,SAAAC,EAAA,MAAAC,qBAAA,GAAiBJ,wBAAwB,EAAAG,EAAA,GAAAC,qBAAA,CAAAnG,MAAA,EAAAkG,EAAA,IAAE;IAAtC,IAAIjB,IAAI,GAAAkB,qBAAA,CAAAD,EAAA;IACX,IAAIlB,iBAAiB,CAACC,IAAI,CAAC,EAAE;MAC3B;IACF;IAEA,IAAImB,sBAAsB,GAAG,IAAA7B,4BAAmB,EAC9CU,IAAI,CAACoB,UAAU,EACfpE,aAAa,CAACuC,mBAAmB,EACjCd,qBACF,CAAC;IACD,IACE0C,sBAAsB,KAAK3B,2BAAgB,CAACC,MAAM,IAClD0B,sBAAsB,KAAK3B,2BAAgB,CAAC6B,MAAM,EAClD;MACA;IACF;IAEA,IAAIC,cAAc,GAAG,IAAAC,8BAAmB,EAACvB,IAAI,EAAE;MAC7CF,iBAAiB,EAAEA,iBAAiB;MACpCqB,sBAAsB,EAAEA,sBAAsB;MAC9CK,oBAAoB,EAAE;QACpBC,MAAM,EAAEC,qCAA0B,CAACC,QAAQ;QAC3C1E,qBAAqB,EAAEA;MACzB,CAAC;MACDD,aAAa,EAAbA;IACF,CAAC,CAAC;IACF,IAAI,CAACsE,cAAc,EAAE;MACnB;IACF;IAEA,IAAIF,UAAU,GAAG,IAAAQ,0BAAa,EAAC5B,IAAI,CAAC;IACpCgB,kBAAkB,CAACa,IAAI,CAAC;MACtBC,MAAM,EAAEC,cAAc,CAAC/B,IAAI,CAAC;MAC5BgC,QAAQ,EAAE,IAAA7B,uCAAmB,EAACiB,UAAU,CAAC;MACzCpB,IAAI,EAAEsB;IACR,CAAC,CAAC;EACJ;EACA;EACA,IAAIW,oBAAoB,GAAG,EAAE;EAC7BlD,YAAY,CAACD,OAAO,CAAC,UAAUoD,MAAM,EAAElC,IAAI,EAAE;IAC3C,IAAI,IAAAC,qCAAiB,EAACD,IAAI,CAAC,EAAE;MAC3BiC,oBAAoB,CAACJ,IAAI,CAAC;QACxBG,QAAQ,EAAE,IAAA7B,uCAAmB,EAAC+B,MAAM,CAAC;QACrCC,EAAE,EAAE,IAAAhC,uCAAmB,EAACH,IAAI;MAC9B,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAO;IACLJ,IAAI,EAAEoB,kBAAkB;IACxBnB,OAAO,EAAEoC,oBAAoB;IAC7BnC,iBAAiB,EAAEA,iBAAiB;IACpCC,iBAAiB,EAAEA;EACrB,CAAC;EAED,SAASA,iBAAiBA,CAACC,IAAI,EAAE;IAC/B,OACE,IAAAC,qCAAiB,EAACD,IAAI,CAAC,IACvBF,iBAAiB,CAACI,GAAG,CAAC,IAAAC,uCAAmB,EAACH,IAAI,CAAC,CAAC;EAEpD;EAEA,SAAS+B,cAAcA,CAAC/B,IAAI,EAAE;IAC5B,IAAIoC,WAAW,GAAGpC,IAAI,CAACoC,WAAW;IAClC,OAAOA,WAAW,EAAE;MAClB,IAAI,IAAAnC,qCAAiB,EAACmC,WAAW,CAAC,EAAE;QAClC,OAAO,IAAAjC,uCAAmB,EAACiC,WAAW,CAAC;MACzC;MACAA,WAAW,GAAGA,WAAW,CAACA,WAAW;IACvC;IAEA,OAAO,IAAI;EACb;AACF;AAEA,SAAS/B,6BAA6BA,CACpC3C,SAAS,EACTV,aAAa,EACbyB,qBAAqB,EACrB;EACA,IAAI4D,aAAa,GAAG,EAAE;;EAEtB;EACA,IAAIC,YAAY,GAAG,IAAI9B,GAAG,CAAC,CAAC;EAC5B,IAAIrB,iBAAiB,GAAGzB,SAAS,CAACiB,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC3D,IAAI0D,YAAY,CAACpC,GAAG,CAACtB,QAAQ,CAAC1B,MAAM,CAAC,EAAE;MACrC,OAAO,KAAK;IACd;IACAoF,YAAY,CAAC1B,GAAG,CAAChC,QAAQ,CAAC1B,MAAM,CAAC;IACjC,OAAO,IAAI;EACb,CAAC,CAAC;;EAEF;EAAA,IAAAqF,UAAA,GAAAjI,0BAAA,CACqB6E,iBAAiB;IAAAqD,MAAA;EAAA;IAAtC,KAAAD,UAAA,CAAArH,CAAA,MAAAsH,MAAA,GAAAD,UAAA,CAAApH,CAAA,IAAAC,IAAA,GAAwC;MAAA,IAA/BwD,QAAQ,GAAA4D,MAAA,CAAAnH,KAAA;MACf,IAAIA,KAAK,GAAGuD,QAAQ,CAAC1B,MAAM,CAACuF,WAAW;MACvC,IAAIpH,KAAK,KAAKuD,QAAQ,CAAC8D,QAAQ,EAAE;QAC/B;MACF;MAEA,IAAIvB,sBAAsB,GAAG,IAAA7B,4BAAmB,EAC9C,IAAAsC,0BAAa,EAAChD,QAAQ,CAAC1B,MAAM,CAAC,EAC9BF,aAAa,CAACuC,mBAAmB,EACjCd,qBACF,CAAC;MACD,IACE0C,sBAAsB,KAAK3B,2BAAgB,CAACC,MAAM,IAClD0B,sBAAsB,KAAK3B,2BAAgB,CAAC6B,MAAM,EAClD;QACA;MACF;MAEAgB,aAAa,CAACR,IAAI,CAAC;QACjBM,EAAE,EAAE,IAAAhC,uCAAmB,EAACvB,QAAQ,CAAC1B,MAAM,CAAC;QACxC7B,KAAK,EAAE,IAAAsH,wCAA2B,EAChC,IAAAC,uBAAc,EAAChE,QAAQ,CAAC1B,MAAM,EAAE,KAAK,EAAEiE,sBAAsB,EAAE,IAAI,CACrE;MACF,CAAC,CAAC;IACJ;EAAC,SAAAvF,GAAA;IAAA2G,UAAA,CAAAjH,CAAA,CAAAM,GAAA;EAAA;IAAA2G,UAAA,CAAA/G,CAAA;EAAA;EAED,OAAO6G,aAAa;AACtB;AAEA,SAAS/B,0BAA0BA,CACjC5C,SAAS,EACTV,aAAa,EACbyB,qBAAqB,EACrB;EACA,IAAIoE,kBAAkB,GAAG,EAAE;;EAE3B;EACA,IAAIC,eAAe,GAAG,IAAIpE,GAAG,CAAC,CAAC;EAC/B,IAAIS,iBAAiB,GAAGzB,SAAS,CAACiB,MAAM,CAAC,UAAUC,QAAQ,EAAE;IAC3D,IAAImE,iBAAiB,GAAGD,eAAe,CAACE,GAAG,CAACpE,QAAQ,CAAC1B,MAAM,CAAC;IAC5D,IAAI6F,iBAAiB,IAAIA,iBAAiB,CAAC7C,GAAG,CAACtB,QAAQ,CAACqE,aAAa,CAAC,EAAE;MACtE,OAAO,KAAK;IACd;IACA,IAAI,CAACF,iBAAiB,EAAE;MACtBD,eAAe,CAACjC,GAAG,CAACjC,QAAQ,CAAC1B,MAAM,EAAE,IAAIsD,GAAG,CAAC,CAAC5B,QAAQ,CAACqE,aAAa,CAAC,CAAC,CAAC;IACzE,CAAC,MAAM;MACLF,iBAAiB,CAACnC,GAAG,CAAChC,QAAQ,CAACqE,aAAa,CAAC;IAC/C;IACA,OAAO,IAAI;EACb,CAAC,CAAC;;EAEF;EACA,IAAIC,gBAAgB,GAAG,IAAIxE,GAAG,CAAC,CAAC;EAAA,IAAAyE,UAAA,GAAA7I,0BAAA,CACX6E,iBAAiB;IAAAiE,MAAA;EAAA;IAAtC,KAAAD,UAAA,CAAAjI,CAAA,MAAAkI,MAAA,GAAAD,UAAA,CAAAhI,CAAA,IAAAC,IAAA,GAAwC;MAAA,IAA/BwD,QAAQ,GAAAwE,MAAA,CAAA/H,KAAA;MACf,IAAIgI,eAAe,GAAGzE,QAAQ,CAAC1B,MAAM,CAACoG,YAAY,CAAC1E,QAAQ,CAACqE,aAAa,CAAC;MAC1E,IAAII,eAAe,KAAKzE,QAAQ,CAAC8D,QAAQ,EAAE;QACzC;MACF;MACA,IAAIa,YAAY,GAAG,IAAAjE,4BAAmB,EACpCV,QAAQ,CAAC1B,MAAM,EACfF,aAAa,CAACuC,mBAAmB,EACjCd,qBACF,CAAC;MACD,IAAI+E,cAAc,GAAG,IAAAC,6BAAkB,EACrC7E,QAAQ,CAAC1B,MAAM,EACfqG,YAAY,EACZ3E,QAAQ,CAACqE,aAAa,EACtBjG,aACF,CAAC;MAED,IAAI0G,gBAAgB;MACpB,IAAI9E,QAAQ,CAACqE,aAAa,KAAK,OAAO,EAAE;QACtC,IAAIU,UAAU,GAAG,IAAAC,wCAAoB,EAAChF,QAAQ,CAAC1B,MAAM,EAAEqG,YAAY,CAAC;QACpE,IAAII,UAAU,KAAKE,SAAS,EAAE;UAC5B;QACF;QACAH,gBAAgB,GAAGC,UAAU;MAC/B,CAAC,MAAM,IAAI,OAAOH,cAAc,KAAK,QAAQ,EAAE;QAC7CE,gBAAgB,GAAGF,cAAc;MACnC,CAAC,MAAM;QACLE,gBAAgB,GAAG,IAAI;MACzB;MAEA,IAAII,eAAe,GAAGZ,gBAAgB,CAACF,GAAG,CAACpE,QAAQ,CAAC1B,MAAM,CAAC;MAC3D,IAAI,CAAC4G,eAAe,EAAE;QACpBA,eAAe,GAAG;UAChB3B,EAAE,EAAE,IAAAhC,uCAAmB,EAACvB,QAAQ,CAAC1B,MAAM,CAAC;UACxCiB,UAAU,EAAE,CAAC;QACf,CAAC;QACD0E,kBAAkB,CAAChB,IAAI,CAACiC,eAAe,CAAC;QACxCZ,gBAAgB,CAACrC,GAAG,CAACjC,QAAQ,CAAC1B,MAAM,EAAE4G,eAAe,CAAC;MACxD;MAEAA,eAAe,CAAC3F,UAAU,CAACS,QAAQ,CAACqE,aAAa,CAAC,GAAGS,gBAAgB;IACvE;EAAC,SAAA9H,GAAA;IAAAuH,UAAA,CAAA7H,CAAA,CAAAM,GAAA;EAAA;IAAAuH,UAAA,CAAA3H,CAAA;EAAA;EAED,OAAOqH,kBAAkB;AAC3B;AAEO,SAAS9B,sBAAsBA,CAACgD,KAAK,EAAE;EAC5CA,KAAK,CAACC,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IACzB,IAAIC,QAAQ,GAAGF,CAAC,CAACG,uBAAuB,CAACF,CAAC,CAAC;IAC3C;IACA,IAAIC,QAAQ,GAAGE,IAAI,CAACC,8BAA8B,EAAE;MAClD,OAAO,CAAC,CAAC;IACX,CAAC,MAAM,IAAIH,QAAQ,GAAGE,IAAI,CAACE,0BAA0B,EAAE;MACrD,OAAO,CAAC;IACV,CAAC,MAAM,IAAIJ,QAAQ,GAAGE,IAAI,CAACG,2BAA2B,EAAE;MACtD,OAAO,CAAC;IACV,CAAC,MAAM,IAAIL,QAAQ,GAAGE,IAAI,CAACI,2BAA2B,EAAE;MACtD,OAAO,CAAC,CAAC;IACX;IACA;IACA,OAAO,CAAC;EACV,CAAC,CAAC;AACJ;AACA,SAASxF,wBAAwBA,CAACD,WAAW,EAAE0F,wBAAwB,EAAE;EACvE,IAAI,IAAAC,6BAAgB,EAAC3F,WAAW,CAAC,EAAE;IACjC0F,wBAAwB,CAAC1F,WAAW,CAAC4F,UAAU,CAAC;EAClD;EACA,IAAAC,8BAAiB,EAAC7F,WAAW,EAAE,UAAU8F,SAAS,EAAE;IAClD,OAAO7F,wBAAwB,CAAC6F,SAAS,EAAEJ,wBAAwB,CAAC;EACtE,CAAC,CAAC;AACJ","ignoreList":[]}