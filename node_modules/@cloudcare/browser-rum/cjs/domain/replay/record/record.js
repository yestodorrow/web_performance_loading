"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.record = record;
var _browserCore = require("@cloudcare/browser-core");
var _initViewportObservable = require("../../initViewportObservable");
var _types = require("../../../types");
var _serialize = require("./serialize");
var _observers = require("./observers");
var _viewports = require("./viewports");
var _utils = require("./utils");
var _elementsScrollPositions = require("./elementsScrollPositions");
var _shadowRootsController = require("./shadowRootsController");
function record(options) {
  var emit = options.emit;
  // runtime checks for user options
  if (!emit) {
    throw new Error('emit function is required');
  }
  var elementsScrollPositions = (0, _elementsScrollPositions.createElementsScrollPositions)();
  var mutationCb = function mutationCb(mutation) {
    emit((0, _utils.assembleIncrementalSnapshot)(_types.IncrementalSource.Mutation, mutation));
  };
  var inputCb = function inputCb(s) {
    emit((0, _utils.assembleIncrementalSnapshot)(_types.IncrementalSource.Input, s));
  };
  var shadowRootsController = (0, _shadowRootsController.initShadowRootsController)(options.configuration, {
    mutationCb: mutationCb,
    inputCb: inputCb
  });
  var takeFullSnapshot = function takeFullSnapshot(timestamp, serializationContext) {
    if (typeof timestamp === 'undefined') {
      timestamp = (0, _browserCore.timeStampNow)();
    }
    if (typeof serializationContext === 'undefined') {
      serializationContext = {
        status: _serialize.SerializationContextStatus.INITIAL_FULL_SNAPSHOT,
        elementsScrollPositions: elementsScrollPositions,
        shadowRootsController: shadowRootsController
      };
    }
    var _viewportDimension = (0, _initViewportObservable.getViewportDimension)();
    var width = _viewportDimension.width;
    var height = _viewportDimension.height;
    emit({
      data: {
        height: height,
        href: window.location.href,
        width: width
      },
      type: _types.RecordType.Meta,
      timestamp: timestamp
    });
    emit({
      data: {
        has_focus: document.hasFocus()
      },
      type: _types.RecordType.Focus,
      timestamp: timestamp
    });
    emit({
      data: {
        node: (0, _serialize.serializeDocument)(document, options.configuration, serializationContext),
        initialOffset: {
          left: (0, _browserCore.getScrollX)(),
          top: (0, _browserCore.getScrollY)()
        }
      },
      type: _types.RecordType.FullSnapshot,
      timestamp: timestamp
    });
    if (window.visualViewport) {
      emit({
        data: (0, _viewports.getVisualViewport)(),
        type: _types.RecordType.VisualViewport,
        timestamp: timestamp
      });
    }
  };
  takeFullSnapshot();
  var _initObservers = (0, _observers.initObservers)({
    lifeCycle: options.lifeCycle,
    configuration: options.configuration,
    elementsScrollPositions: elementsScrollPositions,
    inputCb: inputCb,
    mediaInteractionCb: function mediaInteractionCb(p) {
      emit((0, _utils.assembleIncrementalSnapshot)(_types.IncrementalSource.MediaInteraction, p));
    },
    mouseInteractionCb: function mouseInteractionCb(mouseInteractionRecord) {
      emit(mouseInteractionRecord);
    },
    mousemoveCb: function mousemoveCb(positions, source) {
      emit((0, _utils.assembleIncrementalSnapshot)(source, {
        positions: positions
      }));
    },
    mutationCb: mutationCb,
    scrollCb: function scrollCb(p) {
      emit((0, _utils.assembleIncrementalSnapshot)(_types.IncrementalSource.Scroll, p));
    },
    styleSheetCb: function styleSheetCb(r) {
      emit((0, _utils.assembleIncrementalSnapshot)(_types.IncrementalSource.StyleSheetRule, r));
    },
    viewportResizeCb: function viewportResizeCb(d) {
      emit((0, _utils.assembleIncrementalSnapshot)(_types.IncrementalSource.ViewportResize, d));
    },
    frustrationCb: function frustrationCb(frustrationRecord) {
      emit(frustrationRecord);
    },
    focusCb: function focusCb(data) {
      emit({
        data: data,
        type: _types.RecordType.Focus,
        timestamp: (0, _browserCore.timeStampNow)()
      });
    },
    visualViewportResizeCb: function visualViewportResizeCb(data) {
      emit({
        data: data,
        type: _types.RecordType.VisualViewport,
        timestamp: (0, _browserCore.timeStampNow)()
      });
    },
    shadowRootsController: shadowRootsController
  });
  var stopObservers = _initObservers.stop;
  var flushMutationsFromObservers = _initObservers.flush;
  function flushMutations() {
    shadowRootsController.flush();
    flushMutationsFromObservers();
  }
  return {
    stop: function stop() {
      shadowRootsController.stop();
      stopObservers();
    },
    takeSubsequentFullSnapshot: function takeSubsequentFullSnapshot(timestamp) {
      flushMutations();
      takeFullSnapshot(timestamp, {
        shadowRootsController: shadowRootsController,
        status: _serialize.SerializationContextStatus.SUBSEQUENT_FULL_SNAPSHOT,
        elementsScrollPositions: elementsScrollPositions
      });
    },
    flushMutations: flushMutations,
    shadowRootsController: shadowRootsController
  };
}
//# sourceMappingURL=record.js.map