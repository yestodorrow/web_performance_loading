"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortAddedAndMovedNodes = sortAddedAndMovedNodes;
exports.startMutationObserver = startMutationObserver;
var _browserCore = require("@cloudcare/browser-core");
var _domMutationObservable = require("../../domMutationObservable");
var _constants = require("../../../constants");
var _privacy = require("./privacy");
var _serializationUtils = require("./serializationUtils");
var _serialize = require("./serialize");
var _mutationBatch = require("./mutationBatch");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Buffers and aggregate mutations generated by a MutationObserver into MutationPayload
 */
function startMutationObserver(mutationCallback, configuration, shadowRootsController, target) {
  var MutationObserver = (0, _domMutationObservable.getMutationObserverConstructor)();
  if (!MutationObserver) {
    return {
      stop: _browserCore.noop,
      flush: _browserCore.noop
    };
  }
  var mutationBatch = (0, _mutationBatch.createMutationBatch)(function (mutations) {
    processMutations(mutations.concat(observer.takeRecords()), mutationCallback, configuration, shadowRootsController);
  });
  var observer = new MutationObserver((0, _browserCore.monitor)(mutationBatch.addMutations));
  observer.observe(target, {
    attributeOldValue: true,
    attributes: true,
    characterData: true,
    characterDataOldValue: true,
    childList: true,
    subtree: true
  });
  return {
    stop: function stop() {
      observer.disconnect();
      mutationBatch.stop();
    },
    flush: function flush() {
      mutationBatch.flush();
    }
  };
}
function processMutations(mutations, mutationCallback, configuration, shadowRootsController) {
  var nodePrivacyLevelCache = new Map();
  mutations.filter(function (mutation) {
    return mutation.type === 'childList';
  }).forEach(function (mutation) {
    mutation.removedNodes.forEach(function (removedNode) {
      traverseRemovedShadowDom(removedNode, shadowRootsController.removeShadowRoot);
    });
  });

  // Discard any mutation with a 'target' node that:
  // * isn't injected in the current document or isn't known/serialized yet: those nodes are likely
  // part of a mutation occurring in a parent Node
  // * should be hidden or ignored
  var filteredMutations = mutations.filter(function (mutation) {
    return mutation.target.isConnected && (0, _serializationUtils.nodeAndAncestorsHaveSerializedNode)(mutation.target) && (0, _privacy.getNodePrivacyLevel)(mutation.target, configuration.defaultPrivacyLevel, nodePrivacyLevelCache) !== _constants.NodePrivacyLevel.HIDDEN;
  });
  var _processChildListMutations = processChildListMutations(filteredMutations.filter(function (mutation) {
    return mutation.type === 'childList';
  }), configuration, shadowRootsController, nodePrivacyLevelCache);
  var adds = _processChildListMutations.adds;
  var removes = _processChildListMutations.removes;
  //   var hasBeenSerialized = _processChildListMutations.hasBeenSerialized
  var serializedNodeIds = _processChildListMutations.serializedNodeIds;
  function hasBeenSerialized(node) {
    return (0, _serializationUtils.hasSerializedNode)(node) && serializedNodeIds.has((0, _serializationUtils.getSerializedNodeId)(node));
  }
  var texts = processCharacterDataMutations(filteredMutations.filter(function (mutation) {
    return mutation.type === 'characterData' && !hasBeenSerialized(mutation.target);
  }), configuration, nodePrivacyLevelCache);
  var attributes = processAttributesMutations(filteredMutations.filter(function (mutation) {
    return mutation.type === 'attributes' && !hasBeenSerialized(mutation.target);
  }), configuration, nodePrivacyLevelCache);
  if (!texts.length && !attributes.length && !removes.length && !adds.length) {
    return;
  }
  mutationCallback({
    adds: adds,
    removes: removes,
    texts: texts,
    attributes: attributes
  });
}
function processChildListMutations(mutations, configuration, shadowRootsController, nodePrivacyLevelCache) {
  // First, we iterate over mutations to collect:
  //
  // * nodes that have been added in the document and not removed by a subsequent mutation
  // * nodes that have been removed from the document but were not added in a previous mutation
  //
  // For this second category, we also collect their previous parent (mutation.target) because we'll
  // need it to emit a 'remove' mutation.
  //
  // Those two categories may overlap: if a node moved from a position to another, it is reported as
  // two mutation records, one with a "removedNodes" and the other with "addedNodes". In this case,
  // the node will be in both sets.
  var addedAndMovedNodes = new Set();
  var removedNodes = new Map();
  var _iterator = _createForOfIteratorHelper(mutations),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var mutation = _step.value;
      mutation.addedNodes.forEach(function (node) {
        addedAndMovedNodes.add(node);
      });
      mutation.removedNodes.forEach(function (node) {
        if (!addedAndMovedNodes.has(node)) {
          removedNodes.set(node, mutation.target);
        }
        addedAndMovedNodes["delete"](node);
      });
    }

    // Then, we sort nodes that are still in the document by topological order, for two reasons:
    //
    // * We will serialize each added nodes with their descendants. We don't want to serialize a node
    // twice, so we need to iterate over the parent nodes first and skip any node that is contained in
    // a precedent node.
    //
    // * To emit "add" mutations, we need references to the parent and potential next sibling of each
    // added node. So we need to iterate over the parent nodes first, and when multiple nodes are
    // siblings, we want to iterate from last to first. This will ensure that any "next" node is
    // already serialized and have an id.
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var sortedAddedAndMovedNodes = Array.from(addedAndMovedNodes);
  sortAddedAndMovedNodes(sortedAddedAndMovedNodes);

  // Then, we iterate over our sorted node sets to emit mutations. We collect the newly serialized
  // node ids in a set to be able to skip subsequent related mutations.
  var serializedNodeIds = new Set();
  var addedNodeMutations = [];
  for (var _i = 0, _sortedAddedAndMovedN = sortedAddedAndMovedNodes; _i < _sortedAddedAndMovedN.length; _i++) {
    var node = _sortedAddedAndMovedN[_i];
    if (hasBeenSerialized(node)) {
      continue;
    }
    var parentNodePrivacyLevel = (0, _privacy.getNodePrivacyLevel)(node.parentNode, configuration.defaultPrivacyLevel, nodePrivacyLevelCache);
    if (parentNodePrivacyLevel === _constants.NodePrivacyLevel.HIDDEN || parentNodePrivacyLevel === _constants.NodePrivacyLevel.IGNORE) {
      continue;
    }
    var serializedNode = (0, _serialize.serializeNodeWithId)(node, {
      serializedNodeIds: serializedNodeIds,
      parentNodePrivacyLevel: parentNodePrivacyLevel,
      serializationContext: {
        status: _serialize.SerializationContextStatus.MUTATION,
        shadowRootsController: shadowRootsController
      },
      configuration: configuration
    });
    if (!serializedNode) {
      continue;
    }
    var parentNode = (0, _browserCore.getParentNode)(node);
    addedNodeMutations.push({
      nextId: getNextSibling(node),
      parentId: (0, _serializationUtils.getSerializedNodeId)(parentNode),
      node: serializedNode
    });
  }
  // Finally, we emit remove mutations.
  var removedNodeMutations = [];
  removedNodes.forEach(function (parent, node) {
    if ((0, _serializationUtils.hasSerializedNode)(node)) {
      removedNodeMutations.push({
        parentId: (0, _serializationUtils.getSerializedNodeId)(parent),
        id: (0, _serializationUtils.getSerializedNodeId)(node)
      });
    }
  });
  return {
    adds: addedNodeMutations,
    removes: removedNodeMutations,
    serializedNodeIds: serializedNodeIds,
    hasBeenSerialized: hasBeenSerialized
  };
  function hasBeenSerialized(node) {
    return (0, _serializationUtils.hasSerializedNode)(node) && serializedNodeIds.has((0, _serializationUtils.getSerializedNodeId)(node));
  }
  function getNextSibling(node) {
    var nextSibling = node.nextSibling;
    while (nextSibling) {
      if ((0, _serializationUtils.hasSerializedNode)(nextSibling)) {
        return (0, _serializationUtils.getSerializedNodeId)(nextSibling);
      }
      nextSibling = nextSibling.nextSibling;
    }
    return null;
  }
}
function processCharacterDataMutations(mutations, configuration, nodePrivacyLevelCache) {
  var textMutations = [];

  // Deduplicate mutations based on their target node
  var handledNodes = new Set();
  var filteredMutations = mutations.filter(function (mutation) {
    if (handledNodes.has(mutation.target)) {
      return false;
    }
    handledNodes.add(mutation.target);
    return true;
  });

  // Emit mutations
  var _iterator2 = _createForOfIteratorHelper(filteredMutations),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var mutation = _step2.value;
      var value = mutation.target.textContent;
      if (value === mutation.oldValue) {
        continue;
      }
      var parentNodePrivacyLevel = (0, _privacy.getNodePrivacyLevel)((0, _browserCore.getParentNode)(mutation.target), configuration.defaultPrivacyLevel, nodePrivacyLevelCache);
      if (parentNodePrivacyLevel === _constants.NodePrivacyLevel.HIDDEN || parentNodePrivacyLevel === _constants.NodePrivacyLevel.IGNORE) {
        continue;
      }
      textMutations.push({
        id: (0, _serializationUtils.getSerializedNodeId)(mutation.target),
        value: (0, _browserCore.isNullUndefinedDefaultValue)((0, _privacy.getTextContent)(mutation.target, false, parentNodePrivacyLevel, null))
      });
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return textMutations;
}
function processAttributesMutations(mutations, configuration, nodePrivacyLevelCache) {
  var attributeMutations = [];

  // Deduplicate mutations based on their target node and changed attribute
  var handledElements = new Map();
  var filteredMutations = mutations.filter(function (mutation) {
    var handledAttributes = handledElements.get(mutation.target);
    if (handledAttributes && handledAttributes.has(mutation.attributeName)) {
      return false;
    }
    if (!handledAttributes) {
      handledElements.set(mutation.target, new Set([mutation.attributeName]));
    } else {
      handledAttributes.add(mutation.attributeName);
    }
    return true;
  });

  // Emit mutations
  var emittedMutations = new Map();
  var _iterator3 = _createForOfIteratorHelper(filteredMutations),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var mutation = _step3.value;
      var uncensoredValue = mutation.target.getAttribute(mutation.attributeName);
      if (uncensoredValue === mutation.oldValue) {
        continue;
      }
      var privacyLevel = (0, _privacy.getNodePrivacyLevel)(mutation.target, configuration.defaultPrivacyLevel, nodePrivacyLevelCache);
      var attributeValue = (0, _serialize.serializeAttribute)(mutation.target, privacyLevel, mutation.attributeName, configuration);
      var transformedValue;
      if (mutation.attributeName === 'value') {
        var inputValue = (0, _serializationUtils.getElementInputValue)(mutation.target, privacyLevel);
        if (inputValue === undefined) {
          continue;
        }
        transformedValue = inputValue;
      } else if (typeof attributeValue === 'string') {
        transformedValue = attributeValue;
      } else {
        transformedValue = null;
      }
      var emittedMutation = emittedMutations.get(mutation.target);
      if (!emittedMutation) {
        emittedMutation = {
          id: (0, _serializationUtils.getSerializedNodeId)(mutation.target),
          attributes: {}
        };
        attributeMutations.push(emittedMutation);
        emittedMutations.set(mutation.target, emittedMutation);
      }
      emittedMutation.attributes[mutation.attributeName] = transformedValue;
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return attributeMutations;
}
function sortAddedAndMovedNodes(nodes) {
  nodes.sort(function (a, b) {
    var position = a.compareDocumentPosition(b);
    /* eslint-disable no-bitwise */
    if (position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    } else if (position & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    } else if (position & Node.DOCUMENT_POSITION_FOLLOWING) {
      return 1;
    } else if (position & Node.DOCUMENT_POSITION_PRECEDING) {
      return -1;
    }
    /* eslint-enable no-bitwise */
    return 0;
  });
}
function traverseRemovedShadowDom(removedNode, shadowDomRemovedCallback) {
  if ((0, _browserCore.isNodeShadowHost)(removedNode)) {
    shadowDomRemovedCallback(removedNode.shadowRoot);
  }
  (0, _browserCore.forEachChildNodes)(removedNode, function (childNode) {
    return traverseRemovedShadowDom(childNode, shadowDomRemovedCallback);
  });
}
//# sourceMappingURL=mutationObserver.js.map