"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startRumAssembly = startRumAssembly;
var _browserCore = require("@cloudcare/browser-core");
var SessionType = {
  SYNTHETICS: 'synthetics',
  USER: 'user'
};
var VIEW_MODIFIABLE_FIELD_PATHS = {
  'view.url': 'string',
  'view.referrer': 'string'
};
var USER_CUSTOMIZABLE_FIELD_PATHS = {
  context: 'object'
};
var modifiableFieldPathsByEvent = {};
function startRumAssembly(configuration, lifeCycle, sessionManager, userSessionManager, viewContexts, urlContexts, actionContexts, displayContext, buildCommonContext, reportError) {
  modifiableFieldPathsByEvent[_browserCore.RumEventType.VIEW] = VIEW_MODIFIABLE_FIELD_PATHS;
  modifiableFieldPathsByEvent[_browserCore.RumEventType.ERROR] = (0, _browserCore.assign)({
    'error.message': 'string',
    'error.stack': 'string',
    'error.resource.url': 'string'
  }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS);
  modifiableFieldPathsByEvent[_browserCore.RumEventType.RESOURCE] = (0, _browserCore.assign)({
    'resource.url': 'string'
  }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS);
  modifiableFieldPathsByEvent[_browserCore.RumEventType.ACTION] = (0, _browserCore.assign)({
    'action.target.name': 'string'
  }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS);
  modifiableFieldPathsByEvent[_browserCore.RumEventType.LONG_TASK] = (0, _browserCore.assign)({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS);
  var eventRateLimiters = {};
  eventRateLimiters[_browserCore.RumEventType.ERROR] = (0, _browserCore.createEventRateLimiter)(_browserCore.RumEventType.ERROR, configuration.eventRateLimiterThreshold, reportError);
  eventRateLimiters[_browserCore.RumEventType.ACTION] = (0, _browserCore.createEventRateLimiter)(_browserCore.RumEventType.ACTION, configuration.eventRateLimiterThreshold, reportError);
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (data) {
    var startTime = data.startTime;
    var rawRumEvent = data.rawRumEvent;
    var savedCommonContext = data.savedCommonContext;
    var customerContext = data.customerContext;
    var domainContext = data.domainContext;
    var viewContext = viewContexts.findView(startTime);
    var urlContext = urlContexts.findUrl(startTime);
    var session = sessionManager.findTrackedSession(rawRumEvent.type !== _browserCore.RumEventType.VIEW ? startTime : undefined);
    if (session && viewContext && urlContext) {
      var actionId = actionContexts.findActionId(startTime);
      var actionIds = actionContexts.findAllActionId(startTime);
      var commonContext = savedCommonContext || buildCommonContext();
      var rumContext = {
        _gc: {
          sdkName: configuration.sdkName,
          sdkVersion: configuration.sdkVersion,
          drift: (0, _browserCore.currentDrift)(),
          configuration: {
            session_sample_rate: (0, _browserCore.round)(configuration.sessionSampleRate, 3),
            session_replay_sample_rate: (0, _browserCore.round)(configuration.sessionReplaySampleRate, 3)
          }
        },
        terminal: {
          type: 'web'
        },
        application: {
          id: configuration.applicationId
        },
        device: _browserCore.deviceInfo,
        env: configuration.env || '',
        service: viewContext.service || configuration.service || 'browser',
        version: viewContext.version || configuration.version || '',
        source: 'browser',
        date: (0, _browserCore.timeStampNow)(),
        user: {
          id: userSessionManager.getId(),
          is_signin: 'F',
          is_login: false
        },
        session: {
          // must be computed on each event because synthetics instrumentation can be done after sdk execution
          // cf https://github.com/puppeteer/puppeteer/issues/3667
          type: getSessionType(),
          id: session.id
        },
        view: {
          id: viewContext.id,
          name: viewContext.name,
          url: urlContext.url,
          referrer: urlContext.referrer,
          host: urlContext.host,
          path: urlContext.path,
          pathGroup: urlContext.pathGroup,
          urlQuery: urlContext.urlQuery
        },
        action: needToAssembleWithAction(rawRumEvent) && actionId ? {
          id: actionId,
          ids: actionIds
        } : undefined,
        display: displayContext.get()
      };
      var rumEvent = (0, _browserCore.extend2Lev)(rumContext, viewContext, rawRumEvent);
      var serverRumEvent = (0, _browserCore.withSnakeCaseKeys)(rumEvent);
      var context = (0, _browserCore.extend2Lev)({}, commonContext.context, customerContext);
      if (!(0, _browserCore.isEmptyObject)(context)) {
        serverRumEvent.context = context;
      }
      if (!('has_replay' in serverRumEvent.session)) {
        serverRumEvent.session.has_replay = commonContext.hasReplay;
      }
      if (serverRumEvent.type === 'view') {
        serverRumEvent.session.sampled_for_replay = session.sessionReplayAllowed;
      }
      if (!(0, _browserCore.isEmptyObject)(commonContext.user)) {
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        serverRumEvent.user = (0, _browserCore.extend2Lev)({
          // id: session.getAnonymousID(),
          is_signin: 'T',
          is_login: true
        }, commonContext.user);
      }
      if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {
        if ((0, _browserCore.isEmptyObject)(serverRumEvent.context)) {
          delete serverRumEvent.context;
        }
        lifeCycle.notify(_browserCore.LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent);
      }
    }
  });
}
function shouldSend(event, beforeSend, domainContext, eventRateLimiters) {
  if (beforeSend) {
    var result = (0, _browserCore.limitModification)(event, modifiableFieldPathsByEvent[event.type], function (event) {
      return beforeSend(event, domainContext);
    });
    if (result === false && event.type !== _browserCore.RumEventType.VIEW) {
      return false;
    }
    if (result === false) {
      _browserCore.display.warn("Can't dismiss view events using beforeSend!");
    }
  }
  var rateLimitReached = false;
  if (eventRateLimiters[event.type]) {
    rateLimitReached = eventRateLimiters[event.type].isLimitReached();
  }
  return !rateLimitReached;
}
function needToAssembleWithAction(event) {
  return [_browserCore.RumEventType.ERROR, _browserCore.RumEventType.RESOURCE, _browserCore.RumEventType.LONG_TASK].indexOf(event.type) !== -1;
}
function getSessionType() {
  return window._DATAFLUX_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;
}
//# sourceMappingURL=assembly.js.map