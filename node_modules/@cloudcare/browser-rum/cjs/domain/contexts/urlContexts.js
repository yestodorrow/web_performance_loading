"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL_CONTEXT_TIME_OUT_DELAY = void 0;
exports.startUrlContexts = startUrlContexts;
var _browserCore = require("@cloudcare/browser-core");
/**
 * We want to attach to an event:
 * - the url corresponding to its start
 * - the referrer corresponding to the previous view url (or document referrer for initial view)
 */

var URL_CONTEXT_TIME_OUT_DELAY = _browserCore.SESSION_TIME_OUT_DELAY;
exports.URL_CONTEXT_TIME_OUT_DELAY = URL_CONTEXT_TIME_OUT_DELAY;
function startUrlContexts(lifeCycle, locationChangeObservable, location) {
  var urlContextHistory = new _browserCore.ContextHistory(URL_CONTEXT_TIME_OUT_DELAY);
  var previousViewUrl;
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.BEFORE_VIEW_CREATED, function (data) {
    var viewUrl = location.href;
    urlContextHistory.add(buildUrlContext({
      url: viewUrl,
      location: location,
      referrer: !previousViewUrl ? document.referrer : previousViewUrl
    }), data.startClocks.relative);
    previousViewUrl = viewUrl;
  });
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.AFTER_VIEW_ENDED, function (data) {
    urlContextHistory.closeActive(data.endClocks.relative);
  });
  var locationChangeSubscription = locationChangeObservable.subscribe(function (data) {
    var current = urlContextHistory.find();
    if (current) {
      var changeTime = (0, _browserCore.relativeNow)();
      urlContextHistory.closeActive(changeTime);
      urlContextHistory.add(buildUrlContext({
        url: data.newLocation.href,
        location: data.newLocation,
        referrer: current.referrer
      }), changeTime);
    }
  });
  function buildUrlContext(data) {
    var path = data.location.pathname;
    var hash = data.location.hash;
    if (hash && !(0, _browserCore.isHashAnAnchor)(hash)) {
      path = '/' + (0, _browserCore.getPathFromHash)(hash);
    }
    return {
      url: data.url,
      referrer: data.referrer,
      host: data.location.host,
      path: path,
      pathGroup: (0, _browserCore.replaceNumberCharByPath)(path),
      urlQuery: (0, _browserCore.getQueryParamsFromUrl)(data.location.href)
    };
  }
  return {
    findUrl: function findUrl(startTime) {
      return urlContextHistory.find(startTime);
    },
    stop: function stop() {
      locationChangeSubscription.unsubscribe();
      urlContextHistory.stop();
    }
  };
}
//# sourceMappingURL=urlContexts.js.map