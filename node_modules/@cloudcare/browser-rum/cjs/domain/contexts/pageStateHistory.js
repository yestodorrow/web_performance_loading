"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageState = exports.PAGE_STATE_CONTEXT_TIME_OUT_DELAY = exports.MAX_PAGE_STATE_ENTRIES_SELECTABLE = exports.MAX_PAGE_STATE_ENTRIES = void 0;
exports.startPageStateHistory = startPageStateHistory;
var _browserCore = require("@cloudcare/browser-core");
// Arbitrary value to cap number of element for memory consumption in the browser
var MAX_PAGE_STATE_ENTRIES = 4000;
// Arbitrary value to cap number of element for backend & to save bandwidth
exports.MAX_PAGE_STATE_ENTRIES = MAX_PAGE_STATE_ENTRIES;
var MAX_PAGE_STATE_ENTRIES_SELECTABLE = 500;
exports.MAX_PAGE_STATE_ENTRIES_SELECTABLE = MAX_PAGE_STATE_ENTRIES_SELECTABLE;
var PAGE_STATE_CONTEXT_TIME_OUT_DELAY = _browserCore.SESSION_TIME_OUT_DELAY;
exports.PAGE_STATE_CONTEXT_TIME_OUT_DELAY = PAGE_STATE_CONTEXT_TIME_OUT_DELAY;
var PageState = {
  ACTIVE: 'active',
  PASSIVE: 'passive',
  HIDDEN: 'hidden',
  FROZEN: 'frozen',
  TERMINATED: 'terminated'
};
exports.PageState = PageState;
function startPageStateHistory(maxPageStateEntriesSelectable) {
  if (maxPageStateEntriesSelectable === undefined) {
    maxPageStateEntriesSelectable = MAX_PAGE_STATE_ENTRIES_SELECTABLE;
  }
  var pageStateHistory = new _browserCore.ContextHistory(PAGE_STATE_CONTEXT_TIME_OUT_DELAY, MAX_PAGE_STATE_ENTRIES);
  var currentPageState;
  addPageState(getPageState(), (0, _browserCore.relativeNow)());
  var _addEventListeners = (0, _browserCore.addEventListeners)(window, [_browserCore.DOM_EVENT.PAGE_SHOW, _browserCore.DOM_EVENT.FOCUS, _browserCore.DOM_EVENT.BLUR, _browserCore.DOM_EVENT.VISIBILITY_CHANGE, _browserCore.DOM_EVENT.RESUME, _browserCore.DOM_EVENT.FREEZE, _browserCore.DOM_EVENT.PAGE_HIDE], function (event) {
    // Only get events fired by the browser to avoid false currentPageState changes done with custom events
    addPageState(computePageState(event), event.timeStamp);
  }, {
    capture: true
  });
  var stopEventListeners = _addEventListeners.stop;
  function addPageState(nextPageState, startTime) {
    if (startTime === undefined) {
      startTime = (0, _browserCore.relativeNow)();
    }
    if (nextPageState === currentPageState) {
      return;
    }
    currentPageState = nextPageState;
    pageStateHistory.closeActive(startTime);
    pageStateHistory.add({
      state: currentPageState,
      startTime: startTime
    }, startTime);
  }
  return {
    findAll: function findAll(eventStartTime, duration) {
      var pageStateEntries = pageStateHistory.findAll(eventStartTime, duration);
      if (pageStateEntries.length === 0) {
        return;
      }
      var pageStateServerEntries = [];
      // limit the number of entries to return
      var limit = Math.max(0, pageStateEntries.length - maxPageStateEntriesSelectable);

      // loop page state entries backward to return the selected ones in desc order
      for (var index = pageStateEntries.length - 1; index >= limit; index--) {
        var pageState = pageStateEntries[index];
        // compute the start time relative to the event start time (ex: to be relative to the view start time)
        var relativeStartTime = (0, _browserCore.elapsed)(eventStartTime, pageState.startTime);
        pageStateServerEntries.push({
          state: pageState.state,
          start: (0, _browserCore.toServerDuration)(relativeStartTime)
        });
      }
      return pageStateServerEntries;
    },
    isInActivePageStateAt: function isInActivePageStateAt(startTime) {
      var pageStateEntry = pageStateHistory.find(startTime);
      return pageStateEntry !== undefined && pageStateEntry.state === PageState.ACTIVE;
    },
    addPageState: addPageState,
    stop: function stop() {
      stopEventListeners();
      pageStateHistory.stop();
    }
  };
}
function computePageState(event) {
  if (event.type === _browserCore.DOM_EVENT.FREEZE) {
    return PageState.FROZEN;
  } else if (event.type === _browserCore.DOM_EVENT.PAGE_HIDE) {
    return event.persisted ? PageState.FROZEN : PageState.TERMINATED;
  }
  return getPageState();
}
function getPageState() {
  if (document.visibilityState === 'hidden') {
    return PageState.HIDDEN;
  }
  if (document.hasFocus()) {
    return PageState.ACTIVE;
  }
  return PageState.PASSIVE;
}
//# sourceMappingURL=pageStateHistory.js.map