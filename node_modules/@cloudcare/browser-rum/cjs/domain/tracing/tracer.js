"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearTracingIfNeeded = clearTracingIfNeeded;
exports.injectHeadersIfTracingAllowed = injectHeadersIfTracingAllowed;
exports.isTracingOption = isTracingOption;
exports.startTracer = startTracer;
var _browserCore = require("@cloudcare/browser-core");
var _ddtraceTracer = require("./ddtraceTracer");
var _skywalkingTracer = require("./skywalkingTracer");
var _jaegerTracer = require("./jaegerTracer");
var _zipkinSingleTracer = require("./zipkinSingleTracer");
var _zipkinMultiTracer = require("./zipkinMultiTracer");
var _w3cTraceParentTracer = require("./w3cTraceParentTracer");
function isTracingOption(item) {
  var expectedItem = item;
  return (0, _browserCore.getType)(expectedItem) === 'object' && (0, _browserCore.isMatchOption)(expectedItem.match) && (0, _browserCore.isString)(expectedItem.traceType);
}
function clearTracingIfNeeded(context) {
  if (context.status === 0 && !context.isAborted) {
    context.traceId = undefined;
    context.spanId = undefined;
    context.traceSampled = undefined;
  }
}
function startTracer(configuration, sessionManager) {
  return {
    clearTracingIfNeeded: clearTracingIfNeeded,
    traceFetch: function traceFetch(context) {
      return injectHeadersIfTracingAllowed(configuration, context, sessionManager, function (tracingHeaders) {
        if (context.input instanceof Request && (!context.init || !context.init.headers)) {
          context.input = new Request(context.input);
          (0, _browserCore.each)(tracingHeaders, function (value, key) {
            context.input.headers.append(key, value);
          });
        } else {
          context.init = (0, _browserCore.shallowClone)(context.init);
          var headers = [];
          if (context.init.headers instanceof Headers) {
            context.init.headers.forEach(function (value, key) {
              headers.push([key, value]);
            });
          } else if ((0, _browserCore.isArray)(context.init.headers)) {
            (0, _browserCore.each)(context.init.headers, function (header) {
              headers.push(header);
            });
          } else if (context.init.headers) {
            (0, _browserCore.each)(context.init.headers, function (value, key) {
              headers.push([key, value]);
            });
          }
          // context.init.headers = headers.concat(objectEntries(tracingHeaders))
          // 转换成对象，兼容部分
          var headersMap = {};
          (0, _browserCore.each)(headers.concat((0, _browserCore.objectEntries)(tracingHeaders)), function (header) {
            headersMap[header[0]] = header[1];
          });
          context.init.headers = headersMap;
        }
      });
    },
    traceXhr: function traceXhr(context, xhr) {
      return injectHeadersIfTracingAllowed(configuration, context, sessionManager, function (tracingHeaders) {
        (0, _browserCore.each)(tracingHeaders, function (value, name) {
          xhr.setRequestHeader(name, value);
        });
      });
    }
  };
}
function injectHeadersIfTracingAllowed(configuration, context, sessionManager, inject) {
  if (!sessionManager.findTrackedSession()) {
    return;
  }
  var tracingOption = (0, _browserCore.find)(configuration.allowedTracingUrls, function (tracingOption) {
    return (0, _browserCore.matchList)([tracingOption.match], context.url, true);
  });
  if (!tracingOption) {
    return;
  }
  var traceSampled = !(0, _browserCore.isNumber)(configuration.tracingSampleRate) || (0, _browserCore.performDraw)(configuration.tracingSampleRate);
  var tracer,
    traceType = tracingOption.traceType;
  switch (traceType) {
    case _browserCore.TraceType.DDTRACE:
      tracer = new _ddtraceTracer.DDtraceTracer(traceSampled);
      break;
    case _browserCore.TraceType.SKYWALKING_V3:
      tracer = new _skywalkingTracer.SkyWalkingTracer(configuration, context.url, traceSampled);
      break;
    case _browserCore.TraceType.ZIPKIN_MULTI_HEADER:
      tracer = new _zipkinMultiTracer.ZipkinMultiTracer(configuration, traceSampled);
      break;
    case _browserCore.TraceType.JAEGER:
      tracer = new _jaegerTracer.JaegerTracer(configuration, traceSampled);
      break;
    case _browserCore.TraceType.W3C_TRACEPARENT:
      tracer = new _w3cTraceParentTracer.W3cTraceParentTracer(traceSampled);
      break;
    case _browserCore.TraceType.W3C_TRACEPARENT_64:
      tracer = new _w3cTraceParentTracer.W3cTraceParentTracer(traceSampled, true);
      break;
    case _browserCore.TraceType.ZIPKIN_SINGLE_HEADER:
      tracer = new _zipkinSingleTracer.ZipkinSingleTracer(configuration, traceSampled);
      break;
    default:
      break;
  }
  if (!tracer || !tracer.isTracingSupported()) {
    return;
  }
  context.traceId = tracer.getTraceId();
  context.spanId = tracer.getSpanId();
  context.traceSampled = traceSampled;
  inject(tracer.makeTracingHeaders());
}
//# sourceMappingURL=tracer.js.map