"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZipkinMultiTracer = ZipkinMultiTracer;
var _traceIdentifier = require("./traceIdentifier");
/**
 *
 * @param {*} configuration  配置信息
 */
function ZipkinMultiTracer(configuration, traceSampled) {
  this._traceId = new _traceIdentifier.TraceIdentifier();
  this._spanId = new _traceIdentifier.TraceIdentifier();
  this._traceSampled = traceSampled;
  this.is128Bit = configuration.traceId128Bit;
}
ZipkinMultiTracer.prototype = {
  isTracingSupported: function isTracingSupported() {
    return (0, _traceIdentifier.getCrypto)() !== undefined;
  },
  getSpanId: function getSpanId() {
    return this._spanId.toPaddedHexadecimalString();
  },
  getTraceId: function getTraceId() {
    return this.is128Bit ? '0000000000000000' + this._traceId.toPaddedHexadecimalString() : this._traceId.toPaddedHexadecimalString();
  },
  makeTracingHeaders: function makeTracingHeaders() {
    return {
      'X-B3-TraceId': this.getSpanId(),
      'X-B3-SpanId': this.getTraceId(),
      //  'X-B3-ParentSpanId': '',
      'X-B3-Sampled': this._traceSampled ? '1' : '0'
      //  'X-B3-Flags': '0'
    };
  }
};
//# sourceMappingURL=zipkinMultiTracer.js.map