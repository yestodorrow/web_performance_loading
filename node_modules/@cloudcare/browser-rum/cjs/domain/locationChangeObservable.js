"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLocationChangeObservable = createLocationChangeObservable;
var _browserCore = require("@cloudcare/browser-core");
function createLocationChangeObservable(location) {
  var currentLocation = (0, _browserCore.shallowClone)(location);
  return new _browserCore.Observable(function (observable) {
    var _trackHistory = trackHistory(onLocationChange);
    var _trackHash = trackHash(onLocationChange);
    function onLocationChange() {
      if (currentLocation.href === location.href) {
        return;
      }
      var newLocation = (0, _browserCore.shallowClone)(location);
      observable.notify({
        newLocation: newLocation,
        oldLocation: currentLocation
      });
      currentLocation = newLocation;
    }
    return function () {
      _trackHistory.stop();
      _trackHash.stop();
    };
  });
}
function trackHistory(onHistoryChange) {
  // eslint-disable-next-line @typescript-eslint/unbound-method
  var pushState = (0, _browserCore.instrumentMethodAndCallOriginal)(history, 'pushState', {
    after: onHistoryChange
  });
  var replaceState = (0, _browserCore.instrumentMethodAndCallOriginal)(history, 'replaceState', {
    after: onHistoryChange
  });
  var popState = (0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.POP_STATE, onHistoryChange);
  return {
    stop: function stop() {
      pushState.stop();
      replaceState.stop();
      popState.stop();
    }
  };
}
function trackHash(onHashChange) {
  return (0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.HASH_CHANGE, onHashChange);
}
//# sourceMappingURL=locationChangeObservable.js.map