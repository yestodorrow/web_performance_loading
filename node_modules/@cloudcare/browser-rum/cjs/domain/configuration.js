"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateAndBuildRumConfiguration = validateAndBuildRumConfiguration;
var _browserCore = require("@cloudcare/browser-core");
var _buildEnv = require("../boot/buildEnv");
var _tracer = require("../domain/tracing/tracer");
function validateAndBuildRumConfiguration(initConfiguration) {
  if (!initConfiguration.applicationId) {
    _browserCore.display.error('Application ID is not configured, no RUM data will be collected.');
    return;
  }
  var requireParamsValidate = (0, _browserCore.validatePostRequestRequireParamsConfiguration)(initConfiguration);
  if (!requireParamsValidate) return;
  // TODO remove fallback in next major
  if (initConfiguration.sessionReplaySampleRate !== undefined && !(0, _browserCore.isPercentage)(initConfiguration.sessionReplaySampleRate)) {
    _browserCore.display.error('Premium Sample Rate should be a number between 0 and 100');
    return;
  }
  var allowedTracingUrls = validateAndBuildTracingOptions(initConfiguration);
  if (!allowedTracingUrls) {
    return;
  }
  //   if (initConfiguration.allowedTracingOrigins !== undefined) {
  //     if (!isArray(initConfiguration.allowedTracingOrigins)) {
  //       display.error('Allowed Tracing Origins should be an array')
  //       return
  //     }
  //   }
  //   if (initConfiguration.allowedDDTracingOrigins !== undefined) {
  //     if (!isArray(initConfiguration.allowedDDTracingOrigins)) {
  //       display.error('Allowed Tracing Origins should be an array')
  //       return
  //     }
  //   }
  if (initConfiguration.tracingSampleRate !== undefined && !(0, _browserCore.isPercentage)(initConfiguration.tracingSampleRate)) {
    _browserCore.display.error('Tracing Sample Rate should be a number between 0 and 100');
    return;
  }
  if (initConfiguration.excludedActivityUrls !== undefined && !(0, _browserCore.isArray)(initConfiguration.excludedActivityUrls)) {
    _browserCore.display.error('Excluded Activity Urls should be an array');
    return;
  }
  var baseConfiguration = (0, _browserCore.validateAndBuildConfiguration)(initConfiguration);
  if (!baseConfiguration) {
    return;
  }
  var trackUserInteractions = !!(0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.trackUserInteractions, initConfiguration.trackInteractions);
  return (0, _browserCore.assign)({
    applicationId: initConfiguration.applicationId,
    actionNameAttribute: initConfiguration.actionNameAttribute,
    sessionReplaySampleRate: (0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.sessionReplaySampleRate, 100),
    tracingSampleRate: initConfiguration.tracingSampleRate,
    allowedTracingUrls: allowedTracingUrls,
    excludedActivityUrls: (0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.excludedActivityUrls, []),
    trackUserInteractions: trackUserInteractions,
    trackViewsManually: !!initConfiguration.trackViewsManually,
    traceType: (0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.traceType, _browserCore.TraceType.DDTRACE),
    traceId128Bit: !!initConfiguration.traceId128Bit,
    defaultPrivacyLevel: (0, _browserCore.objectHasValue)(_browserCore.DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel) ? initConfiguration.defaultPrivacyLevel : _browserCore.DefaultPrivacyLevel.MASK_USER_INPUT
  }, baseConfiguration, _buildEnv.buildEnv);
}
/**
 * Handles allowedTracingUrls and processes legacy allowedTracingOrigins
 */
function validateAndBuildTracingOptions(initConfiguration) {
  // Advise about parameters precedence.
  if (initConfiguration.allowedTracingUrls !== undefined && initConfiguration.allowedTracingOrigins !== undefined) {
    _browserCore.display.warn('Both allowedTracingUrls and allowedTracingOrigins (deprecated) have been defined. The parameter allowedTracingUrls will override allowedTracingOrigins.');
  }
  // Handle allowedTracingUrls first
  if (initConfiguration.allowedTracingUrls !== undefined) {
    if (!(0, _browserCore.isArray)(initConfiguration.allowedTracingUrls)) {
      _browserCore.display.error('Allowed Tracing URLs should be an array');
      return;
    }
    // if (initConfiguration.allowedTracingUrls.length !== 0 && initConfiguration.service === undefined) {
    //   display.error('Service needs to be configured when tracing is enabled')
    //   return
    // }
    // Convert from (MatchOption | TracingOption) to TracingOption, remove unknown properties
    var tracingOptions = [];
    (0, _browserCore.each)(initConfiguration.allowedTracingUrls, function (option) {
      if ((0, _browserCore.isMatchOption)(option)) {
        tracingOptions.push({
          match: option,
          traceType: (0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.traceType, _browserCore.TraceType.DDTRACE)
        });
      } else if ((0, _tracer.isTracingOption)(option)) {
        tracingOptions.push(option);
      } else {
        _browserCore.display.warn('Allowed Tracing Urls parameters should be a string, RegExp, function, or an object. Ignoring parameter', option);
      }
    });
    return tracingOptions;
  }

  // Handle conversion of allowedTracingOrigins to allowedTracingUrls
  if (initConfiguration.allowedTracingOrigins !== undefined) {
    if (!(0, _browserCore.isArray)(initConfiguration.allowedTracingOrigins)) {
      _browserCore.display.error('Allowed Tracing Origins should be an array');
      return;
    }
    var tracingOptions = [];
    (0, _browserCore.each)(initConfiguration.allowedTracingOrigins, function (legacyMatchOption) {
      var tracingOption = convertLegacyMatchOptionToTracingOption(legacyMatchOption, (0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.traceType, _browserCore.TraceType.DDTRACE));
      if (tracingOption) {
        tracingOptions.push(tracingOption);
      }
    });
    return tracingOptions;
  }
  // Handle conversion of allowedDDTracingOrigins to allowedTracingUrls
  if (initConfiguration.allowedDDTracingOrigins !== undefined) {
    if (!(0, _browserCore.isArray)(initConfiguration.allowedDDTracingOrigins)) {
      _browserCore.display.error('Allowed Tracing Origins should be an array');
      return;
    }
    var tracingOptions = [];
    (0, _browserCore.each)(initConfiguration.allowedDDTracingOrigins, function (legacyMatchOption) {
      var tracingOption = convertLegacyMatchOptionToTracingOption(legacyMatchOption, (0, _browserCore.isNullUndefinedDefaultValue)(initConfiguration.traceType, _browserCore.TraceType.DDTRACE));
      if (tracingOption) {
        tracingOptions.push(tracingOption);
      }
    });
    return tracingOptions;
  }
  return [];
}

/**
 * Converts parameters from the deprecated allowedTracingOrigins
 * to allowedTracingUrls. Handles the change from origin to full URLs.
 */
function convertLegacyMatchOptionToTracingOption(item, traceType) {
  var match;
  if (typeof item === 'string') {
    match = item;
  } else if (item instanceof RegExp) {
    match = function match(url) {
      return item.test((0, _browserCore.getOrigin)(url));
    };
  } else if (typeof item === 'function') {
    match = function match(url) {
      return item((0, _browserCore.getOrigin)(url));
    };
  }
  if (match === undefined) {
    _browserCore.display.warn('Allowed Tracing Origins parameters should be a string, RegExp or function. Ignoring parameter', item);
    return undefined;
  }
  return {
    match: match,
    traceType: traceType
  };
}
//# sourceMappingURL=configuration.js.map