"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startResourceCollection = startResourceCollection;
var _browserCore = require("@cloudcare/browser-core");
var _matchRequestTiming = require("./matchRequestTiming");
var _resourceUtils = require("./resourceUtils");
var _pageStateHistory = require("../../contexts/pageStateHistory.js");
function startResourceCollection(lifeCycle, configuration, sessionManager, pageStateHistory) {
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.REQUEST_COMPLETED, function (request) {
    var rawEvent = processRequest(request, configuration, sessionManager, pageStateHistory);
    if (rawEvent) {
      lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, rawEvent);
    }
  });
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED, function (entries) {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      if (entry.entryType === 'resource' && !(0, _resourceUtils.isRequestKind)(entry) && !(0, _resourceUtils.isResourceUrlLimit)(entry.name, configuration.resourceUrlLimit)) {
        var rawEvent = processResourceEntry(entry, configuration, sessionManager, pageStateHistory);
        if (rawEvent) {
          lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, rawEvent);
        }
      }
    }
  });
}
function processRequest(request, configuration, sessionManager, pageStateHistory) {
  var matchingTiming = (0, _matchRequestTiming.matchRequestTiming)(request);
  var startClocks = matchingTiming ? (0, _browserCore.relativeToClocks)(matchingTiming.startTime) : request.startClocks;
  var shouldIndex = shouldIndexResource(configuration, sessionManager, startClocks);
  var tracingInfo = computeRequestTracingInfo(request);
  if (!shouldIndex && !tracingInfo) {
    return;
  }
  var type = request.type === _browserCore.RequestType.XHR ? _browserCore.ResourceType.XHR : _browserCore.ResourceType.FETCH;
  var correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined;
  var duration = computeRequestDuration(pageStateHistory, startClocks, request.duration);
  var pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, (0, _browserCore.isNullUndefinedDefaultValue)(matchingTiming && matchingTiming.duration, request.duration));
  var urlObj = (0, _browserCore.urlParse)(request.url).getParse();
  var resourceEvent = (0, _browserCore.extend2Lev)({
    date: startClocks.timeStamp,
    resource: {
      id: _browserCore.UUID,
      type: type,
      duration: duration,
      method: request.method,
      status: request.status,
      statusGroup: (0, _browserCore.getStatusGroup)(request.status),
      url: (0, _resourceUtils.isLongDataUrl)(request.url) ? (0, _resourceUtils.sanitizeDataUrl)(request.url) : request.url,
      urlHost: urlObj.Host,
      urlPath: urlObj.Path,
      urlPathGroup: (0, _browserCore.replaceNumberCharByPath)(urlObj.Path),
      urlQuery: (0, _browserCore.getQueryParamsFromUrl)(request.url)
    },
    type: _browserCore.RumEventType.RESOURCE
  }, tracingInfo, correspondingTimingOverrides, pageStateInfo);
  return {
    startTime: startClocks.relative,
    rawRumEvent: resourceEvent,
    domainContext: {
      performanceEntry: matchingTiming,
      xhr: request.xhr,
      response: request.response,
      requestInput: request.input,
      requestInit: request.init,
      error: request.error
    }
  };
}
function processResourceEntry(entry, configuration, sessionManager, pageStateHistory) {
  var startClocks = (0, _browserCore.relativeToClocks)(entry.startTime);
  var shouldIndex = shouldIndexResource(configuration, sessionManager, startClocks);
  var tracingInfo = computeEntryTracingInfo(entry);
  if (!shouldIndex && !tracingInfo) {
    return;
  }
  var type = (0, _resourceUtils.computeResourceKind)(entry);
  var entryMetrics = computePerformanceEntryMetrics(entry);
  var urlObj = (0, _browserCore.urlParse)(entry.name).getParse();
  var statusCode = '';
  if (entry.responseStatus !== 0) {
    statusCode = entry.responseStatus;
  } else if ((0, _resourceUtils.is304)(entry)) {
    statusCode = 304;
  } else if ((0, _resourceUtils.isCacheHit)(entry)) {
    statusCode = 200;
  }
  var pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, entry.duration);
  var resourceEvent = (0, _browserCore.extend2Lev)({
    date: startClocks.timeStamp,
    resource: {
      id: (0, _browserCore.UUID)(),
      type: type,
      url: entry.name,
      urlHost: urlObj.Host,
      urlPath: urlObj.Path,
      urlPathGroup: (0, _browserCore.replaceNumberCharByPath)(urlObj.Path),
      urlQuery: (0, _browserCore.getQueryParamsFromUrl)(entry.name),
      method: 'GET',
      status: statusCode,
      statusGroup: (0, _browserCore.getStatusGroup)(statusCode)
    },
    type: _browserCore.RumEventType.RESOURCE
  }, tracingInfo, entryMetrics, pageStateInfo);
  return {
    startTime: startClocks.relative,
    rawRumEvent: resourceEvent,
    domainContext: {
      performanceEntry: entry
    }
  };
}
function shouldIndexResource(configuration, sessionManager, resourceStart) {
  return sessionManager.findTrackedSession(resourceStart.relative);
}
function computePerformanceEntryMetrics(timing) {
  return {
    resource: (0, _browserCore.extend2Lev)({}, {
      duration: (0, _resourceUtils.computePerformanceResourceDuration)(timing)
    }, (0, _resourceUtils.computeSize)(timing), (0, _resourceUtils.computePerformanceResourceDetails)(timing))
  };
}
function computeRequestTracingInfo(request) {
  var hasBeenTraced = request.traceSampled && request.traceId && request.spanId;
  if (!hasBeenTraced) {
    return undefined;
  }
  return {
    _gc: {
      spanId: request.spanId,
      traceId: request.traceId
    },
    resource: {
      id: (0, _browserCore.UUID)()
    }
  };
}
function computePageStateInfo(pageStateHistory, startClocks, duration) {
  return {
    _gc: {
      page_states: pageStateHistory.findAll(startClocks.relative, duration),
      page_was_discarded: String(document.wasDiscarded)
    }
  };
}
function computeRequestDuration(pageStateHistory, startClocks, duration) {
  var requestCrosseds = pageStateHistory.findAll(startClocks.relative, duration);
  var requestCrossedFrozenState;
  if (requestCrosseds) {
    requestCrossedFrozenState = (0, _browserCore.some)(requestCrosseds, function (pageState) {
      return pageState.state === _pageStateHistory.PageState.FROZEN;
    });
  }
  return !requestCrossedFrozenState ? (0, _browserCore.toServerDuration)(duration) : undefined;
}
function computeEntryTracingInfo(entry) {
  return entry.traceId ? {
    _gc: {
      traceId: entry.traceId
    }
  } : undefined;
}
//# sourceMappingURL=resourceCollection.js.map