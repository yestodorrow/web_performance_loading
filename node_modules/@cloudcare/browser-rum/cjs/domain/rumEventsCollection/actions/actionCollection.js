"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startActionCollection = startActionCollection;
var _browserCore = require("@cloudcare/browser-core");
var _trackClickActions = require("./trackClickActions");
function startActionCollection(lifeCycle, domMutationObservable, configuration, pageStateHistory) {
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.AUTO_ACTION_COMPLETED, function (action) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processAction(action, pageStateHistory));
  });
  var actionContexts = {
    findActionId: _browserCore.noop,
    findAllActionId: _browserCore.noop
  };
  if (configuration.trackUserInteractions) {
    actionContexts = (0, _trackClickActions.trackClickActions)(lifeCycle, domMutationObservable, configuration).actionContexts;
  }
  return {
    actionContexts: actionContexts,
    addAction: function addAction(action, savedCommonContext) {
      lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, (0, _browserCore.extend)({
        savedCommonContext: savedCommonContext
      }, processAction(action, pageStateHistory)));
    }
  };
}
function processAction(action, pageStateHistory) {
  var autoActionProperties = isAutoAction(action) ? {
    action: {
      error: {
        count: action.counts.errorCount
      },
      id: action.id,
      loadingTime: (0, _browserCore.toServerDuration)(action.duration),
      frustration: {
        type: action.frustrationTypes
      },
      long_task: {
        count: action.counts.longTaskCount
      },
      resource: {
        count: action.counts.resourceCount
      }
    },
    _gc: {
      action: {
        target: action.target,
        position: action.position
      }
    }
  } : {
    action: {
      loadingTime: 0
    }
  };
  var customerContext = !isAutoAction(action) ? action.context : undefined;
  var actionEvent = (0, _browserCore.extend2Lev)({
    action: {
      id: (0, _browserCore.UUID)(),
      target: {
        name: action.name
      },
      type: action.type
    },
    date: action.startClocks.timeStamp,
    type: _browserCore.RumEventType.ACTION,
    view: {
      in_foreground: pageStateHistory.isInActivePageStateAt(action.startClocks.relative)
    }
  }, autoActionProperties);
  return {
    customerContext: customerContext,
    rawRumEvent: actionEvent,
    startTime: action.startClocks.relative,
    domainContext: isAutoAction(action) ? {
      event: action.event,
      events: action.events
    } : {}
  };
}
function isAutoAction(action) {
  return action.type !== _browserCore.ActionType.CUSTOM;
}
//# sourceMappingURL=actionCollection.js.map