"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listenActionEvents = listenActionEvents;
var _browserCore = require("@cloudcare/browser-core");
function listenActionEvents(events) {
  var selectionEmptyAtPointerDown;
  var userActivity = {
    selection: false,
    input: false,
    scroll: false
  };
  var clickContext;
  var listeners = [(0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.POINTER_DOWN, function (event) {
    if (isValidPointerEvent(event)) {
      selectionEmptyAtPointerDown = isSelectionEmpty();
      userActivity = {
        selection: false,
        input: false,
        scroll: false
      };
      clickContext = events.onPointerDown(event);
    }
  }, {
    capture: true
  }), (0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.SELECTION_CHANGE, function () {
    if (!selectionEmptyAtPointerDown || !isSelectionEmpty()) {
      userActivity.selection = true;
    }
  }, {
    capture: true
  }), (0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.POINTER_UP, function (event) {
    if (isValidPointerEvent(event) && clickContext) {
      // Use a scoped variable to make sure the value is not changed by other clicks
      var localUserActivity = userActivity;
      events.onPointerUp(clickContext, event, function () {
        return localUserActivity;
      });
      clickContext = undefined;
    }
  }, {
    capture: true
  }), (0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.SCROLL, function () {
    userActivity.scroll = true;
  }, {
    capture: true,
    passive: true
  }), (0, _browserCore.addEventListener)(window, _browserCore.DOM_EVENT.INPUT, function () {
    userActivity.input = true;
  }, {
    capture: true
  })];
  return {
    stop: function stop() {
      (0, _browserCore.each)(listeners, function (listener) {
        return listener.stop();
      });
    }
  };
}
function isSelectionEmpty() {
  var selection = window.getSelection();
  return !selection || selection.isCollapsed;
}
function isValidPointerEvent(event) {
  return event.target instanceof Element &&
  // Only consider 'primary' pointer events for now. Multi-touch support could be implemented in
  // the future.
  event.isPrimary !== false;
}
//# sourceMappingURL=listenActionEvents.js.map