"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doStartErrorCollection = doStartErrorCollection;
exports.startErrorCollection = startErrorCollection;
var _browserCore = require("@cloudcare/browser-core");
var _trackConsoleError = require("./trackConsoleError");
var _trackReportError = require("./trackReportError");
function startErrorCollection(lifeCycle, configuration, pageStateHistory) {
  var errorObservable = new _browserCore.Observable();
  (0, _trackConsoleError.trackConsoleError)(errorObservable);
  (0, _browserCore.trackRuntimeError)(errorObservable);
  (0, _trackReportError.trackReportError)(configuration, errorObservable);
  errorObservable.subscribe(function (error) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_ERROR_COLLECTED, {
      error: error
    });
  });
  return doStartErrorCollection(lifeCycle, pageStateHistory);
}
function doStartErrorCollection(lifeCycle, pageStateHistory) {
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.RAW_ERROR_COLLECTED, function (error) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, (0, _browserCore.assign)({
      customerContext: error.customerContext,
      savedCommonContext: error.savedCommonContext
    }, processError(error.error, pageStateHistory)));
  });
  return {
    addError: function addError(providedError, savedCommonContext) {
      var error = providedError.error;
      var stackTrace = error instanceof Error ? (0, _browserCore.computeStackTrace)(error) : undefined;
      var rawError = (0, _browserCore.computeRawError)({
        stackTrace: stackTrace,
        originalError: error,
        handlingStack: providedError.handlingStack,
        startClocks: providedError.startClocks,
        nonErrorPrefix: _browserCore.NonErrorPrefix.PROVIDED,
        source: _browserCore.ErrorSource.CUSTOM,
        handling: _browserCore.ErrorHandling.HANDLED
      });
      lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_ERROR_COLLECTED, {
        customerContext: providedError.context,
        savedCommonContext: savedCommonContext,
        error: rawError
      });
    }
  };
}
function processError(error, pageStateHistory) {
  var rawRumEvent = {
    date: error.startClocks.timeStamp,
    error: {
      id: (0, _browserCore.UUID)(),
      message: error.message,
      source: error.source,
      stack: error.stack,
      handling_stack: error.handlingStack,
      type: error.type,
      handling: error.handling,
      causes: error.causes,
      source_type: 'browser'
    },
    type: _browserCore.RumEventType.ERROR,
    view: {
      in_foreground: pageStateHistory.isInActivePageStateAt(error.startClocks.relative)
    }
  };
  return {
    rawRumEvent: rawRumEvent,
    startTime: error.startClocks.relative,
    domainContext: {
      error: error.originalError
    }
  };
}
//# sourceMappingURL=errorCollection.js.map