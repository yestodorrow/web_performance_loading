"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trackLoadingTime = trackLoadingTime;
var _browserCore = require("@cloudcare/browser-core");
var _waitPageActivityEnd2 = require("../../waitPageActivityEnd");
function trackLoadingTime(lifeCycle, domMutationObservable, configuration, loadType, viewStart, callback) {
  var isWaitingForLoadEvent = loadType === _browserCore.ViewLoadingType.INITIAL_LOAD;
  var isWaitingForActivityLoadingTime = true;
  var loadingTimeCandidates = [];
  function invokeCallbackIfAllCandidatesAreReceived() {
    if (!isWaitingForActivityLoadingTime && !isWaitingForLoadEvent && loadingTimeCandidates.length > 0) {
      callback(Math.max.apply(Math, loadingTimeCandidates));
    }
  }
  function stopEndCallback() {
    if (loadingTimeCandidates.length > 0) {
      callback(Math.max.apply(Math, loadingTimeCandidates));
    }
  }
  var _waitPageActivityEnd = (0, _waitPageActivityEnd2.waitPageActivityEnd)(lifeCycle, domMutationObservable, configuration, function (event) {
    if (isWaitingForActivityLoadingTime) {
      isWaitingForActivityLoadingTime = false;
      if (event.hadActivity) {
        loadingTimeCandidates.push((0, _browserCore.elapsed)(viewStart.timeStamp, event.end));
      }
      invokeCallbackIfAllCandidatesAreReceived();
    }
  });
  var _stop = _waitPageActivityEnd.stop;
  return {
    setLoadEvent: function setLoadEvent(loadEvent) {
      if (isWaitingForLoadEvent) {
        isWaitingForLoadEvent = false;
        loadingTimeCandidates.push(loadEvent);
        invokeCallbackIfAllCandidatesAreReceived();
      }
    },
    stop: function stop() {
      _stop();
      stopEndCallback();
    }
  };
}
//# sourceMappingURL=trackLoadingTime.js.map