"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startViewCollection = startViewCollection;
var _browserCore = require("@cloudcare/browser-core");
var _trackViews = require("./trackViews");
function startViewCollection(lifeCycle, configuration, location, domMutationObservable, locationChangeObservable, pageStateHistory, recorderApi, initialViewOptions) {
  lifeCycle.subscribe(_browserCore.LifeCycleEventType.VIEW_UPDATED, function (view) {
    lifeCycle.notify(_browserCore.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processViewUpdate(view, configuration, recorderApi, pageStateHistory));
  });
  return (0, _trackViews.trackViews)(location, lifeCycle, domMutationObservable, configuration, locationChangeObservable, !configuration.trackViewsManually, initialViewOptions);
}
function computePerformanceViewDetails(navigationTimings) {
  if (!navigationTimings) {
    return undefined;
  }
  var fetchStart = navigationTimings.fetchStart,
    responseEnd = navigationTimings.responseEnd,
    domInteractive = navigationTimings.domInteractive,
    domContentLoaded = navigationTimings.domContentLoaded,
    domComplete = navigationTimings.domComplete,
    loadEventEnd = navigationTimings.loadEventEnd,
    loadEventStart = navigationTimings.loadEventStart,
    domContentLoadedEventEnd = navigationTimings.domContentLoadedEventEnd;
  var details = {};
  if ((0, _browserCore.isNumber)(responseEnd) && (0, _browserCore.isNumber)(fetchStart) && responseEnd !== fetchStart) {
    details.fpt = (0, _browserCore.toServerDuration)(responseEnd - fetchStart);
    var apdexLevel = parseInt((responseEnd - fetchStart) / 1000); // 秒数取整
    details.apdexLevel = apdexLevel > 9 ? 9 : apdexLevel;
  }
  if ((0, _browserCore.isNumber)(domInteractive) && (0, _browserCore.isNumber)(fetchStart) && domInteractive !== fetchStart) {
    details.tti = (0, _browserCore.toServerDuration)(domInteractive - fetchStart);
  }
  if ((0, _browserCore.isNumber)(domContentLoaded) && (0, _browserCore.isNumber)(fetchStart) && domContentLoaded !== fetchStart) {
    details.dom_ready = (0, _browserCore.toServerDuration)(domContentLoaded - fetchStart);
  }
  // Make sure a connection occurred
  if ((0, _browserCore.isNumber)(loadEventEnd) && (0, _browserCore.isNumber)(fetchStart) && loadEventEnd !== fetchStart) {
    details.load = (0, _browserCore.toServerDuration)(loadEventEnd - fetchStart);
  }
  if ((0, _browserCore.isNumber)(loadEventStart) && (0, _browserCore.isNumber)(domContentLoadedEventEnd) && loadEventStart !== domContentLoadedEventEnd) {
    details.resource_load_time = (0, _browserCore.toServerDuration)(loadEventStart - domContentLoadedEventEnd);
  }
  if ((0, _browserCore.isNumber)(domComplete) && (0, _browserCore.isNumber)(domInteractive) && domComplete !== domInteractive) {
    details.dom = (0, _browserCore.toServerDuration)(domComplete - domInteractive);
  }
  return details;
}
function processViewUpdate(view, configuration, recorderApi, pageStateHistory) {
  var replayStats = recorderApi.getReplayStats(view.id);
  var pageStates = pageStateHistory.findAll(view.startClocks.relative, view.duration);
  var viewEvent = {
    _gc: {
      document_version: view.documentVersion,
      replay_stats: replayStats,
      page_states: pageStates
    },
    date: view.startClocks.timeStamp,
    type: _browserCore.RumEventType.VIEW,
    view: {
      action: {
        count: view.eventCounts.actionCount
      },
      frustration: {
        count: view.eventCounts.frustrationCount
      },
      cumulative_layout_shift: (0, _browserCore.findByPath)(view.commonViewMetrics, 'cumulativeLayoutShift.value'),
      cumulative_layout_shift_target_selector: (0, _browserCore.findByPath)(view.commonViewMetrics, 'cumulativeLayoutShift.targetSelector'),
      first_byte: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'navigationTimings.firstByte')),
      dom_complete: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'navigationTimings.domComplete')),
      dom_content_loaded: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'navigationTimings.domContentLoaded')),
      dom_interactive: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'navigationTimings.domInteractive')),
      error: {
        count: view.eventCounts.errorCount
      },
      first_contentful_paint: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'firstContentfulPaint')),
      first_input_delay: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'firstInput.delay')),
      first_input_time: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'firstInput.time')),
      first_input_target_selector: (0, _browserCore.findByPath)(view.initialViewMetrics, 'firstInput.targetSelector'),
      interaction_to_next_paint: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.commonViewMetrics, 'interactionToNextPaint.value')),
      interaction_to_next_paint_target_selector: (0, _browserCore.findByPath)(view.commonViewMetrics, 'interactionToNextPaint.targetSelector'),
      is_active: view.isActive,
      name: view.name,
      largest_contentful_paint: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'largestContentfulPaint.value')),
      largest_contentful_paint_element_selector: (0, _browserCore.findByPath)(view.initialViewMetrics, 'largestContentfulPaint.targetSelector'),
      load_event: (0, _browserCore.toServerDuration)((0, _browserCore.findByPath)(view.initialViewMetrics, 'navigationTimings.loadEvent')),
      loading_time: discardNegativeDuration((0, _browserCore.toServerDuration)(view.commonViewMetrics.loadingTime)),
      loading_type: view.loadingType,
      long_task: {
        count: view.eventCounts.longTaskCount
      },
      resource: {
        count: view.eventCounts.resourceCount
      },
      time_spent: (0, _browserCore.toServerDuration)(view.duration)
    },
    display: view.commonViewMetrics.scroll ? {
      scroll: {
        max_depth: view.commonViewMetrics.scroll.maxDepth,
        max_depth_scroll_top: view.commonViewMetrics.scroll.maxDepthScrollTop,
        max_scroll_height: view.commonViewMetrics.scroll.maxScrollHeight,
        max_scroll_height_time: (0, _browserCore.toServerDuration)(view.commonViewMetrics.scroll.maxScrollHeightTime)
      }
    } : undefined,
    session: {
      has_replay: replayStats ? true : undefined,
      is_active: view.sessionIsActive ? undefined : false
    },
    privacy: {
      replay_level: configuration.defaultPrivacyLevel
    }
  };
  if (!(0, _browserCore.isEmptyObject)(view.customTimings)) {
    viewEvent.view.custom_timings = (0, _browserCore.mapValues)(view.customTimings, _browserCore.toServerDuration);
  }
  viewEvent = (0, _browserCore.extend2Lev)(viewEvent, {
    view: computePerformanceViewDetails(view.initialViewMetrics.navigationTimings)
  });
  return {
    rawRumEvent: viewEvent,
    startTime: view.startClocks.relative,
    domainContext: {
      location: view.location
    }
  };
}
function discardNegativeDuration(duration) {
  return (0, _browserCore.isNumber)(duration) && duration < 0 ? undefined : duration;
}
//# sourceMappingURL=viewCollection.js.map