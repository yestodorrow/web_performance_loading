"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.THROTTLE_VIEW_UPDATE_PERIOD = exports.SESSION_KEEP_ALIVE_INTERVAL = exports.KEEP_TRACKING_AFTER_VIEW_DELAY = void 0;
exports.trackViews = trackViews;
var _browserCore = require("@cloudcare/browser-core");
var _trackInitialViewTimings2 = require("./trackInitialViewTimings");
var _trackCommonViewMetrics2 = require("./trackCommonViewMetrics");
var _trackViewEventCounts2 = require("./trackViewEventCounts");
var THROTTLE_VIEW_UPDATE_PERIOD = 3000;
exports.THROTTLE_VIEW_UPDATE_PERIOD = THROTTLE_VIEW_UPDATE_PERIOD;
var SESSION_KEEP_ALIVE_INTERVAL = 5 * _browserCore.ONE_MINUTE;
exports.SESSION_KEEP_ALIVE_INTERVAL = SESSION_KEEP_ALIVE_INTERVAL;
var KEEP_TRACKING_AFTER_VIEW_DELAY = 5 * _browserCore.ONE_MINUTE;
exports.KEEP_TRACKING_AFTER_VIEW_DELAY = KEEP_TRACKING_AFTER_VIEW_DELAY;
function trackViews(location, lifeCycle, domMutationObservable, configuration, locationChangeObservable, areViewsTrackedAutomatically, initialViewOptions) {
  var activeViews = new Set();
  function startNewView(loadingType, startClocks, viewOptions) {
    var newlyCreatedView = newView(lifeCycle, domMutationObservable, configuration, location, loadingType, startClocks, viewOptions);
    activeViews.add(newlyCreatedView);
    newlyCreatedView.stopObservable.subscribe(function () {
      activeViews["delete"](newlyCreatedView);
    });
    return newlyCreatedView;
  }
  var currentView = startNewView(_browserCore.ViewLoadingType.INITIAL_LOAD, (0, _browserCore.clocksOrigin)(), initialViewOptions);
  startViewLifeCycle();
  var locationChangeSubscription;
  if (areViewsTrackedAutomatically) {
    locationChangeSubscription = renewViewOnLocationChange(locationChangeObservable);
  }
  function startViewLifeCycle() {
    lifeCycle.subscribe(_browserCore.LifeCycleEventType.SESSION_RENEWED, function () {
      currentView = startNewView(_browserCore.ViewLoadingType.ROUTE_CHANGE, undefined, {
        name: currentView.name,
        service: currentView.service,
        version: currentView.version
      });
    });
    lifeCycle.subscribe(_browserCore.LifeCycleEventType.SESSION_EXPIRED, function () {
      currentView.end({
        sessionIsActive: false
      });
    });
    // End the current view on page unload
    lifeCycle.subscribe(_browserCore.LifeCycleEventType.PAGE_EXITED, function (pageExitEvent) {
      if (pageExitEvent.reason === _browserCore.PageExitReason.UNLOADING || pageExitEvent.reason === _browserCore.PageExitReason.PAGEHIDE) {
        currentView.end();
      }
    });
  }
  function renewViewOnLocationChange(locationChangeObservable) {
    return locationChangeObservable.subscribe(function (params) {
      var oldLocation = params.oldLocation;
      var newLocation = params.newLocation;
      if (areDifferentLocation(oldLocation, newLocation)) {
        currentView.end();
        currentView = startNewView(_browserCore.ViewLoadingType.ROUTE_CHANGE);
        return;
      }
    });
  }
  return {
    addTiming: function addTiming(name, time) {
      if (typeof time === 'undefined') {
        time = (0, _browserCore.timeStampNow)();
      }
      currentView.addTiming(name, time);
    },
    startView: function startView(options, startClocks) {
      currentView.end({
        endClocks: startClocks
      });
      currentView = startNewView(_browserCore.ViewLoadingType.ROUTE_CHANGE, startClocks, options);
    },
    stop: function stop() {
      if (locationChangeSubscription) {
        locationChangeSubscription.unsubscribe();
      }
      currentView.end();
      activeViews.forEach(function (view) {
        view.stop();
      });
    }
  };
}
function newView(lifeCycle, domMutationObservable, configuration, initialLocation, loadingType, startClocks, viewOptions) {
  // Setup initial values
  if (typeof startClocks === 'undefined') {
    startClocks = (0, _browserCore.clocksNow)();
  }
  var id = (0, _browserCore.UUID)();
  var stopObservable = new _browserCore.Observable();
  var customTimings = {};
  var documentVersion = 0;
  var endClocks;
  var location = (0, _browserCore.shallowClone)(initialLocation);
  var sessionIsActive = true;
  var name;
  var service;
  var version;
  if (viewOptions) {
    name = viewOptions.name;
    service = viewOptions.service;
    version = viewOptions.version;
  }
  var viewCreatedEvent = {
    id: id,
    name: name,
    startClocks: startClocks,
    service: service,
    version: version
  };
  lifeCycle.notify(_browserCore.LifeCycleEventType.BEFORE_VIEW_CREATED, viewCreatedEvent);
  lifeCycle.notify(_browserCore.LifeCycleEventType.VIEW_CREATED, viewCreatedEvent);

  // Update the view every time the measures are changing
  var _scheduleViewUpdate = (0, _browserCore.throttle)(triggerViewUpdate, THROTTLE_VIEW_UPDATE_PERIOD, {
    leading: false
  });
  var scheduleViewUpdate = _scheduleViewUpdate.throttled;
  var cancelScheduleViewUpdate = _scheduleViewUpdate.cancel;
  var _trackCommonViewMetrics = (0, _trackCommonViewMetrics2.trackCommonViewMetrics)(lifeCycle, domMutationObservable, configuration, scheduleViewUpdate, loadingType, startClocks);
  var setLoadEvent = _trackCommonViewMetrics.setLoadEvent;
  var stopCommonViewMetricsTracking = _trackCommonViewMetrics.stop;
  var getCommonViewMetrics = _trackCommonViewMetrics.getCommonViewMetrics;
  var stopINPTracking = _trackCommonViewMetrics.stopINPTracking;
  var setViewEnd = _trackCommonViewMetrics.setViewEnd;
  var _trackInitialViewTimings = loadingType === _browserCore.ViewLoadingType.INITIAL_LOAD ? (0, _trackInitialViewTimings2.trackInitialViewMetrics)(lifeCycle, configuration, setLoadEvent, scheduleViewUpdate) : {
    stop: _browserCore.noop,
    initialViewMetrics: {}
  };
  var stopInitialViewMetricsTracking = _trackInitialViewTimings.stop;
  var initialViewMetrics = _trackInitialViewTimings.initialViewMetrics;
  var _trackViewEventCounts = (0, _trackViewEventCounts2.trackViewEventCounts)(lifeCycle, id, scheduleViewUpdate);
  var stopEventCountsTracking = _trackViewEventCounts.scheduleStop;
  var eventCounts = _trackViewEventCounts.eventCounts;

  // Session keep alive
  var keepAliveIntervalId = (0, _browserCore.setInterval)(triggerViewUpdate, SESSION_KEEP_ALIVE_INTERVAL);
  triggerViewUpdate();
  function triggerViewUpdate() {
    cancelScheduleViewUpdate();
    documentVersion += 1;
    var currentEnd = endClocks === undefined ? (0, _browserCore.timeStampNow)() : endClocks.timeStamp;
    lifeCycle.notify(_browserCore.LifeCycleEventType.VIEW_UPDATED, {
      customTimings: customTimings,
      documentVersion: documentVersion,
      id: id,
      name: name,
      service: service,
      version: version,
      loadingType: loadingType,
      location: location,
      startClocks: startClocks,
      commonViewMetrics: getCommonViewMetrics(),
      initialViewMetrics: initialViewMetrics,
      duration: (0, _browserCore.elapsed)(startClocks.timeStamp, currentEnd),
      isActive: endClocks === undefined,
      sessionIsActive: sessionIsActive,
      eventCounts: eventCounts
    });
  }
  var result = {
    name: name,
    service: service,
    version: version,
    stopObservable: stopObservable,
    end: function end(options) {
      if (endClocks) {
        // view already ended
        return;
      }
      endClocks = (0, _browserCore.isNullUndefinedDefaultValue)(options && options.endClocks, (0, _browserCore.clocksNow)());
      sessionIsActive = (0, _browserCore.isNullUndefinedDefaultValue)(options && options.sessionIsActive, true);
      lifeCycle.notify(_browserCore.LifeCycleEventType.VIEW_ENDED, {
        endClocks: endClocks
      });
      lifeCycle.notify(_browserCore.LifeCycleEventType.AFTER_VIEW_ENDED, {
        endClocks: endClocks
      });
      (0, _browserCore.clearInterval)(keepAliveIntervalId);
      setViewEnd(endClocks.relative);
      stopCommonViewMetricsTracking();
      triggerViewUpdate();
      (0, _browserCore.setTimeout)(function () {
        result.stop();
      }, KEEP_TRACKING_AFTER_VIEW_DELAY);
    },
    stop: function stop() {
      stopInitialViewMetricsTracking();
      stopEventCountsTracking();
      stopINPTracking();
      stopObservable.notify();
    },
    addTiming: function addTiming(name, time) {
      if (endClocks) {
        return;
      }
      var relativeTime = (0, _browserCore.looksLikeRelativeTime)(time) ? time : (0, _browserCore.elapsed)(startClocks.timeStamp, time);
      customTimings[sanitizeTiming(name)] = relativeTime;
      scheduleViewUpdate();
    }
  };
  return result;
}

/**
 * Timing name is used as facet path that must contain only letters, digits, or the characters - _ . @ $
 */
function sanitizeTiming(name) {
  var sanitized = name.replace(/[^a-zA-Z0-9-_.@$]/g, '_');
  if (sanitized !== name) {
    console.warn('Invalid timing name: ' + name + ', sanitized to: ' + sanitized);
  }
  return sanitized;
}
function areDifferentLocation(currentLocation, otherLocation) {
  return currentLocation.pathname !== otherLocation.pathname || !(0, _browserCore.isHashAnAnchor)(otherLocation.hash) && (0, _browserCore.getPathFromHash)(otherLocation.hash) !== (0, _browserCore.getPathFromHash)(currentLocation.hash);
}
//# sourceMappingURL=trackViews.js.map