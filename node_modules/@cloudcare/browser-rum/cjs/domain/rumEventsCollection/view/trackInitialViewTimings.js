"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KEEP_TRACKING_TIMINGS_AFTER_VIEW_DELAY = void 0;
exports.trackInitialViewMetrics = trackInitialViewMetrics;
var _browserCore = require("@cloudcare/browser-core");
var _trackFirstContentfulPaint2 = require("./trackFirstContentfulPaint");
var _trackFirstInput2 = require("./trackFirstInput");
var _trackNavigationTimings2 = require("./trackNavigationTimings");
var _trackLargestContentfulPaint2 = require("./trackLargestContentfulPaint");
var _trackFirstHidden = require("./trackFirstHidden");
var KEEP_TRACKING_TIMINGS_AFTER_VIEW_DELAY = 5 * _browserCore.ONE_MINUTE;
exports.KEEP_TRACKING_TIMINGS_AFTER_VIEW_DELAY = KEEP_TRACKING_TIMINGS_AFTER_VIEW_DELAY;
function trackInitialViewMetrics(lifeCycle, configuration, setLoadEvent, scheduleViewUpdate) {
  var initialViewMetrics = {};
  var _trackNavigationTimings = (0, _trackNavigationTimings2.trackNavigationTimings)(lifeCycle, function (navigationTimings) {
    setLoadEvent(navigationTimings.loadEvent);
    initialViewMetrics.navigationTimings = navigationTimings;
    scheduleViewUpdate();
  });
  var firstHidden = (0, _trackFirstHidden.trackFirstHidden)();
  var stopNavigationTracking = _trackNavigationTimings.stop;
  var _trackFirstContentfulPaint = (0, _trackFirstContentfulPaint2.trackFirstContentfulPaint)(lifeCycle, firstHidden, function (firstContentfulPaint) {
    initialViewMetrics.firstContentfulPaint = firstContentfulPaint;
    scheduleViewUpdate();
  });
  var stopFCPTracking = _trackFirstContentfulPaint.stop;
  var _trackLargestContentfulPaint = (0, _trackLargestContentfulPaint2.trackLargestContentfulPaint)(lifeCycle, configuration, firstHidden, window, function (largestContentfulPaint) {
    initialViewMetrics.largestContentfulPaint = largestContentfulPaint;
    scheduleViewUpdate();
  });
  var stopLCPTracking = _trackLargestContentfulPaint.stop;
  var _trackFirstInput = (0, _trackFirstInput2.trackFirstInput)(lifeCycle, configuration, firstHidden, function (firstInput) {
    initialViewMetrics.firstInput = firstInput;
    scheduleViewUpdate();
  });
  var stopFIDTracking = _trackFirstInput.stop;
  function stop() {
    stopNavigationTracking();
    stopFCPTracking();
    stopLCPTracking();
    stopFIDTracking();
    firstHidden.stop();
  }
  return {
    stop: stop,
    initialViewMetrics: initialViewMetrics
  };
}
//# sourceMappingURL=trackInitialViewTimings.js.map