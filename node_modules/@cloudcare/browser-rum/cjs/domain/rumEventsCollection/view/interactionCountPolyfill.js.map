{"version":3,"file":"interactionCountPolyfill.js","names":["_browserCore","require","observer","interactionCountEstimate","minKnownInteractionId","Infinity","maxKnownInteractionId","initInteractionCountPolyfill","performance","window","PerformanceObserver","monitor","entries","getEntries","forEach","e","entry","interactionId","Math","min","max","observe","type","buffered","durationThreshold","getInteractionCount","interactionCount","exports"],"sources":["../../../../src/domain/rumEventsCollection/view/interactionCountPolyfill.js"],"sourcesContent":["/**\n * performance.interactionCount polyfill\n *\n * The interactionCount is an integer which counts the total number of distinct user interactions,\n * for which there was a unique interactionId.\n *\n * The interactionCount polyfill is an estimate based on a convention specific to Chrome. Cf: https://github.com/GoogleChrome/web-vitals/pull/213\n * This is currently not an issue as the polyfill is only used for INP which is currently only supported on Chrome.\n * Hopefully when/if other browsers will support INP, they will also implement performance.interactionCount at the same time, so we won't need that polyfill.\n *\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/main/src/lib/polyfills/interactionCountPolyfill.ts\n */\n\nimport { monitor } from '@cloudcare/browser-core'\n\nvar observer\n\nvar interactionCountEstimate = 0\nvar minKnownInteractionId = Infinity\nvar maxKnownInteractionId = 0\n\nexport function initInteractionCountPolyfill() {\n  if ('interactionCount' in performance || observer) {\n    return\n  }\n\n  observer = new window.PerformanceObserver(\n    monitor(function (entries) {\n      entries.getEntries().forEach(function (e) {\n        const entry = e\n\n        if (entry.interactionId) {\n          minKnownInteractionId = Math.min(\n            minKnownInteractionId,\n            entry.interactionId\n          )\n          maxKnownInteractionId = Math.max(\n            maxKnownInteractionId,\n            entry.interactionId\n          )\n\n          interactionCountEstimate =\n            (maxKnownInteractionId - minKnownInteractionId) / 7 + 1\n        }\n      })\n    })\n  )\n  observer.observe({ type: 'event', buffered: true, durationThreshold: 0 })\n}\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport var getInteractionCount = function () {\n  return observer\n    ? interactionCountEstimate\n    : window.performance.interactionCount || 0\n}\n"],"mappings":";;;;;;;AAaA,IAAAA,YAAA,GAAAC,OAAA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,IAAIC,QAAQ;AAEZ,IAAIC,wBAAwB,GAAG,CAAC;AAChC,IAAIC,qBAAqB,GAAGC,QAAQ;AACpC,IAAIC,qBAAqB,GAAG,CAAC;AAEtB,SAASC,4BAA4BA,CAAA,EAAG;EAC7C,IAAI,kBAAkB,IAAIC,WAAW,IAAIN,QAAQ,EAAE;IACjD;EACF;EAEAA,QAAQ,GAAG,IAAIO,MAAM,CAACC,mBAAmB,CACvC,IAAAC,oBAAO,EAAC,UAAUC,OAAO,EAAE;IACzBA,OAAO,CAACC,UAAU,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,CAAC,EAAE;MACxC,IAAMC,KAAK,GAAGD,CAAC;MAEf,IAAIC,KAAK,CAACC,aAAa,EAAE;QACvBb,qBAAqB,GAAGc,IAAI,CAACC,GAAG,CAC9Bf,qBAAqB,EACrBY,KAAK,CAACC,aACR,CAAC;QACDX,qBAAqB,GAAGY,IAAI,CAACE,GAAG,CAC9Bd,qBAAqB,EACrBU,KAAK,CAACC,aACR,CAAC;QAEDd,wBAAwB,GACtB,CAACG,qBAAqB,GAAGF,qBAAqB,IAAI,CAAC,GAAG,CAAC;MAC3D;IACF,CAAC,CAAC;EACJ,CAAC,CACH,CAAC;EACDF,QAAQ,CAACmB,OAAO,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,QAAQ,EAAE,IAAI;IAAEC,iBAAiB,EAAE;EAAE,CAAC,CAAC;AAC3E;;AAEA;AACA;AACA;AACA;AACO,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAe;EAC3C,OAAOvB,QAAQ,GACXC,wBAAwB,GACxBM,MAAM,CAACD,WAAW,CAACkB,gBAAgB,IAAI,CAAC;AAC9C,CAAC;AAAAC,OAAA,CAAAF,mBAAA,GAAAA,mBAAA","ignoreList":[]}