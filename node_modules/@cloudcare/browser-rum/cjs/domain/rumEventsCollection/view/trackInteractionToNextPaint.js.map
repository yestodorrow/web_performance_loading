{"version":3,"file":"trackInteractionToNextPaint.js","names":["_browserCore","require","_performanceCollection","_getSelectorsFromElement","_interactionCountPolyfill","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","MAX_INTERACTION_ENTRIES","MAX_INP_VALUE","ONE_MINUTE","exports","trackInteractionToNextPaint","configuration","viewStart","viewLoadingType","lifeCycle","isInteractionToNextPaintSupported","getInteractionToNextPaint","undefined","setViewEnd","noop","stop","_trackViewInteractionCount","trackViewInteractionCount","getViewInteractionCount","stopViewInteractionCount","viewEnd","Infinity","longestInteractions","trackLongestInteractions","interactionToNextPaint","interactionToNextPaintTargetSelector","telemetryCollected","subscribe","LifeCycleEventType","PERFORMANCE_ENTRIES_COLLECTED","entries","_iterator","_step","entry","entryType","interactionId","startTime","process","newInteraction","estimateP98Duration","duration","_newInteraction$targe","addTelemetryDebug","inp","interaction","timeFromViewStart","elapsed","processingStart","processingEnd","targetNodeName","target","nodeName","isElementNode","getSelectorFromElement","actionNameAttribute","Math","min","targetSelector","viewEndTime","unsubscribe","sortAndTrimLongestInteractions","sort","a","b","splice","interactionIndex","findIndex","minLongestInteraction","push","floor","initInteractionCountPolyfill","previousInteractionCount","ViewLoadingType","INITIAL_LOAD","getInteractionCount","state","stopped","computeViewInteractionCount","interactionCount","supportPerformanceTimingEvent","window","PerformanceEventTiming"],"sources":["../../../../src/domain/rumEventsCollection/view/trackInteractionToNextPaint.js"],"sourcesContent":["import {\n  noop,\n  LifeCycleEventType,\n  ViewLoadingType,\n  addTelemetryDebug,\n  ONE_MINUTE,\n  elapsed,\n  isElementNode\n} from '@cloudcare/browser-core'\nimport { supportPerformanceTimingEvent } from '../../performanceCollection'\nimport { getSelectorFromElement } from '../actions/getSelectorsFromElement'\nimport {\n  getInteractionCount,\n  initInteractionCountPolyfill\n} from './interactionCountPolyfill'\n\n// Arbitrary value to prevent unnecessary memory usage on views with lots of interactions.\nvar MAX_INTERACTION_ENTRIES = 10\n\nexport var MAX_INP_VALUE = 1 * ONE_MINUTE\n\n/**\n * Track the interaction to next paint (INP).\n * To avoid outliers, return the p98 worst interaction of the view.\n * Documentation: https://web.dev/inp/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/main/src/onINP.ts\n */\nexport function trackInteractionToNextPaint(\n  configuration,\n  viewStart,\n  viewLoadingType,\n  lifeCycle\n) {\n  if (!isInteractionToNextPaintSupported()) {\n    return {\n      getInteractionToNextPaint: function () {\n        return undefined\n      },\n      setViewEnd: noop,\n      stop: noop\n    }\n  }\n\n  var _trackViewInteractionCount = trackViewInteractionCount(viewLoadingType)\n  var getViewInteractionCount =\n    _trackViewInteractionCount.getViewInteractionCount\n  var stopViewInteractionCount =\n    _trackViewInteractionCount.stopViewInteractionCount\n\n  let viewEnd = Infinity\n  var longestInteractions = trackLongestInteractions(getViewInteractionCount)\n  var interactionToNextPaint = -1\n  var interactionToNextPaintTargetSelector\n  var telemetryCollected = false\n  var subscribe = lifeCycle.subscribe(\n    LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED,\n    function (entries) {\n      for (var entry of entries) {\n        if (\n          (entry.entryType === 'event' || entry.entryType === 'first-input') &&\n          entry.interactionId &&\n          entry.startTime >= viewStart &&\n          entry.startTime <= viewEnd\n        ) {\n          longestInteractions.process(entry)\n        }\n      }\n\n      var newInteraction = longestInteractions.estimateP98Duration()\n      if (\n        newInteraction &&\n        newInteraction.duration !== interactionToNextPaint\n      ) {\n        interactionToNextPaint = newInteraction.duration\n        if (interactionToNextPaint > 10 * ONE_MINUTE && !telemetryCollected) {\n          telemetryCollected = true\n          addTelemetryDebug('INP outlier', {\n            inp: interactionToNextPaint,\n            interaction: {\n              timeFromViewStart: elapsed(viewStart, newInteraction.startTime),\n              duration: newInteraction.duration,\n              startTime: newInteraction.startTime,\n              processingStart: newInteraction.processingStart,\n              processingEnd: newInteraction.processingEnd,\n              interactionId: newInteraction.interactionId,\n              name: newInteraction.name,\n              targetNodeName: newInteraction.target?.nodeName\n            }\n          })\n        }\n        if (newInteraction.target && isElementNode(newInteraction.target)) {\n          interactionToNextPaintTargetSelector = getSelectorFromElement(\n            newInteraction.target,\n            configuration.actionNameAttribute\n          )\n        } else {\n          interactionToNextPaintTargetSelector = undefined\n        }\n      }\n    }\n  )\n\n  return {\n    getInteractionToNextPaint: function () {\n      // If no INP duration where captured because of the performanceObserver 40ms threshold\n      // but the view interaction count > 0 then report 0\n      if (interactionToNextPaint >= 0) {\n        return {\n          value: Math.min(interactionToNextPaint, MAX_INP_VALUE),\n          targetSelector: interactionToNextPaintTargetSelector\n        }\n      } else if (getViewInteractionCount()) {\n        return {\n          value: 0\n        }\n      }\n    },\n    setViewEnd: function (viewEndTime) {\n      viewEnd = viewEndTime\n      stopViewInteractionCount()\n    },\n    stop: subscribe.unsubscribe\n  }\n}\n\nfunction trackLongestInteractions(getViewInteractionCount) {\n  var longestInteractions = []\n\n  function sortAndTrimLongestInteractions() {\n    longestInteractions\n      .sort(function (a, b) {\n        return b.duration - a.duration\n      })\n      .splice(MAX_INTERACTION_ENTRIES)\n  }\n\n  return {\n    /**\n     * Process the performance entry:\n     * - if its duration is long enough, add the performance entry to the list of worst interactions\n     * - if an entry with the same interaction id exists and its duration is lower than the new one, then replace it in the list of worst interactions\n     */\n    process: function (entry) {\n      var interactionIndex = longestInteractions.findIndex(function (\n        interaction\n      ) {\n        return entry.interactionId === interaction.interactionId\n      })\n\n      var minLongestInteraction =\n        longestInteractions[longestInteractions.length - 1]\n\n      if (interactionIndex !== -1) {\n        if (entry.duration > longestInteractions[interactionIndex].duration) {\n          longestInteractions[interactionIndex] = entry\n          sortAndTrimLongestInteractions()\n        }\n      } else if (\n        longestInteractions.length < MAX_INTERACTION_ENTRIES ||\n        entry.duration > minLongestInteraction.duration\n      ) {\n        longestInteractions.push(entry)\n        sortAndTrimLongestInteractions()\n      }\n    },\n    /**\n     * Compute the p98 longest interaction.\n     * For better performance the computation is based on 10 longest interactions and the interaction count of the current view.\n     */\n    estimateP98Duration: function () {\n      var interactionIndex = Math.min(\n        longestInteractions.length - 1,\n        Math.floor(getViewInteractionCount() / 50)\n      )\n      return longestInteractions[interactionIndex]\n    }\n  }\n}\n\nexport function trackViewInteractionCount(viewLoadingType) {\n  initInteractionCountPolyfill()\n  var previousInteractionCount =\n    viewLoadingType === ViewLoadingType.INITIAL_LOAD ? 0 : getInteractionCount()\n  var state = { stopped: false }\n\n  function computeViewInteractionCount() {\n    return getInteractionCount() - previousInteractionCount\n  }\n  return {\n    getViewInteractionCount: function () {\n      if (state.stopped) {\n        return state.interactionCount\n      }\n      return computeViewInteractionCount()\n    },\n    stopViewInteractionCount: function () {\n      state = {\n        stopped: true,\n        interactionCount: computeViewInteractionCount()\n      }\n    }\n  }\n}\n\nexport function isInteractionToNextPaintSupported() {\n  return (\n    supportPerformanceTimingEvent('event') &&\n    window.PerformanceEventTiming &&\n    'interactionId' in PerformanceEventTiming.prototype\n  )\n}\n"],"mappings":"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","ignoreList":[]}