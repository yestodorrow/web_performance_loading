{"version":3,"file":"segment.js","names":["assign","RecordType","replayStats","Segment","encoder","context","creationReason","viewId","view","id","metadata","start","Infinity","end","creation_reason","records_count","has_full_snapshot","index_in_view","getSegmentsCount","source","addSegment","prototype","addRecord","record","callback","Math","min","timestamp","max","type","FullSnapshot","prefix","write","JSON","stringify","flush","Error","_this","slice","addWroteData","getRawBytesCount","reset"],"sources":["../../../../src/domain/replay/segmentCollection/segment.js"],"sourcesContent":["import { assign } from '@cloudcare/browser-core'\nimport { RecordType } from '../../../types'\nimport * as replayStats from '../replayStats'\n\nexport function Segment(encoder, context, creationReason) {\n  this.encoder = encoder\n  var viewId = context.view.id\n\n  this.metadata = assign(\n    {\n      start: Infinity,\n      end: -Infinity,\n      creation_reason: creationReason,\n      records_count: 0,\n      has_full_snapshot: false,\n      index_in_view: replayStats.getSegmentsCount(viewId),\n      source: 'browser'\n    },\n    context\n  )\n  replayStats.addSegment(viewId)\n}\nSegment.prototype.addRecord = function (record, callback) {\n  this.metadata.start = Math.min(this.metadata.start, record.timestamp)\n  this.metadata.end = Math.max(this.metadata.end, record.timestamp)\n  this.metadata.records_count += 1\n  if (!this.metadata.has_full_snapshot) {\n    this.metadata.has_full_snapshot = record.type === RecordType.FullSnapshot\n  }\n  replayStats.addRecord(this.metadata.view.id)\n  const prefix = this.metadata.records_count === 1 ? '{\"records\":[' : ','\n  this.encoder.write(prefix + JSON.stringify(record), callback)\n}\nSegment.prototype.flush = function (callback) {\n  if (this.metadata.records_count === 0) {\n    throw new Error('Empty segment flushed')\n  }\n  var _this = this\n  this.encoder.write(\n    '],' + JSON.stringify(this.metadata).slice(1) + '\\n',\n    function () {\n      replayStats.addWroteData(\n        _this.metadata.view.id,\n        _this.encoder.getRawBytesCount()\n      )\n      callback(_this.metadata)\n    }\n  )\n  this.encoder.reset()\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,yBAAyB;AAChD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAE7C,OAAO,SAASC,OAAOA,CAACC,OAAO,EAAEC,OAAO,EAAEC,cAAc,EAAE;EACxD,IAAI,CAACF,OAAO,GAAGA,OAAO;EACtB,IAAIG,MAAM,GAAGF,OAAO,CAACG,IAAI,CAACC,EAAE;EAE5B,IAAI,CAACC,QAAQ,GAAGV,MAAM,CACpB;IACEW,KAAK,EAAEC,QAAQ;IACfC,GAAG,EAAE,CAACD,QAAQ;IACdE,eAAe,EAAER,cAAc;IAC/BS,aAAa,EAAE,CAAC;IAChBC,iBAAiB,EAAE,KAAK;IACxBC,aAAa,EAAEf,WAAW,CAACgB,gBAAgB,CAACX,MAAM,CAAC;IACnDY,MAAM,EAAE;EACV,CAAC,EACDd,OACF,CAAC;EACDH,WAAW,CAACkB,UAAU,CAACb,MAAM,CAAC;AAChC;AACAJ,OAAO,CAACkB,SAAS,CAACC,SAAS,GAAG,UAAUC,MAAM,EAAEC,QAAQ,EAAE;EACxD,IAAI,CAACd,QAAQ,CAACC,KAAK,GAAGc,IAAI,CAACC,GAAG,CAAC,IAAI,CAAChB,QAAQ,CAACC,KAAK,EAAEY,MAAM,CAACI,SAAS,CAAC;EACrE,IAAI,CAACjB,QAAQ,CAACG,GAAG,GAAGY,IAAI,CAACG,GAAG,CAAC,IAAI,CAAClB,QAAQ,CAACG,GAAG,EAAEU,MAAM,CAACI,SAAS,CAAC;EACjE,IAAI,CAACjB,QAAQ,CAACK,aAAa,IAAI,CAAC;EAChC,IAAI,CAAC,IAAI,CAACL,QAAQ,CAACM,iBAAiB,EAAE;IACpC,IAAI,CAACN,QAAQ,CAACM,iBAAiB,GAAGO,MAAM,CAACM,IAAI,KAAK5B,UAAU,CAAC6B,YAAY;EAC3E;EACA5B,WAAW,CAACoB,SAAS,CAAC,IAAI,CAACZ,QAAQ,CAACF,IAAI,CAACC,EAAE,CAAC;EAC5C,IAAMsB,MAAM,GAAG,IAAI,CAACrB,QAAQ,CAACK,aAAa,KAAK,CAAC,GAAG,cAAc,GAAG,GAAG;EACvE,IAAI,CAACX,OAAO,CAAC4B,KAAK,CAACD,MAAM,GAAGE,IAAI,CAACC,SAAS,CAACX,MAAM,CAAC,EAAEC,QAAQ,CAAC;AAC/D,CAAC;AACDrB,OAAO,CAACkB,SAAS,CAACc,KAAK,GAAG,UAAUX,QAAQ,EAAE;EAC5C,IAAI,IAAI,CAACd,QAAQ,CAACK,aAAa,KAAK,CAAC,EAAE;IACrC,MAAM,IAAIqB,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAI,CAACjC,OAAO,CAAC4B,KAAK,CAChB,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACxB,QAAQ,CAAC,CAAC4B,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,EACpD,YAAY;IACVpC,WAAW,CAACqC,YAAY,CACtBF,KAAK,CAAC3B,QAAQ,CAACF,IAAI,CAACC,EAAE,EACtB4B,KAAK,CAACjC,OAAO,CAACoC,gBAAgB,CAAC,CACjC,CAAC;IACDhB,QAAQ,CAACa,KAAK,CAAC3B,QAAQ,CAAC;EAC1B,CACF,CAAC;EACD,IAAI,CAACN,OAAO,CAACqC,KAAK,CAAC,CAAC;AACtB,CAAC","ignoreList":[]}