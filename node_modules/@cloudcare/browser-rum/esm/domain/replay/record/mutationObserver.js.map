{"version":3,"file":"mutationObserver.js","names":["noop","forEachChildNodes","isNodeShadowHost","getParentNode","isNullUndefinedDefaultValue","monitor","getMutationObserverConstructor","NodePrivacyLevel","getNodePrivacyLevel","getTextContent","getElementInputValue","getSerializedNodeId","hasSerializedNode","nodeAndAncestorsHaveSerializedNode","serializeNodeWithId","serializeAttribute","SerializationContextStatus","createMutationBatch","startMutationObserver","mutationCallback","configuration","shadowRootsController","target","MutationObserver","stop","flush","mutationBatch","mutations","processMutations","concat","observer","takeRecords","addMutations","observe","attributeOldValue","attributes","characterData","characterDataOldValue","childList","subtree","disconnect","nodePrivacyLevelCache","Map","filter","mutation","type","forEach","removedNodes","removedNode","traverseRemovedShadowDom","removeShadowRoot","filteredMutations","isConnected","defaultPrivacyLevel","HIDDEN","_processChildListMutations","processChildListMutations","adds","removes","serializedNodeIds","hasBeenSerialized","node","has","texts","processCharacterDataMutations","processAttributesMutations","length","addedAndMovedNodes","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","addedNodes","add","set","err","e","f","sortedAddedAndMovedNodes","Array","from","sortAddedAndMovedNodes","addedNodeMutations","_i","_sortedAddedAndMovedN","parentNodePrivacyLevel","parentNode","IGNORE","serializedNode","serializationContext","status","MUTATION","push","nextId","getNextSibling","parentId","removedNodeMutations","parent","id","nextSibling","textMutations","handledNodes","_iterator2","_step2","textContent","oldValue","attributeMutations","handledElements","handledAttributes","get","attributeName","emittedMutations","_iterator3","_step3","uncensoredValue","getAttribute","privacyLevel","attributeValue","transformedValue","inputValue","undefined","emittedMutation","nodes","sort","a","b","position","compareDocumentPosition","Node","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","shadowDomRemovedCallback","shadowRoot","childNode"],"sources":["../../../../src/domain/replay/record/mutationObserver.js"],"sourcesContent":["import {\n  noop,\n  forEachChildNodes,\n  isNodeShadowHost,\n  getParentNode,\n  isNullUndefinedDefaultValue,\n  monitor\n} from '@cloudcare/browser-core'\nimport { getMutationObserverConstructor } from '../../domMutationObservable'\nimport { NodePrivacyLevel } from '../../../constants'\nimport { getNodePrivacyLevel, getTextContent } from './privacy'\nimport {\n  getElementInputValue,\n  getSerializedNodeId,\n  hasSerializedNode,\n  nodeAndAncestorsHaveSerializedNode\n} from './serializationUtils'\nimport {\n  serializeNodeWithId,\n  serializeAttribute,\n  SerializationContextStatus\n} from './serialize'\nimport { createMutationBatch } from './mutationBatch'\n\n/**\n * Buffers and aggregate mutations generated by a MutationObserver into MutationPayload\n */\nexport function startMutationObserver(\n  mutationCallback,\n  configuration,\n  shadowRootsController,\n  target\n) {\n  var MutationObserver = getMutationObserverConstructor()\n  if (!MutationObserver) {\n    return { stop: noop, flush: noop }\n  }\n\n  var mutationBatch = createMutationBatch(function (mutations) {\n    processMutations(\n      mutations.concat(observer.takeRecords()),\n      mutationCallback,\n      configuration,\n      shadowRootsController\n    )\n  })\n\n  var observer = new MutationObserver(monitor(mutationBatch.addMutations))\n\n  observer.observe(target, {\n    attributeOldValue: true,\n    attributes: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  })\n\n  return {\n    stop: function () {\n      observer.disconnect()\n      mutationBatch.stop()\n    },\n    flush: function () {\n      mutationBatch.flush()\n    }\n  }\n}\n\nfunction processMutations(\n  mutations,\n  mutationCallback,\n  configuration,\n  shadowRootsController\n) {\n  var nodePrivacyLevelCache = new Map()\n  mutations\n    .filter(function (mutation) {\n      return mutation.type === 'childList'\n    })\n    .forEach(function (mutation) {\n      mutation.removedNodes.forEach(function (removedNode) {\n        traverseRemovedShadowDom(\n          removedNode,\n          shadowRootsController.removeShadowRoot\n        )\n      })\n    })\n\n  // Discard any mutation with a 'target' node that:\n  // * isn't injected in the current document or isn't known/serialized yet: those nodes are likely\n  // part of a mutation occurring in a parent Node\n  // * should be hidden or ignored\n  var filteredMutations = mutations.filter(function (mutation) {\n    return (\n      mutation.target.isConnected &&\n      nodeAndAncestorsHaveSerializedNode(mutation.target) &&\n      getNodePrivacyLevel(\n        mutation.target,\n        configuration.defaultPrivacyLevel,\n        nodePrivacyLevelCache\n      ) !== NodePrivacyLevel.HIDDEN\n    )\n  })\n  var _processChildListMutations = processChildListMutations(\n    filteredMutations.filter(function (mutation) {\n      return mutation.type === 'childList'\n    }),\n    configuration,\n    shadowRootsController,\n    nodePrivacyLevelCache\n  )\n  var adds = _processChildListMutations.adds\n  var removes = _processChildListMutations.removes\n  //   var hasBeenSerialized = _processChildListMutations.hasBeenSerialized\n  var serializedNodeIds = _processChildListMutations.serializedNodeIds\n  function hasBeenSerialized(node) {\n    return (\n      hasSerializedNode(node) &&\n      serializedNodeIds.has(getSerializedNodeId(node))\n    )\n  }\n  var texts = processCharacterDataMutations(\n    filteredMutations.filter(function (mutation) {\n      return (\n        mutation.type === 'characterData' && !hasBeenSerialized(mutation.target)\n      )\n    }),\n    configuration,\n    nodePrivacyLevelCache\n  )\n\n  var attributes = processAttributesMutations(\n    filteredMutations.filter(function (mutation) {\n      return (\n        mutation.type === 'attributes' && !hasBeenSerialized(mutation.target)\n      )\n    }),\n    configuration,\n    nodePrivacyLevelCache\n  )\n  if (!texts.length && !attributes.length && !removes.length && !adds.length) {\n    return\n  }\n  mutationCallback({\n    adds: adds,\n    removes: removes,\n    texts: texts,\n    attributes: attributes\n  })\n}\n\nfunction processChildListMutations(\n  mutations,\n  configuration,\n  shadowRootsController,\n  nodePrivacyLevelCache\n) {\n  // First, we iterate over mutations to collect:\n  //\n  // * nodes that have been added in the document and not removed by a subsequent mutation\n  // * nodes that have been removed from the document but were not added in a previous mutation\n  //\n  // For this second category, we also collect their previous parent (mutation.target) because we'll\n  // need it to emit a 'remove' mutation.\n  //\n  // Those two categories may overlap: if a node moved from a position to another, it is reported as\n  // two mutation records, one with a \"removedNodes\" and the other with \"addedNodes\". In this case,\n  // the node will be in both sets.\n  var addedAndMovedNodes = new Set()\n  var removedNodes = new Map()\n  for (var mutation of mutations) {\n    mutation.addedNodes.forEach(function (node) {\n      addedAndMovedNodes.add(node)\n    })\n    mutation.removedNodes.forEach(function (node) {\n      if (!addedAndMovedNodes.has(node)) {\n        removedNodes.set(node, mutation.target)\n      }\n      addedAndMovedNodes.delete(node)\n    })\n  }\n\n  // Then, we sort nodes that are still in the document by topological order, for two reasons:\n  //\n  // * We will serialize each added nodes with their descendants. We don't want to serialize a node\n  // twice, so we need to iterate over the parent nodes first and skip any node that is contained in\n  // a precedent node.\n  //\n  // * To emit \"add\" mutations, we need references to the parent and potential next sibling of each\n  // added node. So we need to iterate over the parent nodes first, and when multiple nodes are\n  // siblings, we want to iterate from last to first. This will ensure that any \"next\" node is\n  // already serialized and have an id.\n  var sortedAddedAndMovedNodes = Array.from(addedAndMovedNodes)\n  sortAddedAndMovedNodes(sortedAddedAndMovedNodes)\n\n  // Then, we iterate over our sorted node sets to emit mutations. We collect the newly serialized\n  // node ids in a set to be able to skip subsequent related mutations.\n  var serializedNodeIds = new Set()\n\n  var addedNodeMutations = []\n  for (var node of sortedAddedAndMovedNodes) {\n    if (hasBeenSerialized(node)) {\n      continue\n    }\n\n    var parentNodePrivacyLevel = getNodePrivacyLevel(\n      node.parentNode,\n      configuration.defaultPrivacyLevel,\n      nodePrivacyLevelCache\n    )\n    if (\n      parentNodePrivacyLevel === NodePrivacyLevel.HIDDEN ||\n      parentNodePrivacyLevel === NodePrivacyLevel.IGNORE\n    ) {\n      continue\n    }\n\n    var serializedNode = serializeNodeWithId(node, {\n      serializedNodeIds: serializedNodeIds,\n      parentNodePrivacyLevel: parentNodePrivacyLevel,\n      serializationContext: {\n        status: SerializationContextStatus.MUTATION,\n        shadowRootsController: shadowRootsController\n      },\n      configuration\n    })\n    if (!serializedNode) {\n      continue\n    }\n\n    var parentNode = getParentNode(node)\n    addedNodeMutations.push({\n      nextId: getNextSibling(node),\n      parentId: getSerializedNodeId(parentNode),\n      node: serializedNode\n    })\n  }\n  // Finally, we emit remove mutations.\n  var removedNodeMutations = []\n  removedNodes.forEach(function (parent, node) {\n    if (hasSerializedNode(node)) {\n      removedNodeMutations.push({\n        parentId: getSerializedNodeId(parent),\n        id: getSerializedNodeId(node)\n      })\n    }\n  })\n\n  return {\n    adds: addedNodeMutations,\n    removes: removedNodeMutations,\n    serializedNodeIds: serializedNodeIds,\n    hasBeenSerialized: hasBeenSerialized\n  }\n\n  function hasBeenSerialized(node) {\n    return (\n      hasSerializedNode(node) &&\n      serializedNodeIds.has(getSerializedNodeId(node))\n    )\n  }\n\n  function getNextSibling(node) {\n    var nextSibling = node.nextSibling\n    while (nextSibling) {\n      if (hasSerializedNode(nextSibling)) {\n        return getSerializedNodeId(nextSibling)\n      }\n      nextSibling = nextSibling.nextSibling\n    }\n\n    return null\n  }\n}\n\nfunction processCharacterDataMutations(\n  mutations,\n  configuration,\n  nodePrivacyLevelCache\n) {\n  var textMutations = []\n\n  // Deduplicate mutations based on their target node\n  var handledNodes = new Set()\n  var filteredMutations = mutations.filter(function (mutation) {\n    if (handledNodes.has(mutation.target)) {\n      return false\n    }\n    handledNodes.add(mutation.target)\n    return true\n  })\n\n  // Emit mutations\n  for (var mutation of filteredMutations) {\n    var value = mutation.target.textContent\n    if (value === mutation.oldValue) {\n      continue\n    }\n\n    var parentNodePrivacyLevel = getNodePrivacyLevel(\n      getParentNode(mutation.target),\n      configuration.defaultPrivacyLevel,\n      nodePrivacyLevelCache\n    )\n    if (\n      parentNodePrivacyLevel === NodePrivacyLevel.HIDDEN ||\n      parentNodePrivacyLevel === NodePrivacyLevel.IGNORE\n    ) {\n      continue\n    }\n\n    textMutations.push({\n      id: getSerializedNodeId(mutation.target),\n      value: isNullUndefinedDefaultValue(\n        getTextContent(mutation.target, false, parentNodePrivacyLevel, null)\n      )\n    })\n  }\n\n  return textMutations\n}\n\nfunction processAttributesMutations(\n  mutations,\n  configuration,\n  nodePrivacyLevelCache\n) {\n  var attributeMutations = []\n\n  // Deduplicate mutations based on their target node and changed attribute\n  var handledElements = new Map()\n  var filteredMutations = mutations.filter(function (mutation) {\n    var handledAttributes = handledElements.get(mutation.target)\n    if (handledAttributes && handledAttributes.has(mutation.attributeName)) {\n      return false\n    }\n    if (!handledAttributes) {\n      handledElements.set(mutation.target, new Set([mutation.attributeName]))\n    } else {\n      handledAttributes.add(mutation.attributeName)\n    }\n    return true\n  })\n\n  // Emit mutations\n  var emittedMutations = new Map()\n  for (var mutation of filteredMutations) {\n    var uncensoredValue = mutation.target.getAttribute(mutation.attributeName)\n    if (uncensoredValue === mutation.oldValue) {\n      continue\n    }\n    var privacyLevel = getNodePrivacyLevel(\n      mutation.target,\n      configuration.defaultPrivacyLevel,\n      nodePrivacyLevelCache\n    )\n    var attributeValue = serializeAttribute(\n      mutation.target,\n      privacyLevel,\n      mutation.attributeName,\n      configuration\n    )\n\n    var transformedValue\n    if (mutation.attributeName === 'value') {\n      var inputValue = getElementInputValue(mutation.target, privacyLevel)\n      if (inputValue === undefined) {\n        continue\n      }\n      transformedValue = inputValue\n    } else if (typeof attributeValue === 'string') {\n      transformedValue = attributeValue\n    } else {\n      transformedValue = null\n    }\n\n    var emittedMutation = emittedMutations.get(mutation.target)\n    if (!emittedMutation) {\n      emittedMutation = {\n        id: getSerializedNodeId(mutation.target),\n        attributes: {}\n      }\n      attributeMutations.push(emittedMutation)\n      emittedMutations.set(mutation.target, emittedMutation)\n    }\n\n    emittedMutation.attributes[mutation.attributeName] = transformedValue\n  }\n\n  return attributeMutations\n}\n\nexport function sortAddedAndMovedNodes(nodes) {\n  nodes.sort(function (a, b) {\n    var position = a.compareDocumentPosition(b)\n    /* eslint-disable no-bitwise */\n    if (position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      return -1\n    } else if (position & Node.DOCUMENT_POSITION_CONTAINS) {\n      return 1\n    } else if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\n      return 1\n    } else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      return -1\n    }\n    /* eslint-enable no-bitwise */\n    return 0\n  })\n}\nfunction traverseRemovedShadowDom(removedNode, shadowDomRemovedCallback) {\n  if (isNodeShadowHost(removedNode)) {\n    shadowDomRemovedCallback(removedNode.shadowRoot)\n  }\n  forEachChildNodes(removedNode, function (childNode) {\n    return traverseRemovedShadowDom(childNode, shadowDomRemovedCallback)\n  })\n}\n"],"mappings":"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","ignoreList":[]}