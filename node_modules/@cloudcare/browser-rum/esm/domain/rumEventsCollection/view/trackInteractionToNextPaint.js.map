{"version":3,"file":"trackInteractionToNextPaint.js","names":["noop","LifeCycleEventType","ViewLoadingType","addTelemetryDebug","ONE_MINUTE","elapsed","isElementNode","supportPerformanceTimingEvent","getSelectorFromElement","getInteractionCount","initInteractionCountPolyfill","MAX_INTERACTION_ENTRIES","MAX_INP_VALUE","trackInteractionToNextPaint","configuration","viewStart","viewLoadingType","lifeCycle","isInteractionToNextPaintSupported","getInteractionToNextPaint","undefined","setViewEnd","stop","_trackViewInteractionCount","trackViewInteractionCount","getViewInteractionCount","stopViewInteractionCount","viewEnd","Infinity","longestInteractions","trackLongestInteractions","interactionToNextPaint","interactionToNextPaintTargetSelector","telemetryCollected","subscribe","PERFORMANCE_ENTRIES_COLLECTED","entries","_iterator","_createForOfIteratorHelper","_step","s","n","done","entry","value","entryType","interactionId","startTime","process","err","e","f","newInteraction","estimateP98Duration","duration","_newInteraction$targe","inp","interaction","timeFromViewStart","processingStart","processingEnd","name","targetNodeName","target","nodeName","actionNameAttribute","Math","min","targetSelector","viewEndTime","unsubscribe","sortAndTrimLongestInteractions","sort","a","b","splice","interactionIndex","findIndex","minLongestInteraction","length","push","floor","previousInteractionCount","INITIAL_LOAD","state","stopped","computeViewInteractionCount","interactionCount","window","PerformanceEventTiming","prototype"],"sources":["../../../../src/domain/rumEventsCollection/view/trackInteractionToNextPaint.js"],"sourcesContent":["import {\n  noop,\n  LifeCycleEventType,\n  ViewLoadingType,\n  addTelemetryDebug,\n  ONE_MINUTE,\n  elapsed,\n  isElementNode\n} from '@cloudcare/browser-core'\nimport { supportPerformanceTimingEvent } from '../../performanceCollection'\nimport { getSelectorFromElement } from '../actions/getSelectorsFromElement'\nimport {\n  getInteractionCount,\n  initInteractionCountPolyfill\n} from './interactionCountPolyfill'\n\n// Arbitrary value to prevent unnecessary memory usage on views with lots of interactions.\nvar MAX_INTERACTION_ENTRIES = 10\n\nexport var MAX_INP_VALUE = 1 * ONE_MINUTE\n\n/**\n * Track the interaction to next paint (INP).\n * To avoid outliers, return the p98 worst interaction of the view.\n * Documentation: https://web.dev/inp/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/main/src/onINP.ts\n */\nexport function trackInteractionToNextPaint(\n  configuration,\n  viewStart,\n  viewLoadingType,\n  lifeCycle\n) {\n  if (!isInteractionToNextPaintSupported()) {\n    return {\n      getInteractionToNextPaint: function () {\n        return undefined\n      },\n      setViewEnd: noop,\n      stop: noop\n    }\n  }\n\n  var _trackViewInteractionCount = trackViewInteractionCount(viewLoadingType)\n  var getViewInteractionCount =\n    _trackViewInteractionCount.getViewInteractionCount\n  var stopViewInteractionCount =\n    _trackViewInteractionCount.stopViewInteractionCount\n\n  let viewEnd = Infinity\n  var longestInteractions = trackLongestInteractions(getViewInteractionCount)\n  var interactionToNextPaint = -1\n  var interactionToNextPaintTargetSelector\n  var telemetryCollected = false\n  var subscribe = lifeCycle.subscribe(\n    LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED,\n    function (entries) {\n      for (var entry of entries) {\n        if (\n          (entry.entryType === 'event' || entry.entryType === 'first-input') &&\n          entry.interactionId &&\n          entry.startTime >= viewStart &&\n          entry.startTime <= viewEnd\n        ) {\n          longestInteractions.process(entry)\n        }\n      }\n\n      var newInteraction = longestInteractions.estimateP98Duration()\n      if (\n        newInteraction &&\n        newInteraction.duration !== interactionToNextPaint\n      ) {\n        interactionToNextPaint = newInteraction.duration\n        if (interactionToNextPaint > 10 * ONE_MINUTE && !telemetryCollected) {\n          telemetryCollected = true\n          addTelemetryDebug('INP outlier', {\n            inp: interactionToNextPaint,\n            interaction: {\n              timeFromViewStart: elapsed(viewStart, newInteraction.startTime),\n              duration: newInteraction.duration,\n              startTime: newInteraction.startTime,\n              processingStart: newInteraction.processingStart,\n              processingEnd: newInteraction.processingEnd,\n              interactionId: newInteraction.interactionId,\n              name: newInteraction.name,\n              targetNodeName: newInteraction.target?.nodeName\n            }\n          })\n        }\n        if (newInteraction.target && isElementNode(newInteraction.target)) {\n          interactionToNextPaintTargetSelector = getSelectorFromElement(\n            newInteraction.target,\n            configuration.actionNameAttribute\n          )\n        } else {\n          interactionToNextPaintTargetSelector = undefined\n        }\n      }\n    }\n  )\n\n  return {\n    getInteractionToNextPaint: function () {\n      // If no INP duration where captured because of the performanceObserver 40ms threshold\n      // but the view interaction count > 0 then report 0\n      if (interactionToNextPaint >= 0) {\n        return {\n          value: Math.min(interactionToNextPaint, MAX_INP_VALUE),\n          targetSelector: interactionToNextPaintTargetSelector\n        }\n      } else if (getViewInteractionCount()) {\n        return {\n          value: 0\n        }\n      }\n    },\n    setViewEnd: function (viewEndTime) {\n      viewEnd = viewEndTime\n      stopViewInteractionCount()\n    },\n    stop: subscribe.unsubscribe\n  }\n}\n\nfunction trackLongestInteractions(getViewInteractionCount) {\n  var longestInteractions = []\n\n  function sortAndTrimLongestInteractions() {\n    longestInteractions\n      .sort(function (a, b) {\n        return b.duration - a.duration\n      })\n      .splice(MAX_INTERACTION_ENTRIES)\n  }\n\n  return {\n    /**\n     * Process the performance entry:\n     * - if its duration is long enough, add the performance entry to the list of worst interactions\n     * - if an entry with the same interaction id exists and its duration is lower than the new one, then replace it in the list of worst interactions\n     */\n    process: function (entry) {\n      var interactionIndex = longestInteractions.findIndex(function (\n        interaction\n      ) {\n        return entry.interactionId === interaction.interactionId\n      })\n\n      var minLongestInteraction =\n        longestInteractions[longestInteractions.length - 1]\n\n      if (interactionIndex !== -1) {\n        if (entry.duration > longestInteractions[interactionIndex].duration) {\n          longestInteractions[interactionIndex] = entry\n          sortAndTrimLongestInteractions()\n        }\n      } else if (\n        longestInteractions.length < MAX_INTERACTION_ENTRIES ||\n        entry.duration > minLongestInteraction.duration\n      ) {\n        longestInteractions.push(entry)\n        sortAndTrimLongestInteractions()\n      }\n    },\n    /**\n     * Compute the p98 longest interaction.\n     * For better performance the computation is based on 10 longest interactions and the interaction count of the current view.\n     */\n    estimateP98Duration: function () {\n      var interactionIndex = Math.min(\n        longestInteractions.length - 1,\n        Math.floor(getViewInteractionCount() / 50)\n      )\n      return longestInteractions[interactionIndex]\n    }\n  }\n}\n\nexport function trackViewInteractionCount(viewLoadingType) {\n  initInteractionCountPolyfill()\n  var previousInteractionCount =\n    viewLoadingType === ViewLoadingType.INITIAL_LOAD ? 0 : getInteractionCount()\n  var state = { stopped: false }\n\n  function computeViewInteractionCount() {\n    return getInteractionCount() - previousInteractionCount\n  }\n  return {\n    getViewInteractionCount: function () {\n      if (state.stopped) {\n        return state.interactionCount\n      }\n      return computeViewInteractionCount()\n    },\n    stopViewInteractionCount: function () {\n      state = {\n        stopped: true,\n        interactionCount: computeViewInteractionCount()\n      }\n    }\n  }\n}\n\nexport function isInteractionToNextPaintSupported() {\n  return (\n    supportPerformanceTimingEvent('event') &&\n    window.PerformanceEventTiming &&\n    'interactionId' in PerformanceEventTiming.prototype\n  )\n}\n"],"mappings":"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","ignoreList":[]}